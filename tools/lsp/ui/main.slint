// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

// cSpell: ignore Heade

import { Button, ComboBox, HorizontalBox, ListView, ScrollView, VerticalBox } from "std-widgets.slint";
import { HeaderBar } from "header-bar.slint";
import { Diagnostics, DiagnosticsOverlay } from "diagnostics-overlay.slint";
import { Resizer } from "resizer.slint";

export { Diagnostics }

export component PreviewUi inherits Window {
    in property<[string]> known-styles;
    in property<[Diagnostics]> diagnostics;
    in property<string> status-text;
    in property<component-factory> preview-area;
    in-out property<string> current-style;
    in property<bool> show-preview-ui : true;

    callback design-mode-changed(/* enabled */ bool);
    callback style-changed();
    callback show-document(/* url */ string, /* line */ int, /* column */ int);

    property <length> border: 20px;

    title: "Slint Live-Preview";
    icon: @image-url("assets/slint-logo-small-light.png");

    if (!show-preview-ui): VerticalLayout {
        no-ui-drawing-rect := Rectangle {
            ComponentContainer {
                component-factory <=> root.preview-area;
                width: clamp(no-ui-drawing-rect.width, self.min-width, self.max-width);
                height: clamp(no-ui-drawing-rect.height, self.min-height, self.max-height);
            }

            // Diagnostics overlay:
            DiagnosticsOverlay {
                diagnostics <=> root.diagnostics;
                show-document(url, line, column) => { root.show-document(url, line, column); }
            }
        }
    }
    if (show-preview-ui): VerticalLayout {
        HeaderBar {
            vertical-stretch: 0.0;

            height: self.preferred-height;

            // i-pick-button := Button {
            //     text: "Design Mode";
            //     checkable: true;
            //
            //     clicked => {
            //         root.design-mode-changed(self.checked);
            //     }
            // }

            Text {
                text: "Style:";
                vertical-alignment: center;
            }
            i-style-select := ComboBox {
                model: root.known-styles;
                current-value <=> current-style;
                selected(value) => {
                    root.style-changed();
                }
            }

            Text {
                text: root.status-text;
                vertical-alignment: center;
            }
        }

        i-scroll-view := ScrollView {
            property <length> border: 60px;

            viewport-width: i-drawing-rect.width;
            viewport-height: i-drawing-rect.height;

            i-drawing-rect := Rectangle {
                background: Colors.white;

                width: max(i-scroll-view.visible-width, i-resizer.width + i-scroll-view.border);
                height: max(i-scroll-view.visible-height, i-resizer.height + i-scroll-view.border);

                i-resizer := Resizer {
                    is-resizable <=> i-preview-area-container.is-resizable;

                    resize(w, h) => {
                        i-preview-area-container.width = clamp(w, i-preview-area-container.min-width, i-preview-area-container.max-width);
                        i-preview-area-container.height = clamp(h, i-preview-area-container.min-height, i-preview-area-container.max-height);
                    }

                    width <=> i-preview-area-container.width;
                    height <=> i-preview-area-container.height;

                    i-preview-area-container := ComponentContainer {
                        property <bool> is-resizable: (self.min-width != self.max-width && self.min-height != self.max-height) && self.has-component;

                        component-factory <=> root.preview-area;
                    }
                }

                // Diagnostics overlay:
                DiagnosticsOverlay {
                    diagnostics <=> root.diagnostics;
                    show-document(url, line, column) => { root.show-document(url, line, column); }
                }
            }
        }
    }
}

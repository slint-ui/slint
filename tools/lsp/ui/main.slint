// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

// cSpell: ignore Heade

import { Button, ComboBox, ListView, ScrollView, VerticalBox } from "std-widgets.slint";
import { DrawArea, Selection } from "draw-area.slint";
import { HeaderBar } from "header-bar.slint";
import { Diagnostics, DiagnosticsOverlay } from "diagnostics-overlay.slint";

export { Diagnostics }

export component PreviewUi inherits Window {
    in property <[Diagnostics]> diagnostics;
    in property <[Selection]> selections;
    in property <[string]> known-styles;
    in property <bool> experimental: false;
    in property <bool> show-preview-ui: true;
    in property <component-factory> preview-area;
    in property <string> status-text;
    in-out property <string> current-style;
    out property <bool> design-mode;

    callback select-at(/* x */ length, /* y */ length);
    callback select-into(/* x */ length, /* y */ length);
    callback show-document(/* url */ string, /* line */ int, /* column */ int);
    callback style-changed();

    property <length> border: 20px;

    title: "Slint Live-Preview";
    icon: @image-url("assets/slint-logo-small-light.png");

    VerticalLayout {
        if (!show-preview-ui): no-ui-drawing-rect := Rectangle {
            VerticalLayout {
                ComponentContainer {
                    component-factory <=> root.preview-area;
                }
            }

            // Diagnostics overlay:
            DiagnosticsOverlay {
                width: 100%;
                height: 100%;
                diagnostics <=> root.diagnostics;
                show-document(url, line, column) => { root.show-document(url, line, column); }
            }
        }
        if (show-preview-ui): VerticalLayout {
            HeaderBar {
                vertical-stretch: 0.0;

                height: self.preferred-height;

                i-pick-button := Button {
                    text: "Pick Mode";
                    checkable: true;
                    checked <=> root.design-mode;
                }

                Text {
                    text: "Style:";
                    vertical-alignment: center;
                }
                i-style-select := ComboBox {
                    model: root.known-styles;
                    current-value <=> current-style;
                    selected(value) => {
                        root.style-changed();
                    }
                }

                Text {
                    text: root.status-text;
                    vertical-alignment: center;
                }
            }

            DrawArea {
                design-mode <=> root.design-mode;
                diagnostics <=> root.diagnostics;
                experimental <=> root.experimental;
                preview-area <=> root.preview-area;
                selections <=> root.selections;

                select-at(x, y) => { root.select-at(x, y); }
                select-into(x, y) => { root.select-into(x, y); }
                show-document(url, line, column) => { root.show-document(url, line, column); }
            }
        }
    }
}

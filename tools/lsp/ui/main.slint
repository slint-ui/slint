// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

// cSpell: ignore Heade

import { Button, TabWidget } from "std-widgets.slint";
import { Api, ComponentItem, DiagnosticSummary } from "api.slint";

import { EditorSizeSettings, EditorSpaceSettings, Icons } from "./components/styling.slint";
import { StatusLine } from "./components/status-line.slint";
import { HeaderView } from "./views/header-view.slint";
import { LibraryView } from "./views/library-view.slint";
import { DrawAreaMode, PreviewView } from "./views/preview-view.slint";
import { OutOfDateBox } from "./components/out-of-date-box.slint";
import { PropertyView } from "./views/property-view.slint";
import { PreviewDataView } from "./views/preview-data-view.slint";
import { WindowGlobal, WindowManager } from "windowglobal.slint";
import { ColorPickerView, Styles as PickerStyles } from "components/widgets/floating-color-picker-widget.slint";
import { TableEditorView } from "components/spreadsheet-dialog.slint";
import "./assets/Inter-VariableFont.ttf";

export { Api }

export component PreviewUi inherits Window {
    property <length> border: 20px;
    property <ComponentItem> visible-component: {
        name: "",
        defined-at: "",
        pretty-location: "",
        is-user-defined: false,
        is-currently-shown: false,
    };
    property <bool> show-left-sidebar;
    property <bool> show-right-sidebar;
    property <bool> show-floating-widget <=> WindowManager.showing-color-picker;
    property <bool> show-floating-table-editor <=> WindowManager.showing-table-editor;
    property <bool> show-color-stop-picker <=> WindowManager.showing-color-stop-picker;
    property <length> initial-floating-x;

    title: "Slint Live-Preview";
    icon: @image-url("assets/slint-logo-small-light.png");
    always-on-top <=> Api.always-on-top;

    init => {
        WindowGlobal.window-width = self.width;
        WindowGlobal.window-height = self.height;
        initial-floating-x = (self.width - PickerStyles.picker-width - 350px).max(0);
    }

    changed width => {
        WindowGlobal.window-width = self.width;
        initial-floating-x = (self.width - PickerStyles.picker-width - 350px).max(0);
    }
    changed height => {
        WindowGlobal.window-height = self.height;
    }

    VerticalLayout {
        if !Api.show-preview-ui: no-ui-drawing-rect := Rectangle {
            VerticalLayout {
                ComponentContainer {
                    component-factory: Api.preview-area;
                }
            }
        }
        if Api.show-preview-ui: Rectangle {
            VerticalLayout {
                header-view := HeaderView {
                    show-left-sidebar <=> root.show-left-sidebar;
                    show-right-sidebar <=> root.show-right-sidebar;

                    current-style <=> Api.current-style;
                    known-styles <=> Api.known-styles;

                    style-selected => {
                        Api.style-changed();
                    }

                    edit := Button {
                        icon: Icons.inspect;
                        colorize-icon: preview.select-mode ? false : true;
                        checkable: true;
                        checked <=> preview.select-mode;
                        primary: preview.select-mode;
                        enabled: preview.preview-is-current;
                    }
                }

                HorizontalLayout {
                    if  root.show-left-sidebar: LibraryView {
                        known-components: Api.known-components;

                        preview-area-is-current: preview.preview-is-current;
                        preview-area-position-x: preview.preview-area-position-x;
                        preview-area-position-y: preview.preview-area-position-y;
                        preview-area-width: preview.preview-area-width;
                        preview-area-height: preview.preview-area-height;

                        visible-component: root.visible-component;

                        can-drop(index, x, y, on-drop-area) => {
                            Api.can-drop(index, x, y, on-drop-area);
                        }

                        drop(index, x, y) => {
                            Api.drop(index, x, y);
                        }

                        show-preview-for(name, defined-at) => {
                            Api.show-preview-for(name, defined-at);
                        }
                    }

                    preview := PreviewView {
                        visible-component <=> root.visible-component;
                    }

                    if  root.show-right-sidebar: HorizontalLayout {
                        Rectangle {
                            width: 4px;
                            background: @linear-gradient(90deg, #0000, #0002);
                        }
                        VerticalLayout {
                            tw := TabWidget {
                                width: EditorSizeSettings.property-bar-width - (EditorSpaceSettings.default-padding*2);
                                current-index: 0;
                                Tab {
                                    title: "Properties";
                                    if tw.current-index == 0: PropertyView {
                                        opacity: preview.preview-is-current ? 1.0 : 0.3;
                                        enabled: preview.preview-is-current;
                                    }
                                }

                                preview_data_tab := Tab {
                                    title: "Data";
                                    if tw.current-index == 1: PreviewDataView {
                                        opacity: preview.preview-is-current ? 1.0 : 0.3;
                                        enabled: preview.preview-is-current;
                                    }
                                }
                            }
                        }
                    }

                }

                StatusLine { }
            }
        }
    }

    if Api.diagnostic-summary == DiagnosticSummary.Errors: OutOfDateBox {
        x: (parent.width - self.width) / 2;
        y: (parent.height / 10);
    }

    if show-floating-table-editor || show-color-stop-picker || show-floating-widget: TouchArea {
        changed pressed => {
            WindowManager.hide-floating-widget();
        }
    }

    if show-floating-table-editor: TableEditorView {
        init => {
            self.initial-x = root.initial-floating-x;
            self.initial-y = 50px;
        }
    }


    if show-floating-widget: ColorPickerView {
        init => {
            self.initial-x = root.initial-floating-x;
            self.initial-y = 50px;
        }
        close => {
            WindowManager.hide-floating-widget();
        }
    }

    if show-color-stop-picker: ColorPickerView {

        color-stop-mode: true;

        init => {
            self.initial-x = root.initial-floating-x - 240px;
            self.initial-y = 50px;
        }
        close => {
            WindowManager.hide-color-stop-picker();
        }
    }

}

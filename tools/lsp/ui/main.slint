// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

// cSpell: ignore Heade

import { Button, ComboBox, HorizontalBox, ListView, ScrollView, VerticalBox } from "std-widgets.slint";
import { HeaderBar } from "header-bar.slint";

export struct Diagnostics {
    level: string,
    message: string,
    url: string,
    line: int,
    column: int,
}

export component PreviewUi inherits Window {
    in property<[string]> known-styles <=> i-style-select.model;
    in property<[Diagnostics]> diagnostics;
    in property<string> status-text;
    in property<component-factory> preview-area <=> i-preview-area-container.component-factory;
    in-out property<string> current-style <=> i-style-select.current-value;

    callback design-mode-changed(/* enabled */ bool);
    callback style-changed();
    callback show-document(/* url */ string, /* line */ int, /* column */ int);

    title: "Slint Live-Preview";
    icon: @image-url("assets/slint-logo-small-light.png");

    VerticalLayout {
        HeaderBar {
            vertical-stretch: 0.0;

            height: self.preferred-height;

            // i-pick-button := Button {
            //     text: "Design Mode";
            //     checkable: true;
            //
            //     clicked => {
            //         root.design-mode-changed(self.checked);
            //     }
            // }

            Text {
                text: "Style:";
                vertical-alignment: center;
            }
            i-style-select := ComboBox {
                selected(value) => {
                    root.style-changed();
                }
            }

            Text {
                text: root.status-text;
                vertical-alignment: center;
            }
        }

        drawing-rect := Rectangle {
            /* background: checkerboard pattern; */
            i-preview-area-container := ComponentContainer {
                width: max(self.min-width, min(self.max-width, drawing-rect.width));
                height: max(self.min-height, min(self.max-height, drawing-rect.height));
            }

            // Diagnostics overlay:
            if (root.diagnostics.length != 0): Rectangle {
                background: #fff;

                VerticalBox {

                    Text {
                        color: #000;
                        text: "Compilation failed:";
                    }

                    ListView {
                        width: parent.width - 10px;
                        height: parent.height - 10px;

                        padding: 5px;

                        for diag in root.diagnostics: Rectangle {
                            TouchArea {
                                mouse-cursor: pointer;
                                clicked => { root.show_document(diag.url, diag.line, diag.column); }

                                Text {
                                    width: 100%;
                                    wrap: word-wrap;
                                    color: #000;
                                    text: diag.level + ": " + diag.message;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

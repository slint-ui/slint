// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

// cSpell: ignore Heade

import { Button, ComboBox, ListView, ScrollView, VerticalBox } from "std-widgets.slint";
import { Api, ComponentItem } from "api.slint";
import { ComponentList } from "component-list.slint";
import { DrawArea, DrawAreaMode } from "draw-area.slint";
import { HeaderBar } from "header-bar.slint";
import { DiagnosticsOverlay } from "diagnostics-overlay.slint";
import { PropertyEditor } from "property-editor.slint";
import { SideBar } from "side-bar.slint";

export { Api }

export component PreviewUi inherits Window {
    property <length> border: 20px;
    property <length> side-bar-width: 300px;

    title: "Slint Live-Preview";
    icon: @image-url("assets/slint-logo-small-light.png");

    VerticalLayout {
        if (!Api.show-preview-ui): no-ui-drawing-rect := Rectangle {
            VerticalLayout {
                ComponentContainer {
                    component-factory: Api.preview-area;
                }
            }

            // Diagnostics overlay:
            DiagnosticsOverlay {
                width: 100%;
                height: 100%;
                diagnostics <=> Api.diagnostics;
                show-document(url, line, column) => {
                    Api.show-document(url, line, column);
                }
            }
        }
        if (Api.show-preview-ui): Rectangle {
            VerticalLayout {
                HeaderBar {
                    vertical-stretch: 0.0;

                    height: self.preferred-height;

                    pick-button := Button {
                        text: @tr("Design Mode");
                        checkable: true;
                        checked <=> Api.design-mode;
                        clicked() => {
                            key-handler.focus();
                        }
                    }

                    Text {
                        text: @tr("Style:");
                        vertical-alignment: center;
                    }

                    style-select := ComboBox {
                        model: Api.known-styles;
                        current-value <=> Api.current-style;
                        selected(value) => {
                            Api.style-changed();
                        }
                    }

                    Rectangle {
                        width: 10px;
                    }

                    prev-button := Button {
                        text: "<";
                        enabled: Api.can-navigate-back;
                        clicked() => {
                            Api.navigate(-1);
                        }
                    }

                    next-button := Button {
                        text: ">";
                        enabled: Api.can-navigate-forward;
                        clicked() => {
                            Api.navigate(1);
                        }
                    }

                    Rectangle {
                        width: 10px;
                    }

                    Text {
                        text: Api.status-text;
                        vertical-alignment: center;
                    }
                }

                HorizontalLayout {
                    left-sidebar := SideBar {
                        default-width: root.side-bar-width;
                        show-side-bar: pick-button.checked;

                        component-list := ComponentList {
                            preview-area-position-x: draw-area.preview-area-position-x;
                            preview-area-position-y: draw-area.preview-area-position-y;
                            preview-area-width: draw-area.preview-area-width;
                            preview-area-height: draw-area.preview-area-height;
                        }
                    }

                    draw-area := DrawArea {
                        visible-component <=> component-list.visible-component;
                    }

                    right-sidebar := SideBar {
                        default-width: root.side-bar-width;
                        show-side-bar: pick-button.checked;

                        property-editor := PropertyEditor { }
                    }

                    preferred-width: draw-area.preferred-width + 2 * root.side-bar-width;
                }
            }

            key-handler := FocusScope {
                enabled: draw-area.mode == DrawAreaMode.designing;

                key-released(event) => {
                    if event.text == Key.Delete {
                        // This `if` should not be necessary, but without it
                        // we do trigger deletion of Elements while errors
                        // are on screen.
                        if draw-area.mode == DrawAreaMode.designing {
                            Api.selected-element-delete();
                        }
                        return accept;
                    }
                    reject
                }
            }
        }
    }
}

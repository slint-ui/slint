import { TextEdit, ScrollView, ComboBox, LineEdit, Palette, Button } from "std-widgets.slint";
import { Api, BrushKind, GradientStop, PropertyValue } from "../api.slint";
import { EditorSpaceSettings } from "styling.slint";

export component GradientDot inherits Rectangle {
    in-out property <float> position;
    in-out property <color> value;
    in-out property <bool> selected: false;

    in property <length> parent-width;

    in property <int> apply-update;

    x: parent-width * self.position - self.width / 2.0;
    
    callback select-gradient-stop(position: float, color: color);
    callback position-changed(position: float);
    callback remove-stop();

    width: self.selected ? 20px : 10px;
    height: self.selected ? 20px : 10px;
    border-radius: self.width;
    background: value;
    border-width: root.selected ? 2px : 1px;
    border-color: root.selected ? black : gray;

    TouchArea {
        private property <length> x-pos: self.mouse-x + root.x;

        double-clicked => {
            root.remove-stop();
        }

        clicked => {
            if !root.selected {;
                root.select-gradient-stop(root.position, root.value);
            }
        }
        moved => {
            if self.x-pos >= 0 && self.x-pos < root.parent-width {
                root.position = self.x-pos / root.parent-width;
                root.position-changed(root.position);
            }
        }
        scroll-event(event) => {
            if event.delta-y != 0 {
                root.position = Math.clamp(
                    root.position + Math.clamp((event.delta-y / 1px), -0.01, +0.01),
                    0.0, 1.0);
                root.position-changed(root.position);

                return EventResult.accept;
            }
            return EventResult.reject;
        }
    }
}

export component GradientPreviewArea inherits VerticalLayout{
    in-out property <[GradientStop]> gradient-stops;
    in property <brush> current-brush;

    out property <bool> has-focus: ta.has-hover;

    callback select-gradient-stop(position: float, color: color);
    callback update-brush();

    private property <int> current-selected-index: -1;

    private property <int> apply-update-to: -1;

    grad := Rectangle {
        height: 40px;
        background: root.current-brush;
        border-width: 1px;
        border-color: Palette.foreground;

        ta := TouchArea {
            double-clicked => {
                root.current-selected-index = Api.add-gradient-stop(root.gradient-stops, { position: self.mouse-x / self.width, color: Colors.aquamarine });
                root.update-brush();
            }
            scroll-event(event) => {
                if event.delta-y != 0 && root.current-selected-index != -1 {
                    root.gradient-stops[root.current-selected-index].position = Math.clamp(
                        root.gradient-stops[root.current-selected-index].position + Math.clamp((event.delta-y / 1px), -0.01, +0.01),
                        0.0, 1.0);
                    root.update-brush();

                    root.apply-update-to = root.current-selected-index;

                    return EventResult.accept;
                }
                return EventResult.reject;
            }
        }

        Rectangle {
            height: 1px;
            background: grey;

            for i[index] in root.gradient-stops: GradientDot {
                selected: root.current-selected-index == index;
                position: i.position;
                value: i.color;

                apply-update: root.apply-update-to;

                changed apply-update => {
                    if self.apply-update == index {
                        self.position = i.position;
                        self.value = i.color;
                        root.apply-update-to = -1;
                    }
                }

                parent-width: grad.width;
                
                select-gradient-stop(p, c) => {
                    root.current-selected-index = index; 
                    root.select-gradient-stop(p, c);
                }

                position-changed(position) => {
                    i.position = position;
                    root.current-selected-index = index;
                    root.update-brush();
                }

                remove-stop() => {
                    Api.remove-gradient-stop(root.gradient-stops, index);
                    root.update-brush();
                }
            }
        }
    }
}

export component GradientWidget inherits VerticalLayout {
    in-out property <[GradientStop]> gradient-stops;
    in-out property <float> angle;

    in property <brush> current-brush;
    in property <BrushKind> current-brush-kind;

    // TODO: Use this one!
    callback set-brush-binding(kind: BrushKind, angle: float, color: color, stops: [GradientStop]);
    // TODO: Use this one more often;-)
    callback test-brush-binding(kind: BrushKind, angle: float, color: color, stops: [GradientStop]) -> bool;

    height: self.preferred-height;
    padding: EditorSpaceSettings.default-padding;
    spacing: 8px;

    HorizontalLayout {
        alignment: stretch;
        spacing: 8px;
        vertical-stretch: 0;

        Text {
            vertical-alignment: center;
            text: "Angle:";
        }

        // TODO: root.property-value.value-float has the value in deg in the live data case...

        ComboBox {
            width: 80%;
            model: [
                "Deg",
                "rad",
            ];
        }

        VerticalLayout {
            Rectangle {
                border-radius: self.width;
                width: 20px;
                height: 20px;
                background: grey;
            }
        }
    }

    // HorizontalLayout {
    //     alignment: space-between;
    //     spacing: 4px;
    //     HorizontalLayout {
    //         spacing: 4px;
    //         LineEdit {
    //             width: 9rem;
    //             text: "#ffffffff";
    //         }
    //         Rectangle {
    //             background: #fff;
    //             width: 40px;
    //             height: 25px;
    //         }
    //     }
    //     HorizontalLayout {
    //         spacing: 4px;
    //         Text {
    //             vertical-alignment: center;
    //             text: "Position:";
    //         }
    //         LineEdit {
    //             text: "0";
    //             width: 5rem;
    //         }
    //     }
    // }
    // HorizontalLayout {
    //     spacing: EditorSpaceSettings.default-spacing;
    //     Button {text: "Reset";}
    //     Button {text: "Code";}
    // }
}

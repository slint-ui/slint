// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

import { LineEdit, Palette, CheckBox, ComboBox, Button, Slider } from "std-widgets.slint";

import { Api, ColorData, ElementInformation, PropertyInformation, PropertyValue, PropertyValueKind } from "../api.slint";
import { BodyStrongText } from "../components/body-strong-text.slint";
import { BodyText } from "../components/body-text.slint";
import { StateLayer } from "../components/state-layer.slint";
import { EditorSizeSettings, Icons, EditorAnimationSettings, EditorSpaceSettings, EditorFontSettings } from "../components/styling.slint";

component CodeButton inherits Button {
    text: @tr("Code");
}

component ResetButton inherits Button {
    text: @tr("Reset");
}

component NameLabel inherits HorizontalLayout {
    in property <string> property-name;
    in property <PropertyValue> property-value;

    horizontal-stretch: 0;

    BodyText {
        min-width: EditorSizeSettings.min-prefix-text-width;

        text: root.property-name;

        font-size: 1rem;
        font-weight: root.property-value.code != "" ? EditorFontSettings.bold-font-weight : EditorFontSettings.light-font-weight;
        font-italic: root.property-value.code == "";

        overflow: elide;
    }
}

component ResettingLineEdit {
    in property <string> default-text;
    in-out property <bool> can-compile: true;

    in property <bool> enabled;
    in property <InputType> input-type <=> le.input-type;
    in property <TextHorizontalAlignment> horizontal-alignment <=> le.horizontal-alignment;
    in property <string> placeholder-text <=> le.placeholder-text;
    out property <bool> has-focus <=> le.has-focus;
    in-out property <string> text <=> le.text;

    property <length> border: 3px;

    callback accepted <=> le.accepted;
    callback edited <=> le.edited;

    min-width <=> le.min-width;
    preferred-width <=> le.preferred-width;
    max-width <=> le.max-width;

    min-height <=> le.min-height;
    preferred-height <=> le.preferred-height;
    max-height <=> le.max-height;

    le := LineEdit {
        enabled: root.enabled;

        width: 100%;
        height: 100%;
        x: 0px;
        y: 0px;

        text: root.default-text;
        font-size: 1rem;

        // Reset on focus loss:
        changed has-focus => {
            if !self.has_focus && text != default-text {
                if root.can-compile {
                    root.accepted(self.text);
                }
            } else {
                self.text = root.default-text;
                root.can-compile = true;
            }
        }
    }

    Rectangle {
        visible: !root.can-compile;

        background: Colors.red.transparentize(0.94);
        x: root.border;
        y: root.border;
        width: root.width - 2 * root.border;
        height: root.height - 2 * root.border;

        border-radius: root.border;
    }
}

component CodeWidget inherits VerticalLayout {
    in property <bool> enabled;
    in property <string> property-name;
    in property <PropertyValue> property-value;

    callback code-action();
    callback reset-action();

    padding-bottom: EditorSpaceSettings.default-spacing;
    NameLabel {
        property-name: root.property-name;
        property-value: root.property-value;
    }

    if root.property-value.code == "": Rectangle {
        min-height: 2rem;
        width: 100%;
        background: Palette.alternate-background;
        Text {
            x: EditorSpaceSettings.default-padding;
            horizontal-alignment: left;
            vertical-alignment: center;
            text: @tr("Not Set");
            font-italic: true;
        }
    }
    if root.property-value.code != "": HorizontalLayout {
        spacing: EditorSpaceSettings.default-spacing;
        ResetButton {
            enabled: root.enabled;
            clicked() => {
                root.reset-action();
            }
        }

        CodeButton {
            enabled: root.enabled;
            clicked() => {
                root.code-action();
            }
        }
    }
}

component ChildIndicator {
    out property <bool> open: false;

    x: -1.0 * EditorSpaceSettings.group-indent * 2;

    Rectangle {
        width: 1cm;
        height: 1cm;
        Rectangle {
            indicator := Image {
                vertical-alignment: center;
                colorize: Palette.foreground;
                visible: expand.has-hover;
                source: Icons.chevron-down;
                width: 16px;
                height: 16px;
                rotation-angle: root.open ? 0deg : -90deg;
            }
        }
        expand := TouchArea {
            clicked => {
                root.open = !root.open;
            }
        }
    }
}

component SecondaryContent inherits Rectangle {
    in property <bool> enabled;
    in property <bool> open: false;

    callback reset();

    callback code-action();
    callback reset-action();

    background: Palette.background;
    clip: true;
    height: open ? content.preferred-height : 0px;

    animate height { duration: EditorAnimationSettings.rotation-duration; }

    content := HorizontalLayout {
        Rectangle {
            height: 100%;
            width: 1px;
            background: Palette.border;
        }

        VerticalLayout {
            padding: EditorSpaceSettings.default-padding;
            spacing: EditorSpaceSettings.default-padding;

            @children

            HorizontalLayout {
                spacing: EditorSpaceSettings.default-spacing;
                ResetButton {
                    enabled: root.enabled;
                    clicked() => {
                        root.reset-action();
                        root.reset();
                    }
                }

                CodeButton {
                    enabled: root.enabled;
                    clicked() => {
                        root.code-action();
                    }
                }
            }
        }
    }
}

component FloatWidget inherits VerticalLayout {
    in property <bool> enabled;
    in property <string> property-name;
    in property <PropertyValue> property-value;

    callback test-float-binding(text: string) -> bool;
    callback set-float-binding(text: string);

    private property <string> current-unit: find_current_unit(property-value);

    pure function find_current_unit(value: PropertyValue) -> string {
        if value.visual-items.length == 0 {
            return "";
        }
        return value.visual-items[self.find-current-index(value)];
    }

    pure function find_current_index(value: PropertyValue) -> int {
        return value.code == "" ? value.default-selection : value.value-int;
    }

    width: 100%;

    NameLabel {
        property-name: root.property-name;
        property-value: root.property-value;
    }

    function set-binding() {
        root.set-float-binding(number.text == "" ? "" : number.text + self.current-unit);
    }

    HorizontalLayout {
        spacing: EditorSpaceSettings.default-spacing;
        alignment: stretch;
        height: 2rem;

        number := ResettingLineEdit {
            enabled: root.enabled;
            horizontal-alignment: right;
            min-width: EditorSizeSettings.float-size;
            horizontal-stretch: 0;

            default-text: property-value.value-float;

            edited(text) => {
                self.can-compile = test-float-binding(number.text == "" ? "" : number.text + root.current-unit);
            }

            accepted(text) => {
                root.set-binding();
            }
        }

        if property-value.visual-items.length > 1: ComboBox {
            enabled: root.enabled;

            horizontal-stretch: 0;

            min-width: EditorSizeSettings.length-combo;
            model: property-value.visual-items;
            current-index: root.find_current_index(root.property-value);

            selected(unit) => {
                root.current-unit = unit;
                root.set-float-binding(number.text == "" ? "" : number.text + root.current-unit);
            }
        }
        if property-value.visual-items.length == 1: Text {
            text: property-value.visual-items[0];

            changed text => {
                root.current-unit = self.text;
            }
        }
    }
}

component StringWidget {
    // FIXME: @ogoffart says the plural support is not working at this time, so
    //        we do not offer it in the UI for the time being...

    in property <bool> enabled;
    in property <string> property-name;
    in property <PropertyValue> property-value;

    callback code-action();
    callback reset-action();

    callback test-string-binding(text: string, is-translated: bool) -> bool;
    callback set-string-binding(text: string, is-translated: bool);

    function tsb() -> bool {
        // return test-string-binding(Api.string-to-code(text-rle.text, tr-cb.checked, tr-context.text, tr-plural.text, tr-plural-expression.text), tr-cb.checked);
        return test-string-binding(Api.string-to-code(text-rle.text, tr-cb.checked, tr-context.text, "", ""), tr-cb.checked);
    }
    function ssb() {
        // set-string-binding(Api.string-to-code(text-rle.text, tr-cb.checked, tr-context.text, tr-plural.text, tr-plural-expression.text), tr-cb.checked);
        set-string-binding(Api.string-to-code(text-rle.text, tr-cb.checked, tr-context.text, "", ""), tr-cb.checked);
    }
    property <bool> open: false;

    childIndicator := ChildIndicator {
        y: content.y + EditorSpaceSettings.default-spacing / 2;
    }

    VerticalLayout {
        NameLabel {
            property-name: root.property-name;
            property-value: root.property-value;
        }

        content := HorizontalLayout {
            spacing: EditorSpaceSettings.default-spacing;
            height: 2rem;
            text_rle:= ResettingLineEdit {
                enabled: root.enabled;
                default-text: property-value.value-string;
                edited(text) => {
                    self.can-compile = root.tsb();
                }
                accepted(text) => {
                    root.ssb();
                }
            }
        }

        sub := SecondaryContent {
            enabled: root.enabled;
            open: childIndicator.open;

            code-action() => {
                root.code-action();
            }
            reset-action => {
                root.reset-action();
            }
            GridLayout {
                spacing: EditorSpaceSettings.default-spacing;
                Row {
                    tr-cb := CheckBox {
                        colspan: 2;
                        checked: root.property-value.is-translatable;
                        toggled => {
                            root.ssb();
                        }
                        enabled: root.enabled;
                        text: "Translatable";
                    }
                }
                Row {
                    Text {
                        vertical-alignment: center;
                        horizontal-alignment: right;
                        text: "Context";
                    }
                    tr-context := ResettingLineEdit {
                        enabled: root.enabled && tr-cb.checked;
                        default-text: root.property-value.tr-context;
                        edited(text) => {
                            self.can-compile = root.tsb();
                        }
                        accepted(text) => {
                            root.ssb();
                        }
                    }
                }
                // Row {
                //     Text {
                //         vertical-alignment: center;
                //         horizontal-alignment: right;
                //         text: "Plural";
                //     }
                //     tr-plural := ResettingLineEdit {
                //         enabled: root.enabled && tr-cb.checked;
                //         default-text: root.property-value.tr-plural;
                //         edited(text) => {
                //             self.can-compile = root.tsb();
                //         }
                //         accepted(text) => {
                //             root.ssb();
                //         }
                //     }
                // }
                // Row {
                //     Text {
                //         vertical-alignment: center;
                //         horizontal-alignment: right;
                //         text: "Expression";
                //     }
                //     tr-plural-expression := ResettingLineEdit {
                //         enabled: root.enabled && tr-cb.checked;
                //         default-text: root.property-value.tr-plural-expression;
                //         edited(text) => {
                //             self.can-compile = root.tsb();
                //             tr-plural.can-compile = self.can-compile;
                //         }
                //         accepted(text) => {
                //             root.ssb();
                //         }
                //     }
                // }
            }
        }
    }
}

component ColorLineEdit inherits HorizontalLayout {
    in property <bool> enabled;
    in property <string> channel: "R";
    in-out property <int> value;

    alignment: stretch;
    spacing: EditorSpaceSettings.default-spacing;

    Text {
        text: channel;
        vertical-alignment: center;
        color: Palette.foreground;
    }

    slide-value := Slider {
        enabled: root.enabled;
        minimum: 0;
        maximum: 255;
        value: root.value;

        changed value => {
            root.value = Math.floor(self.value);
        }
    }

    num-value := ResettingLineEdit {
        enabled: root.enabled;
        input-type: number;
        width: 5rem;
        default-text: root.value;

        edited() => {
            root.value = self.text.to-float();
        }
    }
}

component ColorWidget inherits Rectangle {
    in property <bool> enabled;
    in property <string> property-name;
    in property <PropertyValue> property-value;

    private property <bool> open: false;

    callback code-action();
    callback reset-action();

    callback test-color-binding(text: string) -> bool;
    callback set-color-binding(text: string);

    private property <color> current-color: property-value.value-brush;
    private property <ColorData> current-color-data: Api.color-to-data(self.current-color);

    childIndicator := ChildIndicator {
        y: content.y + EditorSpaceSettings.default-spacing / 2;
    }

    all := VerticalLayout {
        padding-bottom: EditorSpaceSettings.default-spacing;
        width: 100%;
        NameLabel {
            property-name: root.property-name;
            property-value: root.property-value;
        }

        content := HorizontalLayout {
            spacing: EditorSpaceSettings.default-spacing;
            alignment: stretch;

            ResettingLineEdit {
                enabled: root.enabled;
                default-text: root.current-color-data.text;

                edited(text) => {
                    if text == "" {
                    // allow empty text -- which will delete the property
                    self.can-compile = true;
                        color-preview.background = Colors.transparent;
                    } else {
                        self.can-compile = root.test-color-binding(text);
                        if self.can-compile {
                            color-preview.background = Api.string-to-color(text);
                        }
                    }
                }

                accepted(text) => {
                    root.set-color-binding(text);
                }
            }

            color-preview := Rectangle {
                height: 2rem;
                background: root.current-color;
                border-width: 1px;
                border-color: Palette.foreground;
            }
        }

        sub := SecondaryContent {
            out property <color> slider-color: Api.rgba-to-color(r.value, g.value, b.value, a.value);

            enabled: root.enabled;

            changed slider-color => {
                root.current-color = slider-color;
            }

            open: childIndicator.open;

            r := ColorLineEdit {
                enabled: root.enabled;
                value: root.current-color-data.r;
                channel: "R";
            }

            g := ColorLineEdit {
                enabled: root.enabled;
                value: root.current-color-data.g;
                channel: "G";
            }

            b := ColorLineEdit {
                enabled: root.enabled;
                value: root.current-color-data.b;
                channel: "B";
            }

            a := ColorLineEdit {
                enabled: root.enabled;
                value: root.current-color-data.a;
                channel: "A";
            }

            reset => {
                root.current-color = root.property-value.value-brush;
            }

            code-action() => {
                root.code-action();
            }
            reset-action() => {
                root.reset-action();
            }
        }
    }
}

component IntegerWidget inherits VerticalLayout {
    in property <bool> enabled;
    in property <string> property-name;
    in property <PropertyValue> property-value;

    callback test-integer-binding(text: string) -> bool;
    callback set-integer-binding(text: string);

    NameLabel {
        property-name: root.property-name;
        property-value: root.property-value;
    }

    HorizontalLayout {
        height: 2rem;
        spacing: EditorSpaceSettings.default-spacing;
        ResettingLineEdit {
            enabled: root.enabled;
            horizontal-alignment: right;
            input-type: number;

            default-text: property-value.value-int;

            edited(text) => {
                self.can-compile = test-integer-binding(text);
            }
            accepted(text) => {
                set-integer-binding(text);
            }
        }
    }
}

component EnumWidget inherits VerticalLayout {
    in property <bool> enabled;
    in property <string> property-name;
    in property <PropertyValue> property-value;

    callback set-enum-binding(text: string);

    NameLabel {
        property-name: root.property-name;
        property-value: root.property-value;
    }

    HorizontalLayout {
        ComboBox {
            enabled: root.enabled;
            current-index: property-value.value-int;

            model: property-value.visual-items;

            selected(value) => {
                root.set-enum-binding(property-value.value-string + "." + value);
            }
        }
    }
}

component BooleanWidget inherits VerticalLayout {
    in property <bool> enabled;
    in property <string> property-name;
    in property <PropertyValue> property-value;

    callback set-bool-binding(text: string);

    NameLabel {
        property-name: root.property-name;
        property-value: root.property-value;
    }

    HorizontalLayout {
        alignment: start;
        height: 2rem;
        Rectangle {
            width: 100%;
            height: 100%;
            background: Palette.alternate-background;
            HorizontalLayout {
                alignment: start;
                padding-left: EditorSpaceSettings.default-padding;
                spacing: EditorSpaceSettings.default-spacing;
                checkbox := CheckBox {
                    enabled: root.enabled;
                    checked: property-value.value_bool;
                    text: self.checked ? "True" : "False";

                    toggled() => {
                        root.set-bool-binding(self.checked ? "true" : "false");
                    }
                }
            }
        }
    }
}

export component PropertyValueWidget inherits VerticalLayout {
    in property <PropertyInformation> property-information;
    in property <ElementInformation> element-information;
    in property <bool> enabled;

    function set-string-binding(text: string, is-translated: bool) {
        set-code-binding(text);

    }
    function test-string-binding(text: string, is-translated: bool) -> bool {
        return (test-code-binding(text));

    }

    function set-code-binding(text: string) {
        Api.set-code-binding(
            element-information.source-uri,
            element-information.source-version,
            element-information.range.start,
            property-information.name,
            text,
        );
    }

    function test-code-binding(text: string) -> bool {
        return (Api.test-code-binding(
            root.element-information.source-uri,
            root.element-information.source-version,
            root.element-information.range.start,
            root.property-information.name,
            text,
        ));
    }

    function reset-action() {
        set-code-binding("");
    }

    function code-action() {
        Api.show-document-offset-range(
            element-information.source-uri,
            Api.property-declaration-ranges(property-information.name).defined-at.expression-range.start,
            Api.property-declaration-ranges(property-information.name).defined-at.expression-range.start,
            true,
        );
    }

    if root.property-information.value.kind == PropertyValueKind.boolean: BooleanWidget {
        enabled <=> root.enabled;
        property-name: root.property-information.name;
        property-value: root.property-information.value;

        set-bool-binding(text) => {
            root.set-code-binding(text);
        }
    }
    if (root.property-information.value.kind == PropertyValueKind.color) || (root.property-information.value.kind == PropertyValueKind.brush): ColorWidget {
        enabled <=> root.enabled;
        property-name: root.property-information.name;
        property-value: root.property-information.value;

        test-color-binding(text) => {
            return (Api.string-is-color(text));
        }
        set-color-binding(text) => {
            root.set-code-binding(text);
        }
    }

    if root.property-information.value.kind == PropertyValueKind.code: CodeWidget {
        enabled <=> root.enabled;
        property-name: root.property-information.name;
        property-value: root.property-information.value;

        reset-action() => {
            root.reset-action();
        }
        code-action() => {
            root.code-action();
        }
    }
    if root.property-information.value.kind == PropertyValueKind.enum:  EnumWidget {
        enabled <=> root.enabled;
        property-name: root.property-information.name;
        property-value: root.property-information.value;

        set-enum-binding(text) => {
            root.set-code-binding(text);
        }
    }
    if root.property-information.value.kind == PropertyValueKind.float: FloatWidget {
        enabled <=> root.enabled;
        property-name: root.property-information.name;
        property-value: root.property-information.value;

        test-float-binding(text) => {
            return (root.test-code-binding(text));
        }
        set-float-binding(text) => {
            root.set-code-binding(text);
        }
    }
    if root.property-information.value.kind == PropertyValueKind.integer: IntegerWidget {
        enabled <=> root.enabled;
        property-name: root.property-information.name;
        property-value: root.property-information.value;

        test-integer-binding(text) => {
            return (root.test-code-binding(text));
        }
        set-integer-binding(text) => {
            root.set-code-binding(text);
        }
    }
    if root.property-information.value.kind == PropertyValueKind.string: StringWidget {
        enabled <=> root.enabled;
        property-name: root.property-information.name;
        property-value: root.property-information.value;

        reset-action() => {
            root.reset-action();
        }
        code-action() => {
            root.code-action();
        }

        test-string-binding(text, is-translated) => {
            return (root.test-string-binding(text, is-translated));
        }

        set-string-binding(text, is-translated) => {
            root.set-string-binding(text, is-translated);
        }
    }
}

export component ExpandableGroup {
    in property <bool> enabled;
    in property <string> text;
    in property <length> panel-width;

    property <bool> open: true;

    group-layer := Rectangle {

        content-layer := VerticalLayout {

            if text != "": Rectangle {
                touch-area := TouchArea {
                    clicked => {
                        root.open = !root.open;
                    }
                }

                state-layer := StateLayer {
                    width: panel-width;
                    height: group-layer.height;
                    y: group-layer.y;
                    has-hover: touch-area.has-hover;
                    pressed: touch-area.pressed;
                }

                HorizontalLayout {
                    padding-left: -EditorSpaceSettings.group-indent;
                    spacing: EditorSpaceSettings.default-spacing / 2;
                    icon-image := Image {
                        width: EditorSizeSettings.default-icon-width;
                        colorize: Palette.alternate-foreground.transparentize(0.7);
                        source: Icons.chevron-down;
                        height: 2rem;
                        rotation-origin-x: self.width / 2;
                        rotation-origin-y: self.height / 2;
                        states [
                            closed when !root.open: {
                                rotation-angle: -0.25turn;
                            }
                        ]

                        animate rotation-angle { duration: EditorAnimationSettings.rotation-duration; }
                    }

                    BodyStrongText {
                        text: root.text;
                    }
                }
            }

            Rectangle {
                height: root.open ? self.preferred-height : 0px;

                @children
            }
        }
    }
}

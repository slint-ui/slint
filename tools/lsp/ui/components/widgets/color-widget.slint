// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

import { NameLabel } from "./basics.slint";
import { ColorMainContent, RgbaColorSliders } from "./color-basics.slint";

import { ColorData, PropertyValue, PropertyValueKind } from "../../api.slint";
import { WidgetMode } from "../../properties-state.slint";
import { EditorSpaceSettings } from "../../components/styling.slint";
import { ComboBox } from "std-widgets.slint";
import { WindowGlobal, WindowManager } from "../../windowglobal.slint";

export component ColorWidget inherits VerticalLayout {
    in property <bool> enabled;
    in property <string> property-name;
    in property <PropertyValue> property-value;

    private property <color> current-color: Colors.transparent;

    callback code-action();
    callback reset-action();

    callback test-color-binding(text: string) -> bool;
    callback set-color-binding(text: string);
    callback update-floating-editor();

    padding-left: 16px;
    spacing: EditorSpaceSettings.default-spacing;

    callback update-display-string(value: string);

    width: 100%;

    function apply-value() {
        root.current-color = self.property-value.value-brush;
    }

    private property <bool> has-focus: main.has-focus;

    init => {
        apply-value();
    }

    changed has-focus => {
        if !self.has-focus {
            apply-value();
        }
    }

    changed property-value => {
        if self.property-value.kind != PropertyValueKind.color && self.property-value.kind != PropertyValueKind.brush {
            return;
        }

        if !self.has-focus {
            apply-value();
        }

        // Floating editors need to know the current property details. Call the update if something changes.
        if WindowManager.showing-color-picker && WindowManager.current-property-information.name == root.property-name {
            root.update-floating-editor();
        }
    }


    NameLabel {

        property-name: root.property-name;
        property-value: root.property-value;
    }

    main := ColorMainContent {
        current-color <=> root.current-color;
        enabled <=> root.enabled;

        set-color-binding(text) => {
            root.set-color-binding(text);
        }

        test-color-binding(text) => {
            return root.test-color-binding(text);
        }

        color-preview-clicked() => {
            root.update-floating-editor();
        }
    }
}


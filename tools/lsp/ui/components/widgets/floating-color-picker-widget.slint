// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

import { Palette, Button } from "std-widgets.slint";
import { WindowGlobal, WindowManager } from "../../windowglobal.slint";
import { Api, PickerData, PickerMode, BrushMode, WidgetMode } from "../../api.slint";


export global Styles {
    out property <color> section-color: Palette.color-scheme == ColorScheme.dark ? #383838 : #f5f5f5;
    out property <color> text-color: Palette.color-scheme == ColorScheme.dark ? white : #383838;
    out property <color> divider-color: Palette.color-scheme == ColorScheme.dark ? #444444 : #e6e6e6;
    out property <color> background-color: Palette.color-scheme == ColorScheme.dark ? #2c2c2c : white;
    out property <brush> picker-border-color: Palette.color-scheme == ColorScheme.dark ? #ffffff17 : transparent;
    out property <length> standard-margin: 16px;
    out property <length> small-margin: 12px;
    out property <length> property-border-radius: 5px;
    out property <length> picker-width: 240px;
}

component FakeShadowText {
    in property <string> text;
    in property <string> font-family: "Inter";
    in property <length> font-size: 11px;
    in property <float> font-weight: 800;
    in property <color> color: white;

    width: t.width;
    height: t.height;

    fake-shadow := Text {
        x: 1px;
        y: 1px;
        vertical-alignment: center;
        font-family: root.font-family;
        font-size: root.font-size;
        color: black;
        text: t.text;
        font-weight: root.font-weight;
    }

    t := Text {
        x: 0;
        y: 0;
        vertical-alignment: center;
        font-family: root.font-family;
        font-size: root.font-size;
        color: root.color;
        text: root.text;
        font-weight: root.font-weight;
    }

    @children
}

component BrushTypeSelector {
    width: 100%;
    height: 100%;

    property <BrushMode> brush-mode: color;

    HorizontalLayout {
        padding-left: Styles.small-margin;
        alignment: start;

        Rectangle {
            y: (parent.height - self.height) / 2;
            width: 25px;
            height: self.width;

            property <bool> is-active: brush-mode == BrushMode.color;

            Rectangle {
                visible: is-active;
                background: Styles.section-color;
                border-radius: Styles.property-border-radius;
            }

            TouchArea {
                clicked => {
                    brush-mode = BrushMode.color;
                }
            }

            Rectangle {
                width: 15px;
                height: self.width;
                opacity: is-active ? 1 : 0.5;

                Rectangle {
                    border-radius: 2px;
                    border-width: 1px;
                    border-color: white;
                    Rectangle {
                        width: parent.width - 4px;
                        height: parent.height - 4px;
                        border-width: 1px;
                        border-color: white;
                        background: lightgrey;
                    }
                }
            }
        }

        Rectangle {
            y: (parent.height - self.height) / 2;
            width: 25px;
            height: self.width;

            property <bool> is-active: brush-mode == BrushMode.gradient;

            Rectangle {
                visible: is-active;
                background: Styles.section-color;
                border-radius: Styles.property-border-radius;
            }

            TouchArea {
                clicked => {
                    brush-mode = BrushMode.gradient;
                }
            }

            Rectangle {
                width: 15px;
                height: self.width;
                opacity: is-active ? 1 : 0.5;

                Rectangle {
                    border-radius: 2px;
                    border-width: 1px;
                    border-color: white;
                    Rectangle {
                        width: parent.width - 4px;
                        height: parent.height - 4px;
                        background: @linear-gradient(90deg, white 0%, transparent 100%);
                    }
                }
            }
        }

        Rectangle {
            y: (parent.height - self.height) / 2;
            width: 25px;
            height: self.width;

            property <bool> is-active: brush-mode == BrushMode.svg-color;

            Rectangle {
                visible: is-active;
                background: Styles.section-color;
                border-radius: Styles.property-border-radius;
            }

            TouchArea {
                clicked => {
                    brush-mode = BrushMode.svg-color;
                }
            }

            Rectangle {
                width: 15px;
                height: self.width;
                opacity: is-active ? 1 : 0.5;

                Rectangle {
                    border-radius: 3px;
                    border-width: 1px;
                    border-color: white;
                    Text {
                        font-family: "Inter";
                        font-size: 6px;
                        color: white;
                        text: "svg";
                        font-weight: 100;
                    }
                }
            }
        }
    }
}

component ColorModeColorAndApply {
    in property <color> current-color;
    in property <WidgetMode> widget-mode;

    width: 100%;
    vl := VerticalLayout {
        alignment: center;
        spacing: 10px;
        Rectangle {
            x: Styles.standard-margin;
            width: 170px;
            height: 25px;
            background: Styles.section-color;
            border-radius: Styles.property-border-radius;
            border-width: 1px;

            Rectangle {
                x: 5px;
                width: 15px;
                height: self.width;
                border-radius: 2px;
                background: root.current-color;
            }

            FakeShadowText {
                x: 25px;
                y: (parent.height - self.height) / 2;

                font-family: "Inter";
                font-size: 11px;
                color: #9d9d9d;
                text: "#";
            }

            Text {
                x: 35px;
                font-family: "Inter";
                font-size: 12px;
                color: Styles.text-color;
                text: Api.color-to-data(root.current-color).short-text.to-uppercase();
                letter-spacing: 0.8px;
            }

            divider := Rectangle {
                x: parent.width - 45px;
                width: 1px;
                height: parent.height;
                background: Styles.background-color;
            }

            Rectangle {
                x: parent.width - self.width;
                width: 50px;
                height: parent.height;

                TextInput {
                    x: 10px;
                    height: 15px;
                    vertical-alignment: center;
                    horizontal-alignment: left;
                    font-family: "Inter";
                    font-size: 12px;
                    color: Styles.text-color;
                    text: PickerData.alpha;
                    text-cursor-width: 2px;
                    selection-background-color: #3984ec;
                    input-type: number;
                    single-line: true;
                    wrap: no-wrap;
                    changed has-focus => {
                        if self.has-focus {
                            self.select-all();
                        }
                    }
                    accepted => {
                        self.text = clamp(self.text.to-float(), 0, 100);
                        PickerData.alpha = self.text.to-float();
                    }
                    edited => {
                        if self.text.character-count > 3 {
                            self.text = clamp(self.text.to-float(), 0, 100);
                        }
                    }
                    enabled: false;
                }

                FakeShadowText {
                    x: parent.width - self.width - 5px;
                    y: (parent.height - self.height) / 2;

                    font-family: "Inter";
                    font-size: 11px;
                    color: #9d9d9d;
                    text: "%";
                }

                Rectangle {
                    x: parent.width - self.width;
                    width: 20px;
                    TouchArea {
                        mouse-cursor: col-resize;
                        property <float> initial-alpha: 0;
                        changed pressed => {
                            if self.pressed {
                                initial-alpha = PickerData.alpha;
                            }
                        }
                        moved => {
                            PickerData.alpha = (initial-alpha + ((self.mouse-x - self.pressed-x) / 1px)).clamp(0, 100).round();
                        }
                    }
                }
            }
        }

        if widget-mode == WidgetMode.edit: Button {
            x: Styles.standard-margin;
            width: 100px;
            text: "Apply";
            clicked => {
                WindowManager.apply-current-value(Api.color-to-data(root.current-color).text);
            }
        }
    }
}

component Column {
    width: 100%;
    VerticalLayout {
        @children
    }
}

component VerticalSpacer {
    width: 100%;
    height: Styles.small-margin;
}

component ColorPicker {
    in-out property <color> current-color: hsv(PickerData.hue, PickerData.saturation, PickerData.value, PickerData.alpha / 100);

    in property <WidgetMode> widget-mode: edit;
    in property <PickerMode> picker-mode: color;

    property <length> picker-target-x;
    property <length> picker-target-y;

    callback close <=> t-close.clicked;

    changed current-color => {
        if widget-mode == WidgetMode.preview {
            WindowManager.update-preview-value(Api.color-to-data(root.current-color).text);
        }
    }

    width: Styles.picker-width;
    height: content.height;

    hidden-input := TextInput {
        visible: false;
    }

    TouchArea {
        changed pressed => {
            if self.pressed {
                hidden-input.visible = true;
                hidden-input.focus();
                hidden-input.clear-focus();
                hidden-input.visible = false;
            }
        }
        moved => {
            picker-target-x = ((root.x + self.mouse-x - self.pressed-x) / 1px).round() * 1px;
            picker-target-y = ((root.y + self.mouse-y - self.pressed-y) / 1px).round() * 1px;

            if picker-target-x < 0px {
                root.x = 0px;
            }
            if picker-target-x > 0px {
                if picker-target-x < WindowGlobal.window-width - root.width {
                    root.x = picker-target-x;
                } else {
                    root.x = WindowGlobal.window-width - root.width;
                }
            }
            if picker-target-y < 0px {
                root.y = 0px;
            }
            if picker-target-y > 0px {
                if picker-target-y < WindowGlobal.window-height - root.height {
                    root.y = picker-target-y;
                } else {
                    root.y = WindowGlobal.window-height - root.height;
                }
            }
        }
    }

    Rectangle {
        background: Styles.background-color;
        drop-shadow-blur: 24px;
        drop-shadow-offset-y: 10px;
        drop-shadow-color: rgba(0, 0, 0, 0.25);
        border-width: 0.5px;
        border-color: Styles.picker-border-color;
        border-radius: 13px;
    }

    content := Column {
        title := Rectangle {
            width: 100%;
            height: 40px;

            if picker-mode == PickerMode.brush: BrushTypeSelector { }

            Rectangle {
                x: parent.width - self.width - 5px;
                width: 25px;
                height: self.width;
                background: t-close.has-hover ? Styles.section-color : transparent;
                border-radius: Styles.property-border-radius;

                t-close := TouchArea { }

                Image {
                    source: @image-url("../../assets/close.svg");
                    colorize: Styles.text-color;
                }
            }

            Rectangle {
                width: 100%;
                height: 1px;
                x: 0;
                y: parent.height - self.height;
                background: Styles.divider-color;
            }
        }

        saturation-value-holder := Rectangle {
            height: self.width * 0.75;
            saturation-value := Rectangle {
                width: parent.width - (Styles.standard-margin * 2);
                height: parent.height - (Styles.standard-margin * 2);

                Rectangle {
                    border-radius: 6px;
                    clip: true;
                    hue := Rectangle {
                        background: hsv(PickerData.hue, 1, 1);
                    }

                    sat := Rectangle {
                        background: @linear-gradient(90deg, white 0%, transparent 100%);
                    }

                    val := Rectangle {
                        background: @linear-gradient(0deg, black 0%, transparent 100%);
                    }

                    Rectangle {
                        border-radius: parent.border-radius;
                        border-width: 1px;
                        border-color: Styles.text-color.with-alpha(10%);
                    }

                    TouchArea {
                        moved => {
                            if self.has-hover {
                                PickerData.saturation = clamp(self.mouse-x / self.width, 0, 1);
                                PickerData.value = clamp(1 - (self.mouse-y / self.height), 0, 1);
                            }
                        }
                        changed pressed => {
                            if self.pressed {
                                PickerData.saturation = self.mouse-x / self.width;
                                PickerData.value = 1 - (self.mouse-y / self.height);
                            }
                        }
                    }
                }

                sv-picker := Rectangle {
                    x: 1px + (saturation-value.width - 3px) * PickerData.saturation;
                    y: 1px + (saturation-value.height - 3px) * (1 - PickerData.value);
                    width: 1px;
                    height: 1px;
                    Rectangle {
                        width: 12px;
                        height: 12px;
                        border-radius: self.width / 2;
                        background: white;
                        drop-shadow-blur: 5px;
                        drop-shadow-offset-y: 2px;
                        drop-shadow-color: #000000b4;
                    }

                    Rectangle {
                        width: 8px;
                        height: 8px;
                        border-radius: self.width / 2;
                        background: hsv(PickerData.hue, PickerData.saturation, PickerData.value);
                    }
                }
            }
        }

        hsva-controls := Rectangle {
            width: 100%;
            height: 56px;
        // The following properties are used to size the hue picker and control the
        // thumb to now go past the visual bounds. But the TouchArea is intentionally larger
        // to be usable.
        property <length> main-width: root.width - (Styles.standard-margin * 2) - main-height;
            property <length> main-height: 16px;
            property <length> rounded-end-width: main-height / 2;
            VerticalLayout {
                spacing: 12px;
                Rectangle {
                    width: 100%;
                    height: 16px;
                    hue-picker := Rectangle {
                        x: Styles.standard-margin;
                        width: root.width - (Styles.standard-margin * 2);
                        height: main-height;
                        TouchArea {
                            moved => {
                                if self.has-hover {
                                    if self.mouse-x < main-height {
                                        PickerData.hue = 0;
                                    } else {
                                        PickerData.hue = 359 * clamp((self.mouse-x - rounded-end-width) / (self.width - main-height), 0, 1);
                                    }
                                }
                            }
                            changed pressed => {
                                if self.mouse-x < main-height {
                                    PickerData.hue = 0;
                                } else {
                                    PickerData.hue = 359 * clamp((self.mouse-x - rounded-end-width) / (self.width - main-height), 0, 1);
                                }
                            }
                        }

                        Rectangle {
                            border-radius: self.height / 2;
                            clip: true;
                            HorizontalLayout {
                                Rectangle {
                                    width: self.height / 2;
                                    height: hue-picker.height;
                                    background: #ff0000;
                                }

                                Rectangle {
                                    width: main-width;
                                    height: hue-picker.height;
                                    background: @linear-gradient(90deg, #ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000);
                                }

                                Rectangle {
                                    width: self.height / 2;
                                    height: hue-picker.height;
                                    background: #ff0000;
                                }
                            }

                            Rectangle {
                                border-radius: parent.border-radius;
                                border-width: 1px;
                                border-color: Styles.text-color;
                                opacity: 10%;
                            }
                        }

                        Rectangle {
                            x: rounded-end-width + (main-width * (PickerData.hue / 360));
                            width: 0;
                            height: 0;
                            Rectangle {
                                width: 16px;
                                height: 16px;
                                border-radius: self.width / 2;
                                background: white;
                                drop-shadow-blur: 5px;
                                drop-shadow-offset-y: 1px;
                                drop-shadow-color: #000000;
                            }

                            Rectangle {
                                width: 8px;
                                height: 8px;
                                border-radius: self.width / 2;
                                background: hsv(PickerData.hue, 1, 1);
                            }
                        }
                    }
                }

                Rectangle {
                    width: 100%;
                    height: 16px;
                    Rectangle {
                        x: Styles.standard-margin;
                        width: main-width + main-height;
                        height: main-height;
                        Rectangle {
                            border-radius: self.height / 2;
                            clip: true;

                            HorizontalLayout {
                                Rectangle {
                                    width: self.height / 2;
                                    height: hue-picker.height;
                                    background: white;
                                }

                                Rectangle {
                                    width: main-width;
                                    height: hue-picker.height;
                                    background: white;
                                }

                                Rectangle {
                                    width: self.height / 2;
                                    height: hue-picker.height;
                                }
                            }

                            Image {
                                x: 0;
                                width: main-width + (self.height / 2);
                                height: 100%;
                                vertical-alignment: top;
                                horizontal-alignment: left;
                                source: @image-url("../../assets/background-mini.svg");
                                vertical-tiling: repeat;
                                horizontal-tiling: repeat;
                                colorize: #e1e1e1;
                            }

                            HorizontalLayout {
                                Rectangle {
                                    width: self.height / 2;
                                    height: hue-picker.height;
                                }

                                Rectangle {
                                    width: main-width;
                                    height: hue-picker.height;
                                    background: @linear-gradient(-90deg, hsv(PickerData.hue, PickerData.saturation, PickerData.value, 1), transparent);
                                }

                                Rectangle {
                                    width: self.height / 2;
                                    height: hue-picker.height;
                                    background: hsv(PickerData.hue, PickerData.saturation, PickerData.value, 1);
                                }
                            }

                            Rectangle {
                                border-radius: parent.border-radius;
                                border-width: 1px;
                                border-color: Styles.text-color;
                                opacity: 10%;
                            }
                        }

                        Rectangle {
                            x: rounded-end-width + (main-width * (PickerData.alpha / 100));
                            width: 0;
                            height: 0;
                            Rectangle {
                                width: 16px;
                                height: 16px;
                                border-radius: self.width / 2;
                                background: white;
                                drop-shadow-blur: 5px;
                                drop-shadow-offset-y: 1px;
                                drop-shadow-color: #000000;
                            }

                            Rectangle {
                                width: 8px;
                                height: 8px;
                                border-radius: self.width / 2;
                                background: root.current-color;
                            }
                        }

                        TouchArea {
                            moved => {
                                if self.has-hover {
                                    if self.mouse-x < rounded-end-width {
                                        PickerData.alpha = 0;
                                    } else {
                                        PickerData.alpha = (100 * clamp((self.mouse-x - rounded-end-width) / (self.width - main-height), 0, 1)).round();
                                    }
                                }
                            }
                            changed pressed => {
                                if self.mouse-x < rounded-end-width {
                                    PickerData.alpha = 0;
                                } else {
                                    PickerData.alpha = (100 * clamp((self.mouse-x - rounded-end-width) / (self.width - main-height), 0, 1)).round();
                                }
                            }
                        }
                    }
                }
            }

            Rectangle {
                width: 100%;
                height: 1px;
                x: 0;
                y: parent.height - self.height;
                background: Styles.divider-color;
            }
        }

        VerticalSpacer { }

        color-apply := ColorModeColorAndApply {
            current-color: root.current-color;
            widget-mode: root.widget-mode;
        }

        footer := Rectangle {
            width: 100%;
            height: Styles.standard-margin;
        }
    }
}

export component ColorPickerView {
    width: 100%;
    height: 100%;

    in property <length> initial-x: 0;
    in property <length> initial-y: 0;

    changed width => {
        if color-picker.x + color-picker.width > root.width {
            color-picker.x = (root.width - color-picker.width).max(0);
        }
    }

    changed height => {
        if (color-picker.y + color-picker.height) > root.height {
            color-picker.y = (root.height - color-picker.height).max(0);
        }
    }

    pure function cursor-on-picker(mouse-x: length, mouse-y: length) -> bool {
        if mouse-x < color-picker.x {
            return false;
        }
        if mouse-y < color-picker.y {
            return false;
        }
        if mouse-x > color-picker.x + color-picker.width {
            return false;
        }
        if mouse-y > color-picker.y + color-picker.height {
            return false;
        }
        return true;
    }

    TouchArea {
        changed pressed => {
            WindowManager.hide-floating-widget();
        }
    }

    color-picker := ColorPicker {
        x: root.initial-x;
        y: root.initial-y;
        widget-mode: WindowManager.widget-mode;
        picker-mode: WindowManager.picker-mode;

        close => {
            WindowManager.hide-floating-widget();
        }
    }
}

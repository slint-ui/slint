// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

import { Palette, Button } from "std-widgets.slint";
import { WindowGlobal, WindowManager, WidgetMode } from "../../windowglobal.slint";
import { Api } from "../../api.slint";


export global Styles {
    out property <color> section-color: Palette.color-scheme == ColorScheme.dark ? #383838 : #f5f5f5;
    out property <color> text-color: Palette.color-scheme == ColorScheme.dark ? white : #383838;
    out property <color> divider-color: Palette.color-scheme == ColorScheme.dark ? #444444 : #e6e6e6;
    out property <color> background-color: Palette.color-scheme == ColorScheme.dark ? #2c2c2c : white;
    out property <brush> picker-border-color: Palette.color-scheme == ColorScheme.dark ? #ffffff17 : transparent;
    out property <length> left-margin: 16px;
    out property <length> right-margin: 12px;
    out property <length> standard-margin: 16px;
    out property <length> property-border-radius: 5px;
    out property <length> picker-width: 240px;
}

component ColorPicker {
    in-out property <float> hue: WindowManager.current-hsv-color.hue;
    in-out property <float> saturation: WindowManager.current-hsv-color.saturation;
    in-out property <float> value: WindowManager.current-hsv-color.value;
    // alpha is an int, instead of float to help snap values to whole percentage numbers
    in-out property <int> alpha: WindowManager.current-hsv-color.alpha * 100;
    in-out property <color> current-color: hsv(root.hue, root.saturation, root.value, root.alpha / 100);

    in property <WidgetMode> widget-mode: edit;

    callback close <=> t-close.clicked;

    changed current-color => {
        if widget-mode == WidgetMode.preview {
            WindowManager.update-preview-value(Api.color-to-data(root.current-color).text);
        }
    }

    width: Styles.picker-width;
    height: widget-mode == WidgetMode.edit ? 370px : 355px;

    Rectangle {
        background: Styles.background-color;
        drop-shadow-blur: 24px;
        drop-shadow-offset-y: 10px;
        drop-shadow-color: rgba(0, 0, 0, 0.25);
        border-width: 0.5px;
        border-color: Styles.picker-border-color;
        border-radius: 13px;
    }

    title := Rectangle {
        y: 0;
        width: 100%;
        height: 40px;

        Rectangle {
            x: parent.width - self.width - Styles.right-margin;
            width: 14px;
            height: self.width;
            background: t-close.has-hover ? Styles.section-color : transparent;
            border-radius: Styles.property-border-radius;

            t-close := TouchArea { }

            Image {
                source: @image-url("../../assets/close.svg");
                colorize: Styles.text-color;
            }
        }

        Rectangle {
            width: 100%;
            height: 1px;
            x: 0;
            y: parent.height - self.height;
            background: Styles.divider-color;
        }
    }

    saturation-value-holder := Rectangle {
        y: title.y + title.height;
        height: self.width * 0.75;
        saturation-value := Rectangle {
            width: parent.width - (Styles.standard-margin * 2);
            height: parent.height - (Styles.standard-margin * 2);

            Rectangle {
                border-radius: 6px;
                
                clip: true;
                hue := Rectangle {
                    background: hsv(root.hue, 1, 1);
                }

                sat := Rectangle {
                    background: @linear-gradient(90deg, white 0%, transparent 100%);
                }

                val := Rectangle {
                    background: @linear-gradient(0deg, black 0%, transparent 100%);
                }
                Rectangle {
                    border-radius: parent.border-radius;
                    border-width: 1px;
                    border-color: Styles.text-color.with-alpha(10%);
                }

                TouchArea {
                    moved => {
                        if self.has-hover {
                            root.saturation = clamp(self.mouse-x / self.width, 0, 1);
                            root.value = clamp(1 - (self.mouse-y / self.height), 0, 1);
                        }
                    }
                    changed pressed => {
                        if self.pressed {
                            root.saturation = self.mouse-x / self.width;
                            root.value = 1 - (self.mouse-y / self.height);
                        }
                    }
                }
            }

            sv-picker := Rectangle {
                x: 1px + (saturation-value.width - 3px) * root.saturation;
                y: 1px + (saturation-value.height - 3px) * (1 - root.value);
                width: 1px;
                height: 1px;
                Rectangle {
                    width: 12px;
                    height: 12px;
                    border-radius: self.width / 2;
                    background: white;
                    drop-shadow-blur: 5px;
                    drop-shadow-offset-y: 2px;
                    drop-shadow-color: #000000b4;
                }

                Rectangle {
                    width: 8px;
                    height: 8px;
                    border-radius: self.width / 2;
                    background: hsv(root.hue, root.saturation, root.value);
                }
            }
        }
    }

    hsva-controls := Rectangle {
        y: saturation-value-holder.y + saturation-value-holder.height - 6px;
        width: 100%;
        height: 56px;
        // The following properties are used to size the hue picker and control the
        // thumb to now go past the visual bounds. But the TouchArea is intentionally larger
        // to be usable.
        property <length> main-width: root.width - (Styles.standard-margin * 2) - main-height;
        property <length> main-height: 16px;
        property <length> rounded-end-width: main-height / 2;
        VerticalLayout {
            spacing: 12px;
            Rectangle {
                width: 100%;
                height: 16px;
                hue-picker := Rectangle {
                    x: Styles.left-margin;
                    width: root.width - (Styles.standard-margin * 2);
                    height: main-height;
                    TouchArea {
                        moved => {
                            if self.has-hover {
                                if self.mouse-x < main-height {
                                    root.hue = 0;
                                } else {
                                    root.hue = 359 * clamp((self.mouse-x - rounded-end-width) / (self.width - main-height), 0, 1);
                                }
                            }
                        }
                        changed pressed => {
                            if self.mouse-x < main-height {
                                root.hue = 0;
                            } else {
                                root.hue = 359 * clamp((self.mouse-x - rounded-end-width) / (self.width - main-height), 0, 1);
                            }
                        }
                    }

                    Rectangle {
                        border-radius: self.height / 2;
                        clip: true;
                        HorizontalLayout {
                            Rectangle {
                                width: self.height / 2;
                                height: hue-picker.height;
                                background: #ff0000;
                            }

                            Rectangle {
                                width: main-width;
                                height: hue-picker.height;
                                background: @linear-gradient(90deg, #ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000);
                            }

                            Rectangle {
                                width: self.height / 2;
                                height: hue-picker.height;
                                background: #ff0000;
                            }
                        }

                        Rectangle {
                            border-radius: parent.border-radius;
                            border-width: 1px;
                            border-color: Styles.text-color;
                            opacity: 10%;
                        }
                    }

                    Rectangle {
                        x: rounded-end-width + (main-width * (root.hue / 360));
                        width: 0;
                        height: 0;
                        Rectangle {
                            width: 16px;
                            height: 16px;
                            border-radius: self.width / 2;
                            background: white;
                            drop-shadow-blur: 5px;
                            drop-shadow-offset-y: 1px;
                            drop-shadow-color: #000000;
                        }

                        Rectangle {
                            width: 8px;
                            height: 8px;
                            border-radius: self.width / 2;
                            background: hsv(root.hue, 1, 1);
                        }
                    }
                }
            }

            Rectangle {
                width: 100%;
                height: 16px;
                Rectangle {
                    x: Styles.left-margin;
                    width: main-width + main-height;
                    height: main-height;
                    Rectangle {
                        border-radius: self.height / 2;
                        clip: true;

                        HorizontalLayout {
                            Rectangle {
                                width: self.height / 2;
                                height: hue-picker.height;
                                background: white;
                            }

                            Rectangle {
                                width: main-width;
                                height: hue-picker.height;
                                background: white;
                            }

                            Rectangle {
                                width: self.height / 2;
                                height: hue-picker.height;
                            }
                        }

                        Image {
                            x: 0;
                            width: main-width + (self.height / 2);
                            height: 100%;
                            vertical-alignment: top;
                            horizontal-alignment: left;
                            source: @image-url("../../assets/background-mini.svg");
                            vertical-tiling: repeat;
                            horizontal-tiling: repeat;
                            colorize: #e1e1e1;
                        }

                        HorizontalLayout {
                            Rectangle {
                                width: self.height / 2;
                                height: hue-picker.height;
                            }

                            Rectangle {
                                width: main-width;
                                height: hue-picker.height;
                                background: @linear-gradient(-90deg, hsv(root.hue, root.saturation, root.value, 1), transparent);
                            }

                            Rectangle {
                                width: self.height / 2;
                                height: hue-picker.height;
                                background: hsv(root.hue, root.saturation, root.value, 1);
                            }
                        }

                        Rectangle {
                            border-radius: parent.border-radius;
                            border-width: 1px;
                            border-color: Styles.text-color;
                            opacity: 10%;
                        }
                    }

                    Rectangle {
                        x: rounded-end-width + (main-width * (root.alpha / 100));
                        width: 0;
                        height: 0;
                        Rectangle {
                            width: 16px;
                            height: 16px;
                            border-radius: self.width / 2;
                            background: white;
                            drop-shadow-blur: 5px;
                            drop-shadow-offset-y: 1px;
                            drop-shadow-color: #000000;
                        }

                        Rectangle {
                            width: 8px;
                            height: 8px;
                            border-radius: self.width / 2;
                            background: root.current-color;
                        }
                    }

                    TouchArea {
                        moved => {
                            if self.has-hover {
                                if self.mouse-x < rounded-end-width {
                                    root.alpha = 0;
                                } else {
                                    root.alpha = (100 * clamp((self.mouse-x - rounded-end-width) / (self.width - main-height), 0, 1)).round();
                                }
                            }
                        }
                        changed pressed => {
                            if self.mouse-x < rounded-end-width {
                                root.alpha = 0;
                            } else {
                                root.alpha = (100 * clamp((self.mouse-x - rounded-end-width) / (self.width - main-height), 0, 1)).round();
                            }
                        }
                    }
                }
            }
        }

        Rectangle {
            width: 100%;
            height: 1px;
            x: 0;
            y: parent.height - self.height;
            background: Styles.divider-color;
        }
    }

    Rectangle {
        width: 100%;
        height: 60px;
        y: hsva-controls.y + hsva-controls.height + 8px;
        VerticalLayout {
            alignment: center;
            spacing: 10px;
            Rectangle {
                x: Styles.left-margin;
                width: 170px;
                height: 25px;
                background: Styles.section-color;
                border-radius: Styles.property-border-radius;
                border-width: 1px;

                Rectangle {
                    x: 5px;
                    width: 15px;
                    height: self.width;
                    border-radius: 2px;
                    background: root.current-color;
                }

                Text {
                    x: 25px;
                    vertical-alignment: center;
                    font-family: "Inter";
                    font-size: 11px;
                    color: #9d9d9d;
                    text: "#";
                    font-weight: 800;
                }

                Text {
                    x: 35px;
                    font-family: "Inter";
                    font-size: 12px;
                    color: Styles.text-color;
                    text: Api.color-to-data(root.current-color).short-text.to-uppercase();
                    letter-spacing: 0.8px;
                }

                divider := Rectangle {
                    x: parent.width - 45px;
                    width: 1px;
                    height: parent.height;
                    background: Styles.background-color;
                }

                Rectangle {
                    x: parent.width - self.width;
                    width: 43px;
                    height: parent.height;

                    Text {
                        x: 5px;
                        vertical-alignment: center;
                        font-family: "Inter";
                        font-size: 12px;
                        color: Styles.text-color;
                        text: root.alpha;
                    }

                    Text {
                        x: parent.width - self.width - 5px;
                        vertical-alignment: center;
                        font-family: "Inter";
                        font-size: 11px;
                        color: #9d9d9d;
                        text: "%";
                        font-weight: 800;
                    }
                }
            }

            if widget-mode == WidgetMode.edit: Button {
                x: Styles.left-margin;
                width: 100px;
                text: "Apply";
                clicked => {
                    WindowManager.apply-current-value(Api.color-to-data(root.current-color).text);
                }
            }
        }
    }
}

export component ColorPickerView {
    width: 100%;
    height: 100%;

    in property <length> initial-x: 0;
    in property <length> initial-y: 0;

    changed width => {
        if color-picker.x + color-picker.width > root.width {
            color-picker.x = (root.width - color-picker.width).max(0);
        }
    }

    changed height => {
        if (color-picker.y + color-picker.height) > root.height {
            color-picker.y = (root.height - color-picker.height).max(0);
        }
    }

    pure function cursor-on-picker(mouse-x: length, mouse-y: length) -> bool {
        if mouse-x < color-picker.x {
            return false;
        }
        if mouse-y < color-picker.y {
            return false;
        }
        if mouse-x > color-picker.x + color-picker.width {
            return false;
        }
        if mouse-y > color-picker.y + color-picker.height {
            return false;
        }
        return true;
    }

    TouchArea {
        property <bool> drag-mode: false;
        property <length> picker-initial-x;
        property <length> picker-initial-y;
        property <length> mouse-initial-x;
        property <length> mouse-initial-y;

        changed pressed => {
            if self.pressed {
                if cursor-on-picker(self.mouse-x, self.mouse-y) {
                    drag-mode = true;
                    picker-initial-x = color-picker.x;
                    picker-initial-y = color-picker.y;
                    mouse-initial-x = self.mouse-x;
                    mouse-initial-y = self.mouse-y;
                }
            } else {
                if !drag-mode {
                    WindowManager.hide-floating-widget();
                }
                drag-mode = false;
            }
        }

        property <length> picker-target-x;
        property <length> picker-target-y;

        moved => {
            if drag-mode {
                picker-target-x = picker-initial-x + (self.mouse-x - mouse-initial-x);
                picker-target-y = picker-initial-y + (self.mouse-y - mouse-initial-y);

                if picker-target-x > 0px && picker-target-x < root.width - color-picker.width {
                    color-picker.x = picker-target-x;
                }
                if picker-target-y > 0px && picker-target-y < root.height - color-picker.height {
                    color-picker.y = picker-target-y;
                }
            }
        }
    }

    color-picker := ColorPicker {
        x: root.initial-x;
        y: root.initial-y;
        widget-mode: WindowManager.widget-mode;

        close => {
            WindowManager.hide-floating-widget();
        }
    }
}

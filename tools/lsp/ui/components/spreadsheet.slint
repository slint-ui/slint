import { Palette, Button, LineEdit } from "std-widgets.slint";
import { EditorSpaceSettings, EditorSizeSettings } from "styling.slint";
export struct AddressData {
    type: string,
    street: string,
    city: string,
    state: string,
    zip: string,
}
export struct CellData {
    id: string,
    value: string,
    row: int,
    col: int,
    x: length,
    y: length,
    width: length,
    height: length
}

export component EditWindow inherits Rectangle {
    in property <CellData> current-cell: {
        id: "",
        value: "",
        row: 0,
        col: 0,
        x: 0px,
        y: 0px,
        width: 0px,
        height: 0px
    };
    callback save(string);
    callback close-editor();
    
    drop-shadow-blur: 10px;
    drop-shadow-color: black.transparentize(0.5);
    drop-shadow-offset-x: 0;
    drop-shadow-offset-y: 0;
    border-radius:EditorSizeSettings.radius;
    width: self.preferred-width;
    height: self.preferred-height;
    background: Palette.alternate-background;
    forward-focus: editor ;
       // Add TouchArea as first child
    TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            editor.focus();
        }
    }

    HorizontalLayout {
        padding: EditorSpaceSettings.default-padding;
        spacing: EditorSpaceSettings.default-spacing;
        forward-focus: editor ;
        editor := LineEdit {
            text: current-cell.value;
            accepted() => {
                save(self.text)
            }
        }

        HorizontalLayout {
            spacing: EditorSpaceSettings.default-spacing;
            Button {
                height: 30px;
                text: "Save";
                clicked => {
                    save(editor.text)
                }
            }

            Button {
                height: 30px;
                text: "Cancel";
                clicked => {
                    close-editor()
                }
            }
        }
    
    }
}

component Cell inherits Rectangle {
    in property <string> id;
    in property <bool> is-header: false;
    in property <bool> is-writeable: false;
    in-out property <bool> is-editing: false;
    in property <length> cell-width: 100px;
    property <bool> cell-clicked: false;
    in property <string> text: "";
    in-out property <color> bg-color: cell-clicked ? Palette.accent-background.transparentize(0.8) : transparent;
    callback edit-clicked(CellData);

    width: cell-width;
    height: 30px;
    border-width: 1px;
    border-color: Palette.border;
    background: is-header ? Palette.foreground.transparentize(0.9) : bg-color;
    HorizontalLayout {
        Rectangle {
            width: EditorSpaceSettings.default-padding;
        }
        Text {
            font-weight: is-header ? 700 : 400;
            width: root.width;
            height: root.height;
            vertical-alignment: center;
            text: root.text;
        }
    }

    if is-writeable: TouchArea {
        clicked => {
            if (root.is-writeable) {
                root.edit-clicked({
                    id: root.id,
                    value: root.text,
                    row: 0,
                    col: 0
                });
            }
        }
        }
}

export component Spreadsheet inherits Rectangle {
    in-out property <[AddressData]> addresses: [
        { type: "home", street: "123 Oak Lane", city: "Richmond", state: "VA", zip: "23226" },
        { type: "work", street: "456 Corporate Blvd", city: "Richmond", state: "VA", zip: "23219" },
        { type: "history", street: "123 Oak Lane", city: "Richmond", state: "VA", zip: "23226" },
        { type: "world", street: "456 Corporate Blvd", city: "Richmond", state: "VA", zip: "23219" }
    ];
    property <CellData> current-cell: {
        id: "",
        value: "",
        row: 0,
        col: 0,
        x: 0px,
        y: 0px,
        width: 0px,
        height: 0px
    };
    property <bool> edit-window-visible: false;

    width: self.preferred-width;
    height: self.preferred-height;



    VerticalLayout {
        HorizontalLayout {
            for header in ["Type", "Street", "City", "State", "ZIP"]: Cell {
                is-header: true;
                text: header;
            }
        }
        
        for address[row] in addresses: HorizontalLayout {
            for cell[col] in [
                address.type, 
                address.street, 
                address.city, 
                address.state, 
                address.zip
            ]: Cell {
                text: cell;
                is-writeable: true;
                edit-clicked(data) => {
                    root.current-cell = {
                        id: data.id,
                        value: data.value,
                        row: row,
                        col: col,
                        x: self.x,
                        y: parent.y,
                        width: self.width,
                        height: self.height
                    };
                    root.edit-window-visible = true;
                }
            }
        }
    }
       
    
    if (edit-window-visible): ew := EditWindow {
        x: current-cell.x;
        y: current-cell.y;
        current-cell: current-cell;
        save(new-value) => {
            // Update the specific field based on col index
            if (current-cell.col == 0) {
                addresses[current-cell.row].type = new-value;
            } else if (current-cell.col == 1) {
                addresses[current-cell.row].street = new-value;
            } else if (current-cell.col == 2) {
                addresses[current-cell.row].city = new-value;
            } else if (current-cell.col == 3) {
                addresses[current-cell.row].state = new-value;
            } else if (current-cell.col == 4) {
                addresses[current-cell.row].zip = new-value;
            }
            root.edit-window-visible = false;
        }
        close-editor => {
            root.edit-window-visible = false;
        }
    }    
}

// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

import { HorizontalBox, Palette, ScrollView, LineEdit } from "std-widgets.slint";
import { ComponentListItem, ComponentItem, Api } from "../api.slint";
import { StateLayer } from "./state-layer.slint";
import { EditorSizeSettings, EditorAnimationSettings, Icons } from "./styling.slint";
import { BodyText } from "./body-text.slint";
import { BodyStrongText } from "./body-strong-text.slint";
import { StatusLineApi } from "status-line.slint";
import { EditorSpaceSettings } from "styling.slint";

component HeaderItemTemplate {
    in property <bool> enabled: true;
    in property <string> text;
    out property <bool> open: true;
    out property <length> offset: icon-image.width + content-layer.spacing;

    min-width: content-layer.min-width;
    min-height: max(EditorSizeSettings.item-height, content-layer.min-height);

    touch-area := TouchArea {
        clicked => {
            root.open = !root.open;
        }
    }

    state-layer := StateLayer {
        width: 100%;
        height: 100%;
        has-hover: touch-area.has-hover;
        pressed: touch-area.pressed;
    }

    content-layer := HorizontalLayout {
        spacing: EditorSpaceSettings.default-spacing / 2;
        padding-left: EditorSpaceSettings.default-padding / 2;
        icon-image := Image {
            width: 10px;
            colorize: Palette.foreground;
            source: Icons.chevron-down;
            rotation-origin-x: self.width / 2;
            rotation-origin-y: self.height / 2;
            states [
                closed when !root.open: {
                    rotation-angle: -0.25turn;
                }
            ]

            animate rotation-angle { duration: EditorAnimationSettings.rotation-duration; }
        }

        BodyText {
            text: root.text;
            opacity: 0.5;
        }
    }

    states [
        disabled when !root.enabled: {
            root.opacity: 0.5;
        }
    ]
}

component ItemTemplate {
    in property <ComponentItem> data;
    in property <bool> enabled: true;
    in property <string> text;
    in property <length> offset;
    out property <bool> pressed <=> touch-area.pressed;
    in property <length> parent-visible-width;
    callback show-preview;
    callback rename(to: string);

    property <bool> rename-mode: false;

    min-width: content-layer.min-width;
    min-height: max(EditorSizeSettings.item-height, content-layer.min-height);


    DragArea {
        mime-type: "application/x-slint-component";
        data: data.index;

        touch-area := TouchArea {
            changed has-hover => {
                if self.has-hover {
                    StatusLineApi.help-text = @tr("Drag onto canvas to add {}", text);
                }
            }
        }
    }

    state-layer := StateLayer {
        width: 100%;
        height: 100%;
        has-hover: touch-area.has-hover;
        pressed: touch-area.pressed;
    }

    if data.is_user_defined: ContextMenuArea {
        Menu {
            MenuItem {
                title: @tr("Show Preview");
                activated => {
                    root.show-preview();
                }
            }
            MenuItem {
                title: @tr("Rename");
                activated => {
                    rename-mode = true;
                }
            }
        }
    }

    content-layer := HorizontalLayout {
        padding-left: EditorSpaceSettings.default-padding / 2 + root.offset;
        padding-top: EditorSpaceSettings.default-padding;
        padding-bottom: EditorSpaceSettings.default-padding;
        alignment: start;
        if !rename-mode: BodyText {
            wrap: no-wrap;
            overflow: elide;
            text: root.text;
        }
        if rename-mode: LineEdit {
            width: parent-visible-width - content-layer.padding-left - EditorSpaceSettings.default-padding;
            text: root.text;
            accepted(text) => {
                if text != root.text {
                    root.rename(text);
                }
                rename-mode = false;
            }
            changed has-focus => {
                if !self.has-focus {
                    self.accepted(self.text);
                }
            }
        }
    }


    states [
        disabled when !root.enabled: {
            root.opacity: 0.5;
        }
    ]
}

export component ExpandableListView inherits ScrollView {
    in property <[ComponentListItem]> known-components;

    in property <bool> preview-is-current;
    in-out property <ComponentItem> visible-component: {
        name: "",
        defined-at: "",
        pretty-location: "",
        is-user-defined: false,
        is-currently-shown: false,
    };

    callback show-preview-for(name: string, defined-at: string);

    property <length> list-spacing: 10px;
    horizontal-scrollbar-policy: ScrollBarPolicy.always-off;
    VerticalLayout {
        alignment: start;
        for cli[index] in root.known-components: VerticalLayout {
            property <int> my-category-index: index;
            header-item := HeaderItemTemplate {
                text: cli.category;
            }

            if header-item.open: VerticalLayout {
                for ci[index] in cli.components: ItemTemplate {
                    data: ci;
                    text: ci.name;
                    offset: header-item.offset;
                    height: self.min-height;
                    parent-visible-width: root.visible-width;

                    init() => {
                        root.visible-component = ci;
                    }
                    show-preview => {
                        if ci.is_user_defined && !ci.is_currently_shown {
                            root.show-preview-for(self.data.name, self.data.defined_at)
                        }
                    }
                    rename(to) => {
                        Api.rename-component(self.data.name, self.data.defined_at, to);
                    }
                }
            }
        }
    }
}

// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

import { LineEdit, Palette, VerticalBox, CheckBox, ComboBox, ScrollView, Button, HorizontalBox } from "std-widgets.slint";

import { Api, ElementInformation, PropertyDeclaration, PropertyGroup, PropertyInformation, PropertyValue, PropertyValueKind } from "../api.slint";
import { GroupHeader } from "../components/group.slint";
import { BodyStrongText } from "../components/body-strong-text.slint";
import { BodyText } from "../components/body-text.slint";
import { StateLayer } from "../components/state-layer.slint";
import { EditorSizeSettings, Icons, EditorAnimationSettings, EditorSpaceSettings, EditorSizeSettings } from "../components/styling.slint";

component ExpandableGroup {
    in property <ElementInformation> element-information;
    in property <string> text;
    in property <[PropertyInformation]> properties;

    property <bool> open: true;
    
    Rectangle {
        background: Palette.alternate-background;

        content-layer := VerticalLayout {
            // header
            Rectangle {
                touch-area := TouchArea {
                    clicked => {
                        root.open = !root.open;
                    }
                }

                state-layer := StateLayer {
                    width: 100%;
                    height: 100%;
                    has-hover: touch-area.has-hover;
                    pressed: touch-area.pressed;
                }
                
                HorizontalBox {
                    icon-image := Image {
                        width: EditorSizeSettings.default-icon-width;
                        colorize: Palette.foreground;
                        source: Icons.drop-down;
                        rotation-origin-x: self.width / 2;
                        rotation-origin-y: self.height / 2;
                        
                        states [
                            closed when !root.open: {
                                rotation-angle: -0.25turn;
                            }
                        ]

                        animate rotation-angle { duration: EditorAnimationSettings.roation-duration; }
                    }
                    
                    BodyStrongText {
                        text: root.text;
                    }
                }
            }

            if root.open : VerticalBox {
                for property in root.properties : HorizontalLayout {
                    spacing: parent.spacing;
                    
                    BodyText {
                        min-width: EditorSizeSettings.min-prefix-text-width;
                        text: property.name;
                    }

                    if property.value.kind == PropertyValueKind.string: LineEdit {
                        text: property.value.value-string;

                        accepted(text) => {
                            Api.set-string-binding(
                                root.element-information.source-uri,
                                root.element-information.source-version,
                                root.element-information.range.start,
                                property.name,
                                text,
                                property.value.is-translatable,
                                property.value.tr-context,
                                property.value.tr-plural,
                                property.value.tr-plural-expression,
                            );
                        }
                    }
                }
            }
        }
    }
}

export component PropertyView {
    in property <ElementInformation> current-element <=> Api.current-element;
    in property <[PropertyGroup]> properties <=> Api.properties;

    property <length> key-width: self.width / 2.5;
    property <bool> element-loaded: root.properties.length > 0;

    width: EditorSizeSettings.property-bar-width;

    content-layer := VerticalLayout {
        GroupHeader {
            title: @tr("{} Properties", root.current-element.type-name);
            vertical-stretch: 0;
        }
        
        if !root.element-loaded : Text {
            text: @tr("Select an Element");
            horizontal-alignment: center;
            vertical-alignment: center;
            vertical-stretch: 1;
        }

        if root.element-loaded : ScrollView {
            VerticalBox {
                alignment: start;

                for group in root.properties : ExpandableGroup {
                    text: group.group-name;

                    element-information <=> root.current-element;
                    properties: group.properties;
                }
            }
        }
    }

    Rectangle {
        x: 0;
        width: 1px;
        background: Palette.border;
    }
}

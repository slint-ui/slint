// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

import { LineEdit, Palette, VerticalBox, CheckBox, ComboBox, ScrollView, Button, HorizontalBox, SpinBox, Slider } from "std-widgets.slint";

import { Api, ElementInformation, PropertyDeclaration, PropertyGroup, PropertyInformation, PropertyValue, PropertyValueKind } from "../api.slint";
import { GroupHeader } from "../components/group.slint";
import { BodyStrongText } from "../components/body-strong-text.slint";
import { BodyText } from "../components/body-text.slint";
import { StateLayer } from "../components/state-layer.slint";
import { EditorSizeSettings, Icons, EditorAnimationSettings, EditorSpaceSettings, EditorSizeSettings, EditorFontSettings, EditorPalette } from "../components/styling.slint";

export global style {
    out property <length> grid-margin:5px;
    out property <length> min-distance:5px;
}

component CodeButton inherits Button {
    in property <ElementInformation> element-information;
    in property <PropertyInformation> property-information;

    text: @tr("Code");
    clicked => {
        Api.show-document-offset-range(
            element-information.source-uri,
            Api.property-declaration-ranges(property-information.name).defined-at.expression-range.start,
            Api.property-declaration-ranges(property-information.name).defined-at.expression-range.start,
            true,
        );
    }
}

component ResetButton inherits Button {
    in property <ElementInformation> element-information;
    in property <PropertyInformation> property-information;

    text: @tr("Reset");
    clicked => {
        Api.set-code-binding(
            element-information.source-uri,
            element-information.source-version,
            element-information.range.start,
            property-information.name,
            "",
        );
    }
}

component NameLabel inherits HorizontalLayout {
    in property <ElementInformation> element-information;
    in property <PropertyInformation> property-information;

    horizontal-stretch: 0;

    Rectangle {
        width: EditorSpaceSettings.group-indent;
    }

    BodyText {
        min-width: EditorSizeSettings.min-prefix-text-width;
        min-height: 2rem;

        text: root.property-information.name;

        font-size: 1rem;
        font-weight: property-information.value.code != "" ? EditorFontSettings.bold-font-weight : EditorFontSettings.light-font-weight;

        overflow: elide;
    }
}

component ResettingLineEdit {
    property <length> border: 3px;
    
    in property <string> default-text;
    in property <bool> can-compile: true;

    in property <bool> enabled <=> le.enabled;
    in property <InputType> input-type <=> le.input-type;
    in property <TextHorizontalAlignment> horizontal-alignment <=> le.horizontal-alignment;
    in property <string> placeholder-text <=> le.placeholder-text;
    out property <bool> has-focus <=> le.has-focus;
    out property <string> text <=> le.text;

    callback accepted <=> le.accepted;
    callback edited <=> le.edited;

    min-width <=> le.min-width;
    preferred-width <=> le.preferred-width;
    max-width <=> le.max-width;

    min-height <=> le.min-height;
    preferred-height <=> le.preferred-height;
    max-height <=> le.max-height;

    le := LineEdit {
        width: 100%;
        height: 100%;
        x: 0px;
        y: 0px;

        text: root.default-text;
        font-size: 1rem;

        // Reset on focus loss:
        changed has-focus => {
            if !self.has_focus {
                self.text = root.default-text;
            }
        }
    }

    Rectangle {
        visible: !root.can-compile;

        background: Colors.red.transparentize(0.9);
        x: root.border;
        y: root.border;
        width: root.width - 2 * root.border;
        height: root.height - 2 * root.border;

        border-radius: root.border;
    } 
}

component FloatWidget inherits HorizontalLayout {
    in property <ElementInformation> element-information;
    in property <PropertyInformation> property-information;

    private property <string> current-unit: find_current_unit(property-information.value);

    pure function find_current_unit(value: PropertyValue) -> string {
        if value.visual-items.length == 0 {
            return "";
        }
        return value.visual-items[self.find-current-index(value)];
    }

    pure function find_current_index(value: PropertyValue) -> int {
        return value.code == "" ? value.default-selection : value.value-int;
    }

    spacing: EditorSpaceSettings.default-spacing;
    padding-top: EditorSpaceSettings.property-spacing;
    alignment: space-between;
    width: 100%;

    NameLabel {
        property-information: root.property-information;
        element-information: root.element-information;
    }

    function set-binding() {
        Api.set-code-binding(
            self.element-information.source-uri,
            self.element-information.source-version,
            self.element-information.range.start,
            self.property-information.name,
            number.text == "" ? "" : number.text + self.current-unit,
        );
    }

    HorizontalLayout {
        alignment: end;
        number := ResettingLineEdit {
            horizontal-alignment: right;
            min-width: EditorSizeSettings.float-size;
            max-width: 14rem;
            horizontal-stretch: 0;

            default-text: property-information.value.value-float;

            edited(text) => {
                self.can-compile = Api.test-code-binding(
                    root.element-information.source-uri,
                    root.element-information.source-version,
                    root.element-information.range.start,
                    root.property-information.name,
                    number.text == "" ? "" : number.text + root.current-unit,
                );
            }

            accepted(text) => {
                root.set-binding();
            }
        }

        if property-information.value.visual-items.length > 1: ComboBox {
            horizontal-stretch: 0;

            min-width: EditorSizeSettings.length-combo;
            model: property-information.value.visual-items;
            current-index: root.find_current_index(root.property-information.value);

            selected(unit) => {
                root.current-unit = unit;
                set-binding();
            }
        }
        if property-information.value.visual-items.length == 1: Text {
            text: property-information.value.visual-items[0];

            changed text => {
                root.current-unit = self.text;
            }
        }
    }
}

component ColorWidget inherits HorizontalLayout {
    in property <ElementInformation> element-information;
    in property <PropertyInformation> property-information;

    spacing: EditorSpaceSettings.default-spacing;
    alignment: space-between;
    width: 100%;

    NameLabel {
        property-information: root.property-information;
        element-information: root.element-information;
    }

    HorizontalLayout {
        spacing: parent.spacing;

        alignment: end;

        Rectangle {
            height: 1.8rem;
            width: 2 * self.height;
            
            background: property-information.value.value-brush;
            border-width: 1px;
            border-color: Palette.foreground;
        }

        Text {
            vertical-alignment: center;
            text: property-information.value.value-string;
        }
    }
}

export component ExpandableProperty inherits Rectangle {
    callback toggled;
    in-out property <bool> checked:false;
    property <duration> dur:300ms;
    in-out property <color> headerBG: Palette.alternate-background;
    in-out property <bool> enabled:true;
    in property <string> title: "Title";
    clip: true;
    height: header.height + EditorSpaceSettings.default-spacing + (root.checked ? content.preferred-height : 0px);
    animate height {
        duration: dur;
        easing: ease-out;
    }

    VerticalLayout {
        x: 0;
        spacing: EditorSpaceSettings.default-spacing;
        Rectangle {
            height: 5px;
        }

        touch-area := TouchArea {
            clicked => {
                if (root.enabled) {
                    root.checked = !root.checked;
                    root.toggled();
                }
            }

            state-layer := StateLayer {
                width: 100%;
                height: 100%;
                has-hover: touch-area.has-hover;
                pressed: touch-area.pressed;
            }

            header := Rectangle {
                width: 100%;
                height: 30px;
                background: headerBG;
            }

            HorizontalLayout {
                x: 0;
                y: 0;
                width: 100%;
                alignment: stretch;

                accordionIcon := Image {
                    width: EditorSpaceSettings.group-indent;
                    source: Icons.add;
                    colorize: Palette.foreground;
                    vertical-alignment: top;
                    visible: state-layer.has-hover;
                    rotation-angle: root.checked ? 180deg : 0deg;
                    animate rotation-angle {
                        duration: dur / 2;
                        easing: ease-in;
                    }
                }

                content := Rectangle {
                    background: headerBG;
                    height: root.checked ? self.preferred-height : 10px;
                    animate height {
                        duration: dur;
                        easing: ease-out;
                    }
                    VerticalLayout {
                        width: 100%;
                        @children
                    }
                }
            }
        }
    }
}

component ExpandableGroup {
    in property <ElementInformation> element-information;
    in property <string> text;
    in property <[PropertyInformation]> properties;

    property <bool> open: true;
    Rectangle {
        background: Palette.alternate-background;

        content-layer := VerticalLayout {
            // header
            spacing: EditorSpaceSettings.default-spacing;

            if text != "": Rectangle {
                touch-area := TouchArea {
                    clicked => {
                        root.open = !root.open;
                    }
                }

                state-layer := StateLayer {
                    width: 100%;
                    height: 100%;
                    has-hover: touch-area.has-hover;
                    pressed: touch-area.pressed;
                }

                HorizontalLayout {
                    icon-image := Image {
                        width: EditorSizeSettings.default-icon-width;
                        colorize: Palette.foreground;
                        source: Icons.drop-down;
                        rotation-origin-x: self.width / 2;
                        rotation-origin-y: self.height / 2;
                        states [
                            closed when !root.open: {
                                rotation-angle: -0.25turn;
                            }
                        ]

                        animate rotation-angle { duration: EditorAnimationSettings.roation-duration; }
                    }

                    BodyStrongText {
                        text: root.text;
                    }
                }
            }

            if root.open: VerticalLayout {
                spacing: EditorSpaceSettings.property-spacing;
                for property in root.properties: HorizontalLayout {
                    alignment: stretch;

                    if property.value.kind == PropertyValueKind.boolean: HorizontalLayout {
                        spacing: EditorSpaceSettings.default-spacing;

                        NameLabel {
                            property-information: property;
                            element-information: root.element-information;
                        }

                        CheckBox {
                            checked: property.value.value_bool;

                            toggled() => {
                                Api.set-code-binding(
                                    root.element-information.source-uri,
                                    root.element-information.source-version,
                                    root.element-information.range.start,
                                    property.name,
                                    self.checked ? "true" : "false",
                                );
                            }
                        }
                    }
                    if (property.value.kind == PropertyValueKind.color) || (property.value.kind == PropertyValueKind.brush): ColorWidget {
                        element-information <=> root.element-information;
                        property-information: property;
                    }
                    if property.value.kind == PropertyValueKind.code: HorizontalLayout {
                        spacing: EditorSpaceSettings.default-spacing;
                        alignment: space-between;
                        padding-top: 2px;

                        NameLabel {
                            property-information: property;
                            element-information: root.element-information;
                        }

                        if property.value.code == "": HorizontalLayout {
                            Text {
                                text: @tr("unset");
                            }
                        }
                        if property.value.code != "": HorizontalLayout {
                            ResetButton {
                                element-information <=> root.element-information;
                                property-information: property;
                            }

                            CodeButton {
                                element-information <=> root.element-information;
                                property-information: property;
                            }
                        }
                    }
                    if property.value.kind == PropertyValueKind.enum: HorizontalLayout {
                        spacing: EditorSpaceSettings.default-spacing;

                        NameLabel {
                            property-information: property;
                            element-information: root.element-information;
                        }

                        HorizontalLayout {
                            ComboBox {
                                current-index: property.value.value-int;

                                model: property.value.visual-items;

                                selected(value) => {
                                    Api.set-code-binding(
                                        root.element-information.source-uri,
                                        root.element-information.source-version,
                                        root.element-information.range.start,
                                        property.name,
                                        property.value.value_string + "." + value,
                                    )
                                }
                            }
                        }
                    }
                    if property.value.kind == PropertyValueKind.float:  FloatWidget {
                        element-information <=> root.element-information;
                        property-information: property;
                    }
                    if property.value.kind == PropertyValueKind.integer: HorizontalLayout {
                        spacing: EditorSpaceSettings.default-spacing;

                        NameLabel {
                            property-information: property;
                            element-information: root.element-information;
                        }

                        ResettingLineEdit {
                            horizontal-alignment: right;
                            input-type: number;

                            default-text: property.value.value-int;

                            edited(text) => {
                                self.can-compile = Api.test-code-binding(
                                    root.element-information.source-uri,
                                    root.element-information.source-version,
                                    root.element-information.range.start,
                                    property.name,
                                    text,
                                );
                            }

                            accepted(text) => {
                                Api.set-code-binding(
                                    root.element-information.source-uri,
                                    root.element-information.source-version,
                                    root.element-information.range.start,
                                    property.name,
                                    text,
                                );
                            }
                        }
                    }
                    if property.value.kind == PropertyValueKind.string: HorizontalLayout {
                        spacing: EditorSpaceSettings.default-spacing;

                        NameLabel {
                            property-information: property;
                            element-information: root.element-information;
                        }

                        ResettingLineEdit {
                            default-text: property.value.value-string;

                            edited(text) => {
                                self.can-compile = Api.test-string-binding(
                                    root.element-information.source-uri,
                                    root.element-information.source-version,
                                    root.element-information.range.start,
                                    property.name,
                                    text,
                                    property.value.is-translatable,
                                    property.value.tr-context,
                                    property.value.tr-plural,
                                    property.value.tr-plural-expression,
                                );
                            }

                            accepted(text) => {
                                Api.set-string-binding(
                                    root.element-information.source-uri,
                                    root.element-information.source-version,
                                    root.element-information.range.start,
                                    property.name,
                                    text,
                                    property.value.is-translatable,
                                    property.value.tr-context,
                                    property.value.tr-plural,
                                    property.value.tr-plural-expression,
                                );
                            }
                        }
                    }
                }
            }
        }
    }
}

export component PropertyView {
    in property <ElementInformation> current-element <=> Api.current-element;
    in property <[PropertyGroup]> properties <=> Api.properties;

    property <length> key-width: self.width / 2.5;
    property <bool> element-loaded: root.properties.length > 0;

    width: EditorSizeSettings.property-bar-width;

    content-layer := VerticalLayout {
        GroupHeader {
            title: @tr("{} Properties", root.current-element.type-name);
            vertical-stretch: 0;
        }

        if !root.element-loaded: Text {
            text: @tr("Select an Element");
            horizontal-alignment: center;
            vertical-alignment: center;
            vertical-stretch: 1;
        }

        if root.element-loaded: ScrollView {
            VerticalBox {
                alignment: start;

                for group in root.properties: ExpandableGroup {
                    text: group.group-name;

                    element-information <=> root.current-element;
                    properties: group.properties;
                }
            }
        }
    }

    Rectangle {
        x: 0;
        width: 1px;
        background: Palette.border;
    }
}

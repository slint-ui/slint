// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0



import { Api, ColorData, ElementInformation, PickerData, PropertyInformation, PropertyValue, PropertyValueKind, PreviewData, WidgetMode, PickerMode } from "./api.slint";
import { StatusLineApi } from "components/status-line.slint";


export global WindowGlobal {
    in-out property <length> window-width;
    in-out property <length> window-height;
}

export global WindowManager {
    out property <bool> showing-color-picker: false;
    out property <WidgetMode> widget-mode: edit;
    out property <PickerMode> picker-mode: color;

    property <ElementInformation> current-element-information;
    out property <PropertyInformation> current-property-information;
    property <string> current-property-container-id;
    property <PreviewData> current-preview-data;
    property <string> possible_error;

    callback show-floating-widget(PropertyInformation, ElementInformation);
    callback show-floating-preview-widget(property-container-id: string, preview-data: PreviewData, property-value: PropertyValue);
    callback hide-floating-widget();
    callback apply-current-value(value: string);
    callback update-preview-value(value: string);

    show-floating-widget(property-information, element-information) => {
        widget-mode = WidgetMode.edit;
        current-property-information = property-information;
        current-element-information = element-information;

        if current-property-information.value.kind == PropertyValueKind.color {
            PickerData.hue = current-property-information.value.value-brush.to-hsv().hue;
            PickerData.saturation = current-property-information.value.value-brush.to-hsv().saturation;
            PickerData.value = current-property-information.value.value-brush.to-hsv().value;
            PickerData.alpha = current-property-information.value.value-brush.to-hsv().alpha * 100;
            showing-color-picker = true;
        }
    }

    hide-floating-widget => {
        showing-color-picker = false;
        current-element-information = { };
        current-property-information = { };
        widget-mode = WidgetMode.edit;
    }

    show-floating-preview-widget(property-container-id, preview-data, property-value) => {
        current-property-container-id = property-container-id;
        current-preview-data = preview-data;
        widget-mode = WidgetMode.preview;

        if property-value.kind == PropertyValueKind.color {
            PickerData.hue = property-value.value-brush.to-hsv().hue;
            PickerData.saturation = current-property-information.value.value-brush.to-hsv().saturation;
            PickerData.value = property-value.value-brush.to-hsv().value;
            PickerData.alpha = property-value.value-brush.to-hsv().alpha * 100;
            showing-color-picker = true;
        }
    }

    apply-current-value(text) => {
        Api.set-code-binding(
                current-element-information.source-uri,
                current-element-information.source-version,
                current-element-information.range.start,
                current-property-information.name,
                text);
    }

    update-preview-value(text) => {
        self.possible_error = Api.set-json-preview-data(current-property-container-id, current-preview-data.name, "\"\{text}\"");

        StatusLineApi.help-text = self.possible-error;
    }
}

// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0
import { Api, BrushKind, ColorData, ElementInformation, GradientStop, PropertyInformation, PropertyValue, PropertyValueKind, PreviewData  } from "./api.slint";
import { StatusLineApi } from "components/status-line.slint";
import { BrushMode, BrushPropertyType, WidgetMode } from "./properties-state.slint";
import { TableData } from "properties-state.slint";

export global WindowGlobal {
    in-out property <length> window-width;
    in-out property <length> window-height;
}

export global PickerData {
    in-out property <float> hue;
    in-out property <float> saturation;
    in-out property <float> value;
    // alpha is an int, instead of float to help snap values to whole percentage numbers
    in-out property <int> alpha;
    out property <color> current-color: hsv(hue, saturation, value, alpha / 100);
    in-out property <BrushKind> current-brush-kind;
    in-out property <brush> current-brush;
    in-out property <[GradientStop]> current-gradient-stops;
    in-out property <float> current-angle;

    in-out property <int> current-stop-index: 0;
    changed current-stop-index => {
        if WindowManager.showing-color-stop-picker {
            set-current-stop-as-color();
        }
    }

    changed current-color => {
        if WindowManager.showing-color-stop-picker {
            current-gradient-stops[current-stop-index].color = current-color;
        }
    }

    public function set-current-stop-as-color() {
        hue = current-gradient-stops[current-stop-index].color.to-hsv().hue;
        saturation = current-gradient-stops[current-stop-index].color.to-hsv().saturation;
        value = current-gradient-stops[current-stop-index].color.to-hsv().value;
        alpha = current-gradient-stops[current-stop-index].color.to-hsv().alpha * 100;
    }

}

export global WindowManager {
    out property <bool> showing-color-picker: false;
    out property <bool> showing-table-editor: false;
    out property <bool> showing-color-stop-picker: false;
    out property <WidgetMode> widget-mode: edit;
    out property <BrushPropertyType> picker-mode: color;
    out property <BrushMode> brush-mode: color;

    property <ElementInformation> current-element-information;
    out property <PropertyInformation> current-property-information;
    in-out property <string> current-property-container-id;
    in-out property <PreviewData> current-preview-data;
    property <string> possible_error;
    property <string> brush-string;

    callback show-floating-widget(property-information: PropertyInformation, element-information: ElementInformation);
    callback show-floating-preview-widget(property-container-id: string, preview-data: PreviewData, property-value: PropertyValue);
    callback show-floating-table-editor(property-group-id: string, preview-data: PreviewData);
    callback hide-floating-widget();
    callback apply-current-value(value: string);
    callback update-preview-value(value: string);
    callback update-brush();
    callback show-color-stop-picker();
    callback hide-color-stop-picker();

    show-floating-widget(property-information, element-information) => {
        widget-mode = WidgetMode.edit;
        current-property-information = property-information;
        current-element-information = element-information;
        if current-property-information.value.kind == PropertyValueKind.color {
            PickerData.hue = current-property-information.value.value-brush.to-hsv().hue;
            PickerData.saturation = current-property-information.value.value-brush.to-hsv().saturation;
            PickerData.value = current-property-information.value.value-brush.to-hsv().value;
            PickerData.alpha = current-property-information.value.value-brush.to-hsv().alpha * 100;
            picker-mode = BrushPropertyType.color;
            showing-color-picker = true;
        }
        if current-property-information.value.kind == PropertyValueKind.brush {
            PickerData.current-brush-kind = current-property-information.value.brush-kind;
            PickerData.current-brush = current-property-information.value.value-brush;
            PickerData.current-gradient-stops = Api.clone-gradient-stops(current-property-information.value.gradient-stops);
            PickerData.current-angle = current-property-information.value.value-float;
            picker-mode = BrushPropertyType.brush;
            brush-mode = current-property-information.value.brush-kind == BrushKind.solid ? BrushMode.color : current-property-information.value.brush-kind == BrushKind.linear ? BrushMode.linear : BrushMode.radial;

            if current-property-information.value.brush-kind == BrushKind.solid {
                PickerData.hue = current-property-information.value.value-brush.to-hsv().hue;
                PickerData.saturation = current-property-information.value.value-brush.to-hsv().saturation;
                PickerData.value = current-property-information.value.value-brush.to-hsv().value;
                PickerData.alpha = current-property-information.value.value-brush.to-hsv().alpha * 100;
            } else {
                PickerData.hue = PickerData.current-gradient-stops[PickerData.current-stop-index].color.to-hsv().hue;
                PickerData.saturation = PickerData.current-gradient-stops[PickerData.current-stop-index].color.to-hsv().saturation;
                PickerData.value = PickerData.current-gradient-stops[PickerData.current-stop-index].color.to-hsv().value;
                PickerData.alpha = PickerData.current-gradient-stops[PickerData.current-stop-index].color.to-hsv().alpha * 100;
            }
            showing-color-picker = true;
        }
    }

    hide-floating-widget => {
        showing-color-picker = false;
        showing-table-editor = false;
        showing-color-stop-picker = false;
        current-element-information = { };
        current-property-information = { };
        widget-mode = WidgetMode.edit;
        picker-mode = BrushPropertyType.color;
        brush-mode = BrushMode.color;
    }

    show-floating-preview-widget(property-container-id, preview-data, property-value) => {
        current-property-container-id = property-container-id;
        current-preview-data = preview-data;
        widget-mode = WidgetMode.preview;

        if property-value.kind == PropertyValueKind.color {
            picker-mode = BrushPropertyType.color;
            PickerData.hue = property-value.value-brush.to-hsv().hue;
            PickerData.saturation = property-value.value-brush.to-hsv().saturation;
            PickerData.value = property-value.value-brush.to-hsv().value;
            PickerData.alpha = property-value.value-brush.to-hsv().alpha * 100;
            showing-color-picker = true;
        }
        if property-value.kind == PropertyValueKind.brush {
            picker-mode = BrushPropertyType.brush;
            PickerData.hue = property-value.value-brush.to-hsv().hue;
            PickerData.saturation = property-value.value-brush.to-hsv().saturation;
            PickerData.value = property-value.value-brush.to-hsv().value;
            PickerData.alpha = property-value.value-brush.to-hsv().alpha * 100;
            if property-value.brush-kind == BrushKind.solid {
                brush-mode = BrushMode.color;
            } else if property-value.brush-kind == BrushKind.linear {
                brush-mode = BrushMode.linear;
            } else if property-value.brush-kind == BrushKind.radial {
                brush-mode = BrushMode.radial;
            }
            PickerData.current-brush = property-value.value-brush;
            PickerData.current-gradient-stops = property-value.gradient-stops;
            showing-color-picker = true;
        }
    }

    show-floating-table-editor(property-group-id, preview-data) => {
        TableData.populate-table(property-group-id, preview-data);
        showing-table-editor = true;
    }

    show-color-stop-picker => {
        PickerData.set-current-stop-as-color();
        showing-color-stop-picker = true;
    }

    hide-color-stop-picker => {
        showing-color-stop-picker = false;
    }

    apply-current-value(text) => {
        Api.set-code-binding(
                current-element-information.source-uri,
                current-element-information.source-version,
                current-element-information.range.start,
                current-property-information.name,
                text);
    }

    update-preview-value(text) => {
        self.possible_error = Api.set-json-preview-data(current-property-container-id, current-preview-data.name, "\"\{text}\"");
    }

    update-brush() => {
        PickerData.current-brush = Api.create-brush(BrushKind.linear, PickerData.current-angle, PickerData.current-brush, PickerData.current-gradient-stops);
        if widget-mode == WidgetMode.preview {
            brush-string = Api.as-slint-brush(BrushKind.linear, PickerData.current-angle, PickerData.current-brush, PickerData.current-gradient-stops);
            self.possible_error = Api.set-json-preview-data(current-property-container-id, current-preview-data.name, "\"\{brush-string}\"");
        }
    }
}

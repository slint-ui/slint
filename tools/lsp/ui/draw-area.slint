// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

// cSpell: ignore Heade

import { Button, ComboBox, HorizontalBox, ListView, ScrollView, Palette, VerticalBox } from "std-widgets.slint";
import { Diagnostics, DiagnosticsOverlay } from "diagnostics-overlay.slint";
import { Resizer } from "resizer.slint";

enum SelectionKind {
    none,
    select_at,
    select_up_or_down,
}

export struct Selection {
    x: length,
    y: length,
    width: length,
    height: length,
    border-color: color,
    is-primary: bool,
    is-moveable: bool,
    is-resizable: bool,
}

component SelectionFrame {
    in property <Selection> selection;
    in property <bool> interactive: true;

    x: root.selection.x;
    y: root.selection.y;
    width: root.selection.width;
    height: root.selection.height;

    callback update-geometry(/* x */ length, /* y */ length, /* width */ length, /* height */ length);
    callback select-behind(/* x */ length, /* y */ length, /* enter component? */ bool, /* same file? */ bool);
    callback selected-element-delete();

    if !root.interactive || !selection.is-primary: Rectangle {
        x: 0;
        y: 0;
        border-color: root.selection.border-color;
        border-width: 1px;
    }

    if root.interactive && selection.is-primary: Resizer {
        double-clicked(x, y, modifiers) => {
            root.select-behind(self.absolute-position.x + x, self.absolute-position.y + y, modifiers.control, modifiers.shift);
        }

        is-moveable: root.selection.is-moveable;
        is-resizable: root.selection.is-resizable;

        x-position: root.x;
        y-position: root.y;

        color: root.selection.border-color;
        x: 0;
        y: 0;
        width: root.width;
        height: root.height;

        update-geometry(x, y, w, h, done) => {
            root.x = x;
            root.y = y;
            root.width = w;
            root.height = h;

            if done {
                root.update-geometry(x, y, w, h);
            }
        }

        inner := Rectangle {
            border-color: root.selection.border-color;
            border-width: 1px;
            background: parent.resizing || parent.moving ? root.selection.border-color.with-alpha(0.5) : root.selection.border-color.with-alpha(0.0);
        }
    }
}

export component DrawArea {
    in property <[Diagnostics]> diagnostics;
    in property <[Selection]> selections;
    in property <component-factory> preview-area;
    in property <bool> design-mode;

    out property <bool> preview-visible: i-preview-area-container.has-component && !diagnostics.diagnostics-open;

    out property <length> preview-area-position-x: i-preview-area-container.absolute-position.x;
    out property <length> preview-area-position-y: i-preview-area-container.absolute-position.y;
    out property <length> preview-area-width: preview-visible ? i-preview-area-container.width : 0px;
    out property <length> preview-area-height: preview-visible ? i-preview-area-container.height : 0px;

    callback select-at(/* x */ length, /* y */ length, /* enter_component? */ bool);
    callback select-behind(/* x */ length, /* y */ length, /* enter_component? */ bool, /* reverse */ bool);
    callback show-document(/* url */ string, /* line */ int, /* column */ int);
    callback reselect(); // Reselect element e.g. after changing the window size (which may move the element)
    callback unselect();
    callback selected-element-update-geometry(/* x */ length, /* y */ length, /* width */ length, /* height */ length);
    callback selected-element-delete();

    preferred-height: max(i-preview-area-container.preferred-height, i-preview-area-container.min-height) + 2 * i-scroll-view.border;
    preferred-width: max(i-preview-area-container.preferred-width, i-preview-area-container.min-width) + 2 * i-scroll-view.border;

    i-scroll-view := ScrollView {
        out property <length> border: 60px;

        viewport-width: i-drawing-rect.width;
        viewport-height: i-drawing-rect.height;

        i-drawing-rect := Rectangle {
            background: Palette.alternate-background;

            width: max(i-scroll-view.visible-width, main-resizer.width + i-scroll-view.border);
            height: max(i-scroll-view.visible-height, main-resizer.height + i-scroll-view.border);

            unselect-area := TouchArea {
                clicked => { root.unselect(); }
                mouse-cursor: crosshair;
                enabled <=> root.design-mode;
            }

            i-content-border := Rectangle {
                x: main-resizer.x + (main-resizer.width - self.width) / 2;
                y: main-resizer.y + (main-resizer.height - self.height) / 2;
                width: main-resizer.width + 2 * self.border-width;
                height: main-resizer.height + 2 * self.border-width;
                border-width: 1px;
                border-color: Palette.border;
            }

            main-resizer := Resizer {
                is-moveable: false;
                is-resizable <=> i-preview-area-container.is-resizable;

                x-position: parent.x;
                y-position: parent.y;

                update-geometry(_, _, w, h) => {
                    i-preview-area-container.width = clamp(w, i-preview-area-container.min-width, i-preview-area-container.max-width);
                    i-preview-area-container.height = clamp(h, i-preview-area-container.min-height, i-preview-area-container.max-height);
                    reselect();
                }

                width: i-preview-area-container.width;
                height: i-preview-area-container.height;


                // Also make a condition that abuses the fact that the init callback
                // is called every time the condition is dirty, to make sure that the size
                // is within the bounds.
                // Query the preview-area to make sure this is evaluated when it changes
                if i-preview-area-container.has-component && root.preview-area == i-preview-area-container.component-factory : Rectangle {
                    init => {
                        i-preview-area-container.width = clamp(i-preview-area-container.width, max(i-preview-area-container.min-width, 16px), max(i-preview-area-container.max-width, 16px));
                        i-preview-area-container.height = clamp(i-preview-area-container.height, max(i-preview-area-container.min-height, 16px),  max(i-preview-area-container.max-height, 16px));
                    }
                }

                i-preview-area-container := ComponentContainer {
                    property <bool> is-resizable: (self.min-width != self.max-width && self.min-height != self.max-height) && self.has-component;

                    component-factory <=> root.preview-area;

                    // The width and the height can't depend on the layout info of the inner item otherwise this would
                    // cause a recursion if this happens (#3989)
                    // Instead, we use a init function to initialize
                    width: 0px;
                    height: 0px;

                    init => {
                        self.width = max(self.preferred-width, self.min-width);
                        self.height = max(self.preferred-height, self.min-height);
                    }
                }

                i-selection-area := TouchArea {
                    private property <length> selection-x: 0px;
                    private property <length> selection-y: 0px;
                    private property <SelectionKind> selection-kind: SelectionKind.none;

                    clicked => {
                        self.selection-x = self.pressed-x;
                        self.selection-y = self.pressed-y;
                        self.selection-kind = SelectionKind.select-at;
                    }
                    double-clicked => {
                        self.selection-x = self.pressed-x;
                        self.selection-y = self.pressed-y;
                        self.selection-kind = SelectionKind.select-up-or-down;
                    }

                    pointer-event(event) => {
                        // This needs to fire AFTER clicked and double-clicked to work :-/
                        if (event.kind == PointerEventKind.up) {
                            if (self.selection-kind == SelectionKind.select_up_or_down) {
                                root.select-behind(self.selection-x, self.selection-y, event.modifiers.control, event.modifiers.shift);
                            } else if (self.selection-kind == SelectionKind.select-at) {
                                root.select-at(self.selection-x, self.selection-y, event.modifiers.control);
                            }
                        }
                        self.selection-kind = SelectionKind.none;
                    }
                    mouse-cursor: crosshair;
                    enabled <=> root.design-mode;
                }

                i-selection-display-area := Rectangle {
                    for s in root.selections: SelectionFrame {
                        interactive: root.design-mode;
                        selection: s;
                        update-geometry(x, y, w, h) => {
                            root.selected-element-update-geometry(x, y, w, h);
                        }

                        selected-element-delete() => {
                            root.selected-element-delete();
                        }

                        select-behind(x, y, c, f) => { root.select-behind(x, y, c, f); }
                    }
                }
            }

            // Diagnostics overlay:
            diagnostics := DiagnosticsOverlay {
                width: 100%;
                height: 100%;
                diagnostics <=> root.diagnostics;
                show-document(url, line, column) => { root.show-document(url, line, column); }
            }
        }
    }
}

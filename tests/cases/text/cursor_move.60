// Copyright Â© SixtyFPS GmbH <info@sixtyfps.io>
// SPDX-License-Identifier: (GPL-3.0-only OR LicenseRef-SixtyFPS-commercial)

TestCase := TextInput {
    width: 100phx;
    height: 100phx;
    property<string> test_text: self.text;
    property<int> test_cursor_pos: self.cursor_position;
    property<int> test_anchor_pos: self.anchor_position;
    property<bool> has_selection: self.cursor_position != self.anchor_position;
    property<bool> input_focused: self.has_focus;
}

/*
```rust

const LEFT_CODE: char = '\u{F702}';
const RIGHT_CODE: char = '\u{F703}';
const HOME_CODE: char = '\u{F729}';
const END_CODE: char = '\u{F72B}';
const BACK_CODE: char = '\u{0008}'; // backspace \b

let shift_modifier = sixtyfps::re_exports::KeyboardModifiers {
    shift: true,
    ..Default::default()
};

let instance = TestCase::new();
sixtyfps::testing::send_mouse_click(&instance, 50., 50.);
assert!(instance.get_input_focused());
assert_eq!(instance.get_test_text(), "");
sixtyfps::testing::send_keyboard_string_sequence(&instance, "Test");
assert_eq!(instance.get_test_text(), "Test");
assert!(!instance.get_has_selection());

sixtyfps::testing::set_current_keyboard_modifiers(&instance, shift_modifier);
sixtyfps::testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
sixtyfps::testing::set_current_keyboard_modifiers(&instance, sixtyfps::re_exports::KeyboardModifiers::default());
assert!(instance.get_has_selection());
sixtyfps::testing::send_keyboard_string_sequence(&instance, &BACK_CODE.to_string());
assert!(!instance.get_has_selection());
sixtyfps::testing::send_keyboard_string_sequence(&instance, &BACK_CODE.to_string());

assert_eq!(instance.get_test_text(), "Te");

sixtyfps::testing::send_keyboard_string_sequence(&instance, &RIGHT_CODE.to_string());
sixtyfps::testing::send_keyboard_string_sequence(&instance, &RIGHT_CODE.to_string());
sixtyfps::testing::send_keyboard_string_sequence(&instance, &RIGHT_CODE.to_string());
sixtyfps::testing::send_keyboard_string_sequence(&instance, &RIGHT_CODE.to_string());
assert_eq!(instance.get_test_cursor_pos(), 2);

sixtyfps::testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
sixtyfps::testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
sixtyfps::testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
sixtyfps::testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
assert_eq!(instance.get_test_cursor_pos(), 0);

sixtyfps::testing::set_current_keyboard_modifiers(&instance, shift_modifier);
sixtyfps::testing::send_keyboard_string_sequence(&instance, &END_CODE.to_string());
sixtyfps::testing::set_current_keyboard_modifiers(&instance, sixtyfps::re_exports::KeyboardModifiers::default());
assert!(instance.get_has_selection());
assert_eq!(instance.get_test_cursor_pos(), 2);
assert_eq!(instance.get_test_anchor_pos(), 0);

sixtyfps::testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
assert!(!instance.get_has_selection());

sixtyfps::testing::set_current_keyboard_modifiers(&instance, shift_modifier);
sixtyfps::testing::send_keyboard_string_sequence(&instance, &HOME_CODE.to_string());
sixtyfps::testing::set_current_keyboard_modifiers(&instance, sixtyfps::re_exports::KeyboardModifiers::default());
assert!(instance.get_has_selection());
assert_eq!(instance.get_test_cursor_pos(), 0);
assert_eq!(instance.get_test_anchor_pos(), 1);
```
*/

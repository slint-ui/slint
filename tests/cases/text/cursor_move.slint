// Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial

TestCase := TextInput {
    width: 100phx;
    height: 100phx;
    property<string> test_text: self.text;
    property<int> test_cursor_pos: self.cursor_position;
    property<int> test_anchor_pos: self.anchor_position;
    property<bool> has_selection: self.cursor_position != self.anchor_position;
    property<bool> input_focused: self.has_focus;
}

/*
```rust

const UP_CODE: char = '\u{F700}';
const DOWN_CODE: char = '\u{F701}';
const LEFT_CODE: char = '\u{F702}';
const RIGHT_CODE: char = '\u{F703}';
const DEL_CODE: char = '\u{007f}';
const BACK_CODE: char = '\u{0008}'; // backspace \b

let shift_modifier = slint::private_unstable_api::re_exports::KeyboardModifiers {
    shift: true,
    ..Default::default()
};

let move_mod_shift_modifier = slint::private_unstable_api::re_exports::KeyboardModifiers {
    shift: true,
    control: cfg!(not(target_os = "macos")),
    alt: cfg!(target_os = "macos"),
    ..Default::default()
};

let move_mod_modifier = slint::private_unstable_api::re_exports::KeyboardModifiers {
    control: cfg!(not(target_os = "macos")),
    alt: cfg!(target_os = "macos"),
    ..Default::default()
};

let instance = TestCase::new();
slint_testing::send_mouse_click(&instance, 50., 50.);
assert!(instance.get_input_focused());
assert_eq!(instance.get_test_text(), "");
slint_testing::send_keyboard_string_sequence(&instance, "Test");
assert_eq!(instance.get_test_text(), "Test");
assert!(!instance.get_has_selection());

slint_testing::set_current_keyboard_modifiers(&instance, shift_modifier);
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
assert!(instance.get_has_selection());
slint_testing::send_keyboard_string_sequence(&instance, &BACK_CODE.to_string());
assert!(!instance.get_has_selection());
slint_testing::send_keyboard_string_sequence(&instance, &BACK_CODE.to_string());

assert_eq!(instance.get_test_text(), "Te");

slint_testing::send_keyboard_string_sequence(&instance, &RIGHT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &RIGHT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &RIGHT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &RIGHT_CODE.to_string());
assert_eq!(instance.get_test_cursor_pos(), 2);

slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
assert_eq!(instance.get_test_cursor_pos(), 0);

slint_testing::set_current_keyboard_modifiers(&instance, move_mod_shift_modifier);
slint_testing::send_keyboard_string_sequence(&instance, &DOWN_CODE.to_string());
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
assert!(instance.get_has_selection());
assert_eq!(instance.get_test_cursor_pos(), 2);
assert_eq!(instance.get_test_anchor_pos(), 0);

slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
assert!(!instance.get_has_selection());

slint_testing::set_current_keyboard_modifiers(&instance, move_mod_shift_modifier);
slint_testing::send_keyboard_string_sequence(&instance, &UP_CODE.to_string());
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
assert!(instance.get_has_selection());
assert_eq!(instance.get_test_cursor_pos(), 0);
assert_eq!(instance.get_test_anchor_pos(), 1);

// Select all and start over
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers {
    control: true,
    ..Default::default()
});
slint_testing::send_keyboard_string_sequence(&instance, &"a");
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
slint_testing::send_keyboard_string_sequence(&instance, &BACK_CODE.to_string());
assert!(!instance.get_has_selection());
assert_eq!(instance.get_test_text(), "");

slint_testing::send_keyboard_string_sequence(&instance, "First Word Third Word Fifth");
assert_eq!(instance.get_test_text(), "First Word Third Word Fifth");
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
assert_eq!(instance.get_test_cursor_pos(), 22);

// Delete word backwards when the cursor is between the 'F' of Fifth and the leading space.
// -> Delete "Word"
slint_testing::set_current_keyboard_modifiers(&instance, move_mod_modifier);
slint_testing::send_keyboard_string_sequence(&instance, &BACK_CODE.to_string());
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
assert_eq!(instance.get_test_text(), "First Word Third Fifth");

// Once more :-)
slint_testing::set_current_keyboard_modifiers(&instance, move_mod_modifier);
slint_testing::send_keyboard_string_sequence(&instance, &BACK_CODE.to_string());
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
assert_eq!(instance.get_test_text(), "First Word Fifth");

// Move cursor between the "d" of "Word" and the trailing space
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());

// Delete word forwards
slint_testing::set_current_keyboard_modifiers(&instance, move_mod_modifier);
slint_testing::send_keyboard_string_sequence(&instance, &DEL_CODE.to_string());
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
assert_eq!(instance.get_test_text(), "First Fifth");

// Select all and start over
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers {
    control: true,
    ..Default::default()
});
slint_testing::send_keyboard_string_sequence(&instance, &"a");
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
slint_testing::send_keyboard_string_sequence(&instance, &BACK_CODE.to_string());
assert!(!instance.get_has_selection());
assert_eq!(instance.get_test_text(), "");

slint_testing::send_keyboard_string_sequence(&instance, "First Second");
assert_eq!(instance.get_test_text(), "First Second");

slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());

slint_testing::set_current_keyboard_modifiers(&instance, shift_modifier);
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
assert!(instance.get_has_selection());

// When there's an existing selection, always just delete that
slint_testing::set_current_keyboard_modifiers(&instance, move_mod_modifier);
slint_testing::send_keyboard_string_sequence(&instance, &BACK_CODE.to_string());
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
assert_eq!(instance.get_test_text(), "First Send");

slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());

slint_testing::set_current_keyboard_modifiers(&instance, shift_modifier);
slint_testing::send_keyboard_string_sequence(&instance, &LEFT_CODE.to_string());
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
assert!(instance.get_has_selection());

// When there's an existing selection, always just delete that
slint_testing::set_current_keyboard_modifiers(&instance, move_mod_modifier);
slint_testing::send_keyboard_string_sequence(&instance, &DEL_CODE.to_string());
slint_testing::set_current_keyboard_modifiers(&instance, slint::private_unstable_api::re_exports::KeyboardModifiers::default());
assert_eq!(instance.get_test_text(), "Fist Send");
```
*/

// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

component ButtonBase inherits Text { }

component Button inherits ButtonBase {
    accessible-role: button;
    accessible-label: "optimized";
    extra-label := Text {
        accessible-label: "extra";
    }
}

export component TestCase {
    first := Button { }

    second := Button {
        accessible-label: "plain";
    }

    // third
    Button {
        accessible-label: "third";
    }
}

/*
```rust
let instance = TestCase::new().unwrap();
let mut button_search = slint_testing::ElementHandle::find_by_element_id(&instance, "Button::root");
let mut button = button_search.next().unwrap();
assert!(button.is_valid());
assert_eq!(button.accessible_label().unwrap(), "optimized");
button = button_search.next().unwrap();
assert!(button.is_valid());
assert_eq!(button.accessible_label().unwrap(), "plain");
button = button_search.next().unwrap();
assert!(button.is_valid());
assert_eq!(button.accessible_label().unwrap(), "third");
assert!(button_search.next().is_none());

assert_eq!(slint_testing::ElementHandle::find_by_element_id(&instance, "TestCase::second").flat_map(|elem| elem.element_type_names_and_ids().unwrap()).collect::<Vec<_>>(),
           vec![
                ("Button".into(), "TestCase::second".into()),
                ("ButtonBase".into(), "Button::root".into()),
                ("Text".into(), "ButtonBase::root".into()),
           ]);

let texts = slint_testing::ElementHandle::find_by_element_type_name(&instance, "Text").filter_map(|elem| elem.accessible_label()).collect::<Vec<_>>();
assert_eq!(texts, vec!["optimized", "extra", "plain", "extra", "third", "extra"]);
```

```cpp
auto handle = TestCase::create();
//const TestCase &instance = *handle;

auto button_search = slint::testing::ElementHandle::find_by_element_id(handle, "Button::root");
assert_eq(button_search.size(), 3);
auto button = button_search[0];
assert(button.is_valid());
assert_eq(button.accessible_label().value(), "optimized");
button = button_search[1];
assert(button.is_valid());
assert_eq(button.accessible_label().value(), "plain");
button = button_search[2];
assert(button.is_valid());
assert_eq(button.accessible_label().value(), "third");

auto id_search_result = slint::testing::ElementHandle::find_by_element_id(handle, "TestCase::second");
assert_eq(id_search_result.size(), 1);
auto type_names_and_ids = id_search_result[0].element_type_names_and_ids();
assert_eq(type_names_and_ids.size(), 3);
assert_eq(type_names_and_ids[0].type_name, "Button");
assert_eq(type_names_and_ids[0].id, "TestCase::second");
assert_eq(type_names_and_ids[1].type_name, "ButtonBase");
assert_eq(type_names_and_ids[1].id, "Button::root");
assert_eq(type_names_and_ids[2].type_name, "Text");
assert_eq(type_names_and_ids[2].id, "ButtonBase::root");
```
*/

// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

export component TestCase {
    width: 300px;
    height: 300px;

    in-out property <bool> popup-created;
    in-out property <int> click-count;
    in-out property <int> popup-selector: 0;

    callback do-close;
    do-close => {
        close-from-outside.close();
    }

    default-popup := PopupWindow {
        x: 10px;
        y: 10px;
        width: parent.width - 20px;
        height: parent.height - 20px;
        Text {
            text: "I'm a default";
        }
        init => {
            root.popup-created = true;
        }
    }

    self-closing-popup := PopupWindow {
        close-on-click: false;
        x: 10px;
        y: 10px;
        width: parent.width - 20px;
        height: parent.height - 20px;
        Text {
            text: "I'm a self-closing popup";
        }
        TouchArea {
            clicked => {
                self-closing-popup.close();
            }
        }
        init => {
            root.popup-created = true;
        }
    }

    close-from-outside := PopupWindow {
        close-on-click: false;
        x: 10px;
        y: 10px;
        width: parent.width - 20px;
        height: parent.height - 20px;
        Text {
            text: "I'm a popup that only close from outside";
        }
        TouchArea {
            clicked => {
            }
        }
        init => {
            root.popup-created = true;
        }
    }

    TouchArea {
        clicked => {
            root.click-count = root.click-count + 1;
            if (root.popup-selector == 0) {
                root.popup-selector = 3;
                default-popup.show();
            } else if (root.popup-selector == 1) {
                root.popup-selector = 3;
                self-closing-popup.show();
            } else if (root.popup-selector == 2) {
                root.popup-selector = 3;
                close-from-outside.show();
            }
        }
    }
}
/*

```rust
let instance = TestCase::new().unwrap();

assert_eq!(instance.get_click_count(), 0);
assert_eq!(instance.get_popup_created(), false);

// --------- Default popup
instance.set_popup_selector(0);
instance.set_popup_created(false);
instance.set_click_count(0);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 1);
assert_eq!(instance.get_popup_created(), true);

// Click to close
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 1);
// Subsequent click to verify that it was closed
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 2);

// --------- Popup with close-on-click: false
instance.set_popup_selector(1);
instance.set_popup_created(false);
instance.set_click_count(0);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 1);
assert_eq!(instance.get_popup_created(), true);

// Click outside, nothing happens
slint_testing::send_mouse_click(&instance, 1., 1.);
assert_eq!(instance.get_click_count(), 1);
// Click outside again, nothing happens
slint_testing::send_mouse_click(&instance, 295., 295.);
assert_eq!(instance.get_click_count(), 1);

// Click on the popup, it's registered and the custom TouchArea calls close()
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 1);

// Subsequent click to verify that it was closed
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 2);

// --------- Popup with close-on-click: false closed externally
instance.set_popup_selector(2);
instance.set_popup_created(false);
instance.set_click_count(0);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 1);
assert_eq!(instance.get_popup_created(), true);

// Click outside, nothing happens
slint_testing::send_mouse_click(&instance, 1., 1.);
assert_eq!(instance.get_click_count(), 1);

// Click on the popup, it's registered but nothing is done
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 1);
// Click again to verify that it was _not_ closed
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 1);

// Close manually and verify that subsequent click is passed through
instance.invoke_do_close();
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 2);
instance.invoke_do_close();
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_click_count(), 3);

```

```cpp
auto handle = TestCase::create();
const TestCase &instance = *handle;

assert_eq(instance.get_click_count(), 0);
assert_eq(instance.get_popup_created(), false);

instance.set_popup_selector(0);
instance.set_popup_created(false);
instance.set_click_count(0);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 1);
assert_eq(instance.get_popup_created(), true);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 1);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 2);

instance.set_popup_selector(1);
instance.set_popup_created(false);
instance.set_click_count(0);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 1);
assert_eq(instance.get_popup_created(), true);
slint_testing::send_mouse_click(&instance, 1., 1.);
assert_eq(instance.get_click_count(), 1);
slint_testing::send_mouse_click(&instance, 295., 295.);
assert_eq(instance.get_click_count(), 1);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 1);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 2);

instance.set_popup_selector(2);
instance.set_popup_created(false);
instance.set_click_count(0);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 1);
assert_eq(instance.get_popup_created(), true);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 1);
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 1);

instance.invoke_do_close();
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 2);
instance.invoke_do_close();
slint_testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_click_count(), 3);
```

```disable-because-nodejs-runs-with-qt-and-send-mouse-click-wont-send-to-popup-qwindow
var instance = new slint.TestCase({});

assert.equal(instance.click_count, 0);
assert.equal(instance.popup_created, false);

instance.popup_selector = 0;
instance.popup_created = false;
instance.click_count = 0;
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 1);
assert.equal(instance.popup_created, true);
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 1);
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 2);

instance.popup_selector = 1;
instance.popup_created = false;
instance.click_count = 0;
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 1);
assert.equal(instance.popup_created, true);
slintlib.private_api.send_mouse_click(instance, 1., 1.);
assert.equal(instance.click_count, 1);
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 1);
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 2);

instance.popup_selector = 2;
instance.popup_created = false;
instance.click_count = 0;
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 1);
assert.equal(instance.popup_created, true);
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 1);
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 1);

instance.do_close();
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 2);
instance.do_close();
slintlib.private_api.send_mouse_click(instance, 15., 15.);
assert.equal(instance.click_count, 3);
```

*/

// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

export TestCase := Window {
    width: 100phx;
    height: 100phx;
    property<int> value: -10;
    property <bool> cond: true;

    VerticalLayout {
        padding: 0px;
        spacing: 0px;

        Rectangle {
            background: orange;
            TouchArea {
                clicked => {
                    root.value = 0;
                }
            }
        }

        if (true) : Rectangle {
            background: blue;
            TouchArea {
                clicked => {
                    root.value = 1;
                }
            }
        }
        if (cond) : Rectangle {
            background: red;
            TouchArea {
                clicked => {
                    root.value = 2;
                }
            }
        }
        if (false) : Rectangle {
            background: green;
            TouchArea {
                clicked => {
                    root.value = 3;
                }
            }
        }

        Rectangle {
            background: pink;
            TouchArea {
                clicked => {
                    root.value = 4;
                }
            }
        }
    }
}

// There should be 4 rectangle: so 100 divided by 4 is 25.
// when cond is false, there is 3, so 33.3 pixel per rectangle

/*
```cpp
auto handle = TestCase::create();
const TestCase &instance = *handle;

slint_testing::send_mouse_click(&instance, 5., 5.);
assert_eq(instance.get_value(), 0);

slint_testing::send_mouse_click(&instance, 5., 52.);
assert_eq(instance.get_value(), 2);

slint_testing::send_mouse_click(&instance, 5., 30.);
assert_eq(instance.get_value(), 1);

slint_testing::send_mouse_click(&instance, 5., 80.);
assert_eq(instance.get_value(), 4);

instance.set_cond(false);
slint_testing::send_mouse_click(&instance, 5., 35.);
assert_eq(instance.get_value(), 1);
slint_testing::send_mouse_click(&instance, 5., 30.);
assert_eq(instance.get_value(), 0);
slint_testing::send_mouse_click(&instance, 5., 67.);
assert_eq(instance.get_value(), 4);

instance.set_cond(true);
slint_testing::send_mouse_click(&instance, 5., 70.);
assert_eq(instance.get_value(), 2);

```


```rust
let instance = TestCase::new().unwrap();

slint_testing::send_mouse_click(&instance, 5., 5.);
assert_eq!(instance.get_value(), 0);

slint_testing::send_mouse_click(&instance, 5., 52.);
assert_eq!(instance.get_value(), 2);

slint_testing::send_mouse_click(&instance, 5., 30.);
assert_eq!(instance.get_value(), 1);

slint_testing::send_mouse_click(&instance, 5., 80.);
assert_eq!(instance.get_value(), 4);

instance.set_cond(false);
slint_testing::send_mouse_click(&instance, 5., 35.);
assert_eq!(instance.get_value(), 1);
slint_testing::send_mouse_click(&instance, 5., 30.);
assert_eq!(instance.get_value(), 0);
slint_testing::send_mouse_click(&instance, 5., 67.);
assert_eq!(instance.get_value(), 4);

instance.set_cond(true);
slint_testing::send_mouse_click(&instance, 5., 70.);
assert_eq!(instance.get_value(), 2);


```

```js
var instance = new slint.TestCase();

slintlib.private_api.send_mouse_click(instance, 5., 5.);
assert.equal(instance.value, 0);

slintlib.private_api.send_mouse_click(instance, 5., 52.);
assert.equal(instance.value, 2);

slintlib.private_api.send_mouse_click(instance, 5., 30.);
assert.equal(instance.value, 1);

slintlib.private_api.send_mouse_click(instance, 5., 80);
assert.equal(instance.value, 4);

instance.cond = false;
slintlib.private_api.send_mouse_click(instance, 5., 35.);
assert.equal(instance.value, 1);
slintlib.private_api.send_mouse_click(instance, 5., 30.);
assert.equal(instance.value, 0);
slintlib.private_api.send_mouse_click(instance, 5., 67.);
assert.equal(instance.value, 4);

instance.cond = true;
slintlib.private_api.send_mouse_click(instance, 5., 70.);
assert.equal(instance.value, 2);
```
*/

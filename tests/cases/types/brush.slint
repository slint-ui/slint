// Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial

Test := Rectangle {
    // allow declaring brush properties and assigning colors
    property<brush> color_brush: blue;
    // allow to use brighter and darker on a brush
    property<brush> ligher: true ? color_brush.brighter(50%) : color_brush.darker(50%);

    VerticalLayout {
        r1 := Rectangle {
            background: @linear-gradient(1.2rad, red, blue);
        }
        r2 := Rectangle {
            background: r1.background.darker(50%);
        }
    }
    property <color> r2_col: r2.background;

    property<bool> test: ligher == Colors.blue.brighter(50%) && r2_col == Colors.red.darker(50%);
}

/*
```cpp
auto handle = Test::create();
const Test &t = *handle;
assert_eq(t.get_color_brush().color(), slint::Color::from_rgb_uint8(0, 0, 0xff));
assert(t.get_test());

auto green = slint::Color::from_rgb_uint8(0, 0xff, 0);
t.set_color_brush(green);
assert_eq(t.get_color_brush().color(), green);

```

```rust
let t = Test::new();
assert_eq!(t.get_color_brush().color(), slint::Color::from_rgb_u8(0, 0, 0xff));
assert!(t.get_test());

let green = slint::Color::from_rgb_u8(0, 0xff, 0);
t.set_color_brush(green.into());
assert_eq!(t.get_color_brush().color(), green);

```

```js
var t = new slint.Test({});
assert.equal(t.color_brush, "#0000ffff");
assert(t.test);

let green = "#00ff00ff";
t.color_brush = "#00ff00"; // css-color-parser2 can't parse #rrggbbaa yet
assert.equal(t.color_brush, green);

```
*/

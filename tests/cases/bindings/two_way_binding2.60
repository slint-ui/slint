// Copyright Â© SixtyFPS GmbH <info@sixtyfps.io>
// SPDX-License-Identifier: (GPL-3.0-only OR LicenseRef-SixtyFPS-commercial)

OtherComp := Rectangle {
    property t <=> text.text;
    property get_text <=> text.text;
    text := Text {
        text: "to be overriden";
    }
    property <int> some_value: 42;
    property some_value_alias <=> some_value;
}

TestCase := Rectangle {

    property <string> text1: "Hello";
    property <string> text2: "Blah";
    property ti1_text <=> ti1.text_alias;
    property ti2_text <=> ti2.text_alias;
    property text_item_text <=> text_item.text;
    property <string> othercomp_t: "real value";
    property othercomp_get_text <=> other_comp.get_text;
    property <int> othercomp_some_value;
    property othercomp_some_value_alias <=> other_comp.some_value_alias;
    property <int> othercomp_some_value_alias2;

    ti1 := TextInput {
        property text_alias <=> text;
        text <=> text1;
    }

    ti2 := TextInput {
        property text_alias <=> text_alias_indirection;
        property text_alias_indirection <=> text;
        text <=> text_item.text;
    }

    text_item := Text {
        text: text2;
    }

    Text {
        text <=> text1;
    }

    other_comp := OtherComp {
        t <=> root.othercomp_t;
        some_value <=> othercomp_some_value;
        some_value_alias <=> othercomp_some_value_alias2;
    }

    callback set_ti1(string);
    set_ti1(a) => { ti1.text = a; }
    callback set_ti2(string);
    set_ti2(a) => { ti2.text = a; }
}


/*

```rust
let instance = TestCase::new();
assert_eq!(instance.get_text1(), sixtyfps::SharedString::from("Hello"));
assert_eq!(instance.get_text2(), sixtyfps::SharedString::from("Blah"));
assert_eq!(instance.get_ti1_text(), sixtyfps::SharedString::from("Hello"));
assert_eq!(instance.get_ti2_text(), sixtyfps::SharedString::from("Blah"));
assert_eq!(instance.get_text_item_text(), sixtyfps::SharedString::from("Blah"));
assert_eq!(instance.get_othercomp_t(), instance.get_othercomp_get_text());
assert_eq!(instance.get_othercomp_t(), sixtyfps::SharedString::from("real value"));
assert_eq!(instance.get_othercomp_get_text(), sixtyfps::SharedString::from("real value"));

instance.set_text1(sixtyfps::SharedString::from("Text1New"));
instance.set_text2(sixtyfps::SharedString::from("Text2New"));
assert_eq!(instance.get_text1(), sixtyfps::SharedString::from("Text1New"));
assert_eq!(instance.get_text2(), sixtyfps::SharedString::from("Text2New"));
assert_eq!(instance.get_ti1_text(), sixtyfps::SharedString::from("Text1New"));
assert_eq!(instance.get_ti2_text(), sixtyfps::SharedString::from("Text2New"));
assert_eq!(instance.get_text_item_text(), sixtyfps::SharedString::from("Text2New"));

instance.invoke_set_ti1(sixtyfps::SharedString::from("Hallo"));
instance.invoke_set_ti2(sixtyfps::SharedString::from("Bonjour"));
assert_eq!(instance.get_text1(), sixtyfps::SharedString::from("Hallo"));
assert_eq!(instance.get_text2(), sixtyfps::SharedString::from("Text2New"));
assert_eq!(instance.get_ti1_text(), sixtyfps::SharedString::from("Hallo"));
assert_eq!(instance.get_ti2_text(), sixtyfps::SharedString::from("Bonjour"));
assert_eq!(instance.get_text_item_text(), sixtyfps::SharedString::from("Bonjour"));

assert_eq!(instance.get_othercomp_some_value(), 42);
assert_eq!(instance.get_othercomp_some_value_alias(), 42);
assert_eq!(instance.get_othercomp_some_value_alias2(), 42);
instance.set_othercomp_some_value(88);
assert_eq!(instance.get_othercomp_some_value(), 88);
assert_eq!(instance.get_othercomp_some_value_alias(), 88);
assert_eq!(instance.get_othercomp_some_value_alias2(), 88);
instance.set_othercomp_some_value_alias(81);
assert_eq!(instance.get_othercomp_some_value(), 81);
assert_eq!(instance.get_othercomp_some_value_alias(), 81);
assert_eq!(instance.get_othercomp_some_value_alias2(), 81);
instance.set_othercomp_some_value_alias2(1);
assert_eq!(instance.get_othercomp_some_value(), 1);
assert_eq!(instance.get_othercomp_some_value_alias(), 1);
assert_eq!(instance.get_othercomp_some_value_alias2(), 1);

```



```cpp
auto handle = TestCase::create();
const TestCase &instance = *handle;
assert_eq(instance.get_text1(), sixtyfps::SharedString("Hello"));
assert_eq(instance.get_text2(), sixtyfps::SharedString("Blah"));
assert_eq(instance.get_ti1_text(), sixtyfps::SharedString("Hello"));
assert_eq(instance.get_ti2_text(), sixtyfps::SharedString("Blah"));
assert_eq(instance.get_text_item_text(), sixtyfps::SharedString("Blah"));
assert_eq(instance.get_othercomp_t(), instance.get_othercomp_get_text());
assert_eq(instance.get_othercomp_t(), sixtyfps::SharedString("real value"));
assert_eq(instance.get_othercomp_get_text(), sixtyfps::SharedString("real value"));


instance.set_text1(sixtyfps::SharedString("Text1New"));
instance.set_text2(sixtyfps::SharedString("Text2New"));
assert_eq(instance.get_text1(), sixtyfps::SharedString("Text1New"));
assert_eq(instance.get_text2(), sixtyfps::SharedString("Text2New"));
assert_eq(instance.get_ti1_text(), sixtyfps::SharedString("Text1New"));
assert_eq(instance.get_ti2_text(), sixtyfps::SharedString("Text2New"));
assert_eq(instance.get_text_item_text(), sixtyfps::SharedString("Text2New"));

instance.invoke_set_ti1(sixtyfps::SharedString("Hallo"));
instance.invoke_set_ti2(sixtyfps::SharedString("Bonjour"));
assert_eq(instance.get_text1(), sixtyfps::SharedString("Hallo"));
assert_eq(instance.get_text2(), sixtyfps::SharedString("Text2New"));
assert_eq(instance.get_ti1_text(), sixtyfps::SharedString("Hallo"));
assert_eq(instance.get_ti2_text(), sixtyfps::SharedString("Bonjour"));
assert_eq(instance.get_text_item_text(), sixtyfps::SharedString("Bonjour"));

assert_eq(instance.get_othercomp_some_value(), 42);
assert_eq(instance.get_othercomp_some_value_alias(), 42);
assert_eq(instance.get_othercomp_some_value_alias2(), 42);
instance.set_othercomp_some_value(88);
assert_eq(instance.get_othercomp_some_value(), 88);
assert_eq(instance.get_othercomp_some_value_alias(), 88);
assert_eq(instance.get_othercomp_some_value_alias2(), 88);
instance.set_othercomp_some_value_alias(81);
assert_eq(instance.get_othercomp_some_value(), 81);
assert_eq(instance.get_othercomp_some_value_alias(), 81);
assert_eq(instance.get_othercomp_some_value_alias2(), 81);
instance.set_othercomp_some_value_alias2(1);
assert_eq(instance.get_othercomp_some_value(), 1);
assert_eq(instance.get_othercomp_some_value_alias(), 1);
assert_eq(instance.get_othercomp_some_value_alias2(), 1);
```


```js
let instance = new sixtyfps.TestCase({});
assert.equal(instance.text1, "Hello");
assert.equal(instance.text2, "Blah");
assert.equal(instance.ti1_text, "Hello");
assert.equal(instance.ti2_text, "Blah");
assert.equal(instance.text_item_text, "Blah");
assert.equal(instance.othercomp_t, instance.othercomp_get_text);
assert.equal(instance.othercomp_t, "real value");
assert.equal(instance.othercomp_get_text, "real value");

instance.text1 = "Text1New";
instance.text2 = "Text2New";
assert.equal(instance.text1, "Text1New");
assert.equal(instance.text2, "Text2New");
assert.equal(instance.ti1_text, "Text1New");
assert.equal(instance.ti2_text, "Text2New");
assert.equal(instance.text_item_text, "Text2New");

instance.set_ti1("Hallo");
instance.set_ti2("Bonjour");
assert.equal(instance.text1, "Hallo");
assert.equal(instance.text2, "Text2New");
assert.equal(instance.ti1_text, "Hallo");
assert.equal(instance.ti2_text, "Bonjour");
assert.equal(instance.text_item_text, "Bonjour");

assert.equal(instance.othercomp_some_value, 42);
assert.equal(instance.othercomp_some_value_alias, 42);
assert.equal(instance.othercomp_some_value_alias2, 42);
instance.othercomp_some_value = 88;
assert.equal(instance.othercomp_some_value, 88);
assert.equal(instance.othercomp_some_value_alias, 88);
assert.equal(instance.othercomp_some_value_alias2, 88);
instance.othercomp_some_value_alias = 81;
assert.equal(instance.othercomp_some_value, 81);
assert.equal(instance.othercomp_some_value_alias, 81);
assert.equal(instance.othercomp_some_value_alias2, 81);
instance.othercomp_some_value_alias2 = 1;
assert.equal(instance.othercomp_some_value, 1);
assert.equal(instance.othercomp_some_value_alias, 1);
assert.equal(instance.othercomp_some_value_alias2, 1);
```

*/

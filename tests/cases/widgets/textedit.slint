// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0


import { TextEdit } from "std-widgets.slint";
export component TestCase inherits Window {
    width: 100px;
    height: 100px;
    edit := TextEdit {
        width: 100%;
        height: 100%;
    }

    forward-focus: edit;
    out property <bool> textedit-focused <=> edit.has_focus;
    callback edited <=> edit.edited;
}

/*


```rust
use std::cell::RefCell;
use std::rc::Rc;

let instance = TestCase::new().unwrap();

let edits = Rc::new(RefCell::new(Vec::new()));
instance.on_edited({
    let edits = edits.clone();
    move |val| {
    edits.borrow_mut().push(val);
}});

slint_testing::send_mouse_click(&instance, 25., 25.);
assert!(instance.get_textedit_focused());
assert!(edits.borrow().is_empty());

slint_testing::send_keyboard_string_sequence(&instance, "hello");
assert_eq!(edits.borrow().clone(), vec!["h", "he", "hel", "hell", "hello"]);


// Test mouse cursor for issue 6444
use slint::{LogicalPosition, platform::{WindowEvent, PointerEventButton}};
use slint::private_unstable_api::re_exports::MouseCursor;
assert_eq!(slint_testing::access_testing_window(instance.window(), |window| window.mouse_cursor.get()), MouseCursor::Text, "after previous click");
instance.window().dispatch_event(WindowEvent::PointerPressed { position: LogicalPosition::new(50.0, 50.0), button: PointerEventButton::Right });
assert_eq!(slint_testing::access_testing_window(instance.window(), |window| window.mouse_cursor.get()), MouseCursor::Text, "right button pressed");
instance.window().dispatch_event(WindowEvent::PointerReleased { position: LogicalPosition::new(50.0, 50.0), button: PointerEventButton::Right });
assert_eq!(slint_testing::access_testing_window(instance.window(), |window| window.mouse_cursor.get()), MouseCursor::Text, "right button released");
instance.window().dispatch_event(WindowEvent::PointerExited { });
assert_eq!(slint_testing::access_testing_window(instance.window(), |window| window.mouse_cursor.get()), MouseCursor::Default);


```

*/

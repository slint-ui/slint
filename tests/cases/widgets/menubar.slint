
// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

import { AboutSlint, Button } from "std-widgets.slint";
import { MenuBorder } from "../../../internal/compiler/widgets/fluent/components.slint";
export component TestCase inherits Window {
    width: 300px;
    height: 300px;

    in-out property <string> result;

    MenuBar {
        Menu {
            title: "File";
            MenuItem {
                title: "New";
                activated => { debug("New"); }
            }
            MenuItem {
                title: "Open";
                activated => { debug("Open"); }
            }
            Menu {
                function open-recent(entry: string) {
                    result += entry;
                    debug(entry);
                }
                title: "Open Recent";
                MenuItem {
                    title: "Recent 1";
                    activated => { open-recent("Recent 1"); }
                }
                MenuItem {
                    title: "Recent 2";
                    activated => { open-recent("Recent 2"); }
                }
                MenuItem {
                    title: "Recent 3";
                    activated => { open-recent("Recent 3"); }
                }
            }
            MenuItem {
                title: "Save";
                activated => { debug("Save"); }
            }
        }
        Menu {
            title: "Edit";
            MenuItem {
                title: "Copy";
                activated => { debug("Copy"); }
            }
            MenuItem {
                title: "Paste";
                activated => { debug("Paste"); }
            }
        }
    }
    vl := VerticalLayout {
        AboutSlint {}
        Button { text: "Hello"; }
    }

    out property <bool> check-geometry: vl.x == 0 && vl.y == 0 && vl.width == root.width && vl.height == root.height;

    out property <bool> test: check-geometry;
}

/*
```rust
use slint::{SharedString, platform::{Key}};
let instance = TestCase::new().unwrap();
assert!(instance.get_test());
// click on the file menu
slint_testing::send_mouse_click(&instance, 10., 10.);
// navigate using the keys to the "Open Recent" menu item
slint_testing::send_keyboard_string_sequence(&instance, &SharedString::from(Key::DownArrow));
slint_testing::send_keyboard_string_sequence(&instance, &SharedString::from(Key::DownArrow));
slint_testing::send_keyboard_string_sequence(&instance, &SharedString::from(Key::DownArrow));
slint_testing::send_keyboard_string_sequence(&instance, &SharedString::from(Key::RightArrow));
slint_testing::send_keyboard_string_sequence(&instance, &SharedString::from(Key::UpArrow));
assert_eq!(instance.get_result(), "");
slint_testing::send_keyboard_string_sequence(&instance, &SharedString::from("\n"));
assert_eq!(instance.get_result(), "Recent 3");
```

```cpp
auto handle = TestCase::create();
const TestCase &instance = *handle;
assert(instance.get_test());
// click on the file menu
slint_testing::send_mouse_click(&instance, 10., 10.);
// navigate using the keys to the "Open Recent" menu item
slint_testing::send_keyboard_string_sequence(&instance, slint::platform::key_codes::DownArrow);
slint_testing::send_keyboard_string_sequence(&instance, slint::platform::key_codes::DownArrow);
slint_testing::send_keyboard_string_sequence(&instance, slint::platform::key_codes::DownArrow);
slint_testing::send_keyboard_string_sequence(&instance, slint::platform::key_codes::RightArrow);
slint_testing::send_keyboard_string_sequence(&instance, slint::platform::key_codes::UpArrow);
assert_eq(instance.get_result(), "");
slint_testing::send_keyboard_string_sequence(&instance, "\n");
assert_eq(instance.get_result(), "Recent 3");
```
*/

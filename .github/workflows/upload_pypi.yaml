# Copyright © SixtyFPS GmbH <info@slint.dev>
# SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

name: Upload component to Python Package Index

on:
    workflow_dispatch:
      inputs:
        release:
            type: boolean
            default: false
            required: false
            description: "Release? If false, publish to test.pypi.org, if true, publish to pypi.org"

jobs:
    build_binaries:
        env:
            MACOSX_DEPLOYMENT_TARGET: "11.0"
        strategy:
            matrix:
                platform:
                    - runner: windows-latest
                      target: x64
                      container: auto
# Pending https://github.com/actions/partner-runner-images/issues/85
#                    - runner: windows-11-arm
#                      target: aarch64
#                      container: auto
                    - runner: macos-14
                      target: aarch64
                      container: auto
                    - runner: ubuntu-22.04
                      target: x86_64
                      container: auto
                    - runner: ubuntu-22.04
                      target: aarch64
                      container: "ghcr.io/slint-ui/slint/aarch64-unknown-linux-gnu"
                    - runner: ubuntu-22.04
                      target: armv7
                      container: "ghcr.io/slint-ui/slint/armv7-unknown-linux-gnueabihf"
        runs-on: ${{ matrix.platform.runner }}
        steps:
            - uses: actions/checkout@v5
            - uses: ./.github/actions/install-linux-dependencies
              if: runner.os == 'Linux'
            - uses: actions/setup-python@v6
              with:
                python-version: '3.12'
            - uses: ./.github/actions/setup-rust
            - uses: baptiste0928/cargo-install@v3
              with:
                  crate: taplo-cli
            - name: Prepare feature config for binaries
              working-directory: api/python/slint
              shell: bash
              run: |
                cat Cargo.toml | taplo format --option column_width=100000 --stdin-filepath=Cargo.toml - | \
                  perl -p -e 's,^\s*default\s*=.*,,' | \
                  perl -p -e 's,# binaries:\s?,,' > Cargo.toml.new
                cat Cargo.toml.new | taplo format --stdin-filepath=Cargo.toml - > Cargo.toml
                rm Cargo.toml.new
                taplo get -f Cargo.toml features.default

            - name: Build a binary wheel
              uses: PyO3/maturin-action@v1
              with:
                  working-directory: api/python/slint
                  target: ${{ matrix.platform.target }}
                  args: --release --out wheelhouse --find-interpreter
                  container: ${{ matrix.platform.container }}
            - name: Store the distribution packages
              uses: actions/upload-artifact@v4
              with:
                name: python-package-distributions-${{ matrix.platform.runner }}-${{ strategy.job-index }}
                path: api/python/slint/wheelhouse/*.whl

    ios_binaries:
        strategy:
            matrix:
                target:
                    - aarch64-apple-ios-sim
                    - aarch64-apple-ios
                include:
                    - target: aarch64-apple-ios-sim
                      sim_suffix: SIM_
                      python_sim_suffix: _x86_64-simulator
                      arch: arm64
                      sdk_name: iphonesimulator
                      tag: ios_13_0_arm64_iphonesimulator
                    - target: aarch64-apple-ios
                      arch: arm64
                      sdk_name: iphoneos
                      tag: ios_13_0_arm64_iphoneos

        runs-on: macos-14
        steps:
            - uses: actions/checkout@v5
            - uses: ./.github/actions/setup-rust
              with:
                  target: aarch64-apple-ios
            - uses: actions/setup-python@v6
              with:
                python-version: '3.12'
            - uses: baptiste0928/cargo-install@v3
              with:
                  crate: taplo-cli
            - name: Prepare feature config for binaries
              working-directory: api/python/slint
              shell: bash
              run: |
                cat Cargo.toml | taplo format --option column_width=100000 --stdin-filepath=Cargo.toml - | \
                  perl -p -e 's,^\s*default\s*=.*,,' | \
                  perl -p -e 's,# binaries:\s?,,' > Cargo.toml.new
                cat Cargo.toml.new | taplo format --stdin-filepath=Cargo.toml - > Cargo.toml
                rm Cargo.toml.new
                taplo get -f Cargo.toml features.default

            - run: |
                export GIT_LFS_SKIP_SMUDGE=1
                git clone https://github.com/beeware/mobile-forge.git
                cd mobile-forge
                source ./setup-iOS.sh 3.13
                PYTHONDIR="$PWD/support/3.13/iOS/Python.xcframework/ios-arm64${{ matrix.python_sim_suffix}}"
                echo PYTHONDIR="$PYTHONDIR" >> $GITHUB_ENV
                OSX_SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
                echo "OSX_SDKROOT=$OSX_SDKROOT" >> $GITHUB_ENV
                IOS_SDKROOT=$(xcrun --sdk ${{ matrix.sdk_name }} --show-sdk-path)
                echo "IOS_SDKROOT=$IOS_SDKROOT" >> $GITHUB_ENV
                echo "PYO3_CROSS_PYTHON_VERSION=3.13" >> $GITHUB_ENV
                echo "SDKROOT=$OSX_SDKROOT" >> $GITHUB_ENV
                echo "PYO3_CROSS_LIB_DIR=$PYTHONDIR" >> $GITHUB_ENV
                echo CARGO_TARGET_AARCH64_APPLE_IOS_${{ matrix.sim_suffix }}RUSTFLAGS="-C link-arg=-isysroot -C link-arg=$IOS_SDKROOT -C link-arg=-arch -C link-arg=${{ matrix.arch }} -C link-arg=-miphoneos-version-min=14.0 -C link-arg=-F -C link-arg=$PYTHONDIR -C link-arg=-framework	-C link-arg=Python" >> $GITHUB_ENV

            - name: Build a binary wheel
              uses: PyO3/maturin-action@v1
              env:
                  _PYTHON_HOST_PLATFORM: ${{ matrix.tag }}
              with:
                  working-directory: api/python/slint
                  target: ${{ matrix.target }}
                  args: --release --out wheelhouse --find-interpreter

            - name: Store the distribution packages
              uses: actions/upload-artifact@v4
              with:
                name: python-package-distributions-${{ matrix.target }}
                path: api/python/slint/wheelhouse/*.whl

    build_source_package:
        name: Build source package
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v5
            - uses: baptiste0928/cargo-install@v3
              with:
                  crate: taplo-cli
            - name: Prepare feature config for binaries
              working-directory: api/python/slint
              shell: bash
              run: |
                cat Cargo.toml | taplo format --option column_width=100000 --stdin-filepath=Cargo.toml - | \
                  perl -p -e 's,^\s*default\s*=.*,,' | \
                  perl -p -e 's,# binaries:\s?,,' > Cargo.toml.new
                cat Cargo.toml.new | taplo format --stdin-filepath=Cargo.toml - > Cargo.toml
                rm Cargo.toml.new
                taplo get -f Cargo.toml features.default
            - name: Build source package
              uses: PyO3/maturin-action@v1
              with:
                  working-directory: api/python/slint
                  command: sdist
                  args: --out dist
            - uses: actions/upload-artifact@v4
              with:
                name: python-package-distributions-source
                path: api/python/slint/dist/*.tar.gz

    publish-to-test-pypi:
        if: ${{ github.event.inputs.release != 'true' }}
        name: >-
            Publish Python 🐍 distribution 📦 to Test PyPI
        needs: [build_binaries, ios_binaries, build_source_package]
        runs-on: ubuntu-latest
        environment:
            name: testpypi
            url: https://test.pypi.org/p/slint
        permissions:
            id-token: write  # IMPORTANT: mandatory for trusted publishing
        steps:
            - uses: actions/download-artifact@v5
              with:
                pattern: python-package-distributions-*
                path: dist
                merge-multiple: true
            - name: Publish distribution 📦 to Test PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                repository-url: https://test.pypi.org/legacy/

    publish-to-pypi:
      if: ${{ github.event.inputs.release == 'true' }}
      name: >-
          Publish Python 🐍 distribution 📦 to PyPI
      needs: [build_binaries, ios_binaries, build_source_package]
      runs-on: ubuntu-latest
      environment:
          name: pypi
          url: https://test.pypi.org/p/slint
      permissions:
          id-token: write  # IMPORTANT: mandatory for trusted publishing
      steps:
          - uses: actions/download-artifact@v5
            with:
              pattern: python-package-distributions-*
              path: dist
              merge-multiple: true
          - name: Publish distribution 📦 to PyPI
            uses: pypa/gh-action-pypi-publish@release/v1
            with:
              verbose: true


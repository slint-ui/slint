# Copyright Â© SixtyFPS GmbH <info@sixtyfps.io>
# SPDX-License-Identifier: (GPL-3.0-only OR LicenseRef-SixtyFPS-commercial)

# Build various demo binaries, c++ packages and documentation and publish them on the website
name: Nightly snapshot

on:
  workflow_dispatch:
    inputs:
      private:
        type: boolean
        default: "true"
        required: false
        description: "Private build? True means artefacts are only built. False means the artefacts are published (docs, vscode extension) to the web/marketplace"
      release:
        type: boolean
        default: "false"
        required: false
        description: "Enable options for building binaries for a release (i.e. don't have a -nightly suffix for the extension)"

  schedule:
    - cron: '0 4 * * *'

jobs:
  sixtyfps-viewer-binary:
    uses: sixtyfpsui/sixtyfps/.github/workflows/sixtyfps_tool_binary.yaml@master
    with:
      program: "sixtyfps-viewer"
  sixtyfps-lsp-binary:
    uses: sixtyfpsui/sixtyfps/.github/workflows/sixtyfps_tool_binary.yaml@master
    with:
      program: "sixtyfps-lsp"
  docs:
    uses: sixtyfpsui/sixtyfps/.github/workflows/build_docs.yaml@master
  wasm_demo:
    uses: sixtyfpsui/sixtyfps/.github/workflows/wasm_demos.yaml@master
  wasm:
    uses: sixtyfpsui/sixtyfps/.github/workflows/wasm_editor_and_interpreter.yaml@master
  cpp_package:
    uses: sixtyfpsui/sixtyfps/.github/workflows/cpp_package.yaml@master

  build_vscode_lsp_linux_windows:
    env:
      SIXTYFPS_NO_QT: 1
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            toolchain: x86_64-unknown-linux-gnu
            binary_built: sixtyfps-lsp
            target_dir:
            artifact_name: sixtyfps-lsp-x86_64-unknown-linux-gnu
          - os: windows-latest
            toolchain: x86_64-pc-windows-gnu
            binary_built: sixtyfps-lsp.exe
            target_dir:
            artifact_name: sixtyfps-lsp-x86_64-pc-windows-gnu.exe
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Install latest stable
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          target: ${{ matrix.toolchain }}
    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
    - name: Build LSP
      uses: actions-rs/cargo@v1
      with:
          command: build
          toolchain: stable
          args: --target ${{ matrix.toolchain }} --release -p sixtyfps-lsp
    - name: Create artifact directory
      run: |
          mkdir bin
          cp target/${{ matrix.toolchain }}/release/${{ matrix.binary_built }} bin/${{ matrix.artifact_name }}
    - name: "Upload LSP Artifact"
      uses: actions/upload-artifact@v2
      with:
          name: vscode-lsp-binary-${{ matrix.toolchain }}
          path: |
              bin

  build_vscode_lsp_macos_x86_64:
    env:
      SIXTYFPS_NO_QT: 1
    runs-on: macOS-11
    steps:
    - uses: actions/checkout@v2
    - name: Install latest stable
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          target: x86_64-apple-darwin
    - name: Install cargo-bundle
      run: cargo install cargo-bundle
    - name: Build Main LSP Bundle
      working-directory: tools/lsp
      run: cargo bundle --release
    - name: Create artifact directory
      run: |
          mkdir bin
          cp -a target/release/bundle/osx/SixtyFPS\ Live\ Preview.app bin
    - name: "Upload LSP Artifact"
      uses: actions/upload-artifact@v2
      with:
          name: vscode-lsp-binary-x86_64-apple-darwin
          path: |
              bin

  build_vscode_lsp_macos_aarch64:
    env:
      SIXTYFPS_NO_QT: 1
    runs-on: macOS-11
    steps:
    - uses: actions/checkout@v2
    - name: Install latest stable
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          target: aarch64-apple-darwin
    - name: Build AArch64 LSP
      uses: actions-rs/cargo@v1
      with:
          command: build
          toolchain: stable
          args: --target aarch64-apple-darwin --release -p sixtyfps-lsp
    - name: Create artifact directory
      run: |
          mkdir bin
          cp -a target/aarch64-apple-darwin/release/sixtyfps-lsp bin/sixtyfps-lsp-aarch64-apple-darwin
    - name: "Upload LSP Artifact"
      uses: actions/upload-artifact@v2
      with:
          name: vscode-lsp-binary-aarch64-apple-darwin
          path: |
              bin

  build_vscode_lsp_macos_bundle:
    needs: [build_vscode_lsp_macos_x86_64, build_vscode_lsp_macos_aarch64]
    runs-on: macOS-11
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: vscode-lsp-binary-x86_64-apple-darwin
    - uses: actions/download-artifact@v2
      with:
        name: vscode-lsp-binary-aarch64-apple-darwin
        path: bin
    - name: Add macOS AArch64 binary to bundle
      run: |
        lipo -create -output tmp SixtyFPS\ Live\ Preview.app/Contents/MacOS/sixtyfps-lsp bin/sixtyfps-lsp-aarch64-apple-darwin
        mv tmp SixtyFPS\ Live\ Preview.app/Contents/MacOS/sixtyfps-lsp
        rm -rf bin
    - name: "Upload LSP macOS bundle Artifact"
      uses: actions/upload-artifact@v2
      with:
          name: vscode-lsp-binary-darwin
          path: .

  build_vscode_cross_linux_lsp:
    env:
      SIXTYFPS_NO_QT: 1
    strategy:
      matrix:
        target:
          - armv7-unknown-linux-gnueabihf
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install latest stable
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
    - name: Build LSP
      uses: actions-rs/cargo@v1
      with:
          use-cross: true
          command: build
          args: --target ${{ matrix.target }} --release -p sixtyfps-lsp
    - name: Create artifact directory
      run: |
          mkdir bin
          cp target/${{ matrix.target }}/release/sixtyfps-lsp bin/sixtyfps-lsp-${{ matrix.target }}
    - name: "Upload LSP Artifact"
      uses: actions/upload-artifact@v2
      with:
          name: vscode-lsp-binary-${{ matrix.target }}
          path: |
              bin

  build_vscode_extension:
    needs: [build_vscode_lsp_linux_windows, build_vscode_lsp_macos_bundle, build_vscode_cross_linux_lsp]
    runs-on: macOS-11
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: vscode-lsp-binary-x86_64-unknown-linux-gnu
        path: vscode_extension/bin
    - uses: actions/download-artifact@v2
      with:
        name: vscode-lsp-binary-x86_64-pc-windows-gnu
        path: vscode_extension/bin
    - uses: actions/download-artifact@v2
      with:
        name: vscode-lsp-binary-darwin
        path: vscode_extension/bin
    - uses: actions/download-artifact@v2
      with:
        name: vscode-lsp-binary-armv7-unknown-linux-gnueabihf
        path: vscode_extension/bin
    - name: Fix permissions
      run: chmod 755 vscode_extension/bin/* vscode_extension/bin/*.app/Contents/MacOS/*
    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12'
    - name: "Prepare meta-data files for nightly package"
      env:
        RELEASE_INPUT: ${{ github.event.inputs.release }}
      working-directory: vscode_extension
      run: |
        if [ "$RELEASE_INPUT" != "true" ]; then
          ../scripts/prepare_vscode_nightly.sh
        fi
    - name: "npm install"
      working-directory: vscode_extension
      run: npm install
    - name: Build package and optionally publish to Open VSX Registry
      id: publishToOpenVSX
      uses: HaaLeo/publish-vscode-extension@v0
      with:
        pat: ${{ secrets.OPENVSX_PAT }}
        dryRun: ${{ github.event.inputs.private == 'true' }}
        packagePath: vscode_extension
    - name: Publish to Visual Studio Marketplace
      if: ${{ github.event.inputs.private != 'true' }}
      uses: HaaLeo/publish-vscode-extension@v0
      with:
        pat: ${{ secrets.VSCODE_MARKETPLACE_PAT }}
        registryUrl: https://marketplace.visualstudio.com
        extensionFile: ${{ steps.publishToOpenVSX.outputs.vsixPath }}
        packagePath: ''
    - name: "Upload extension artifact"
      uses: actions/upload-artifact@v2
      with:
          name: sixtyfps-vscode.zip
          path: |
              ${{ steps.publishToOpenVSX.outputs.vsixPath }}

  publish_artifacts:
    if: github.event.inputs.private != 'true' && github.ref == 'refs/heads/master'
    needs: [docs, wasm_demo, wasm]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: docs
      - uses: actions/download-artifact@v2
        with:
          name: wasm
      - uses: actions/download-artifact@v2
        with:
          name: wasm_demo
      - name: Publish Docs and Demos
        run: |
            git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
            git config --global user.name "${GITHUB_ACTOR}"
            git clone "https://tronical:${{ secrets.WWW_PUBLISH_SECRET }}@github.com/sixtyfpsui/www" --depth 1
            cd www

            target_branch=${GITHUB_REF##*/}

            rm -rf snapshots/$target_branch/demos
            mkdir -p snapshots/$target_branch/demos

            for demo_subdir in gallery, printerdemo,rust printerdemo_old,rust todo,rust slide_puzzle, memory, imagefilter, plotter,; do
                IFS=',' read demo subdir <<< "${demo_subdir}"

                mkdir -p snapshots/$target_branch/demos/$demo
                cp -a ../$demo/$subdir/{pkg,index.html} snapshots/$target_branch/demos/$demo/
                rm snapshots/$target_branch/demos/$demo/pkg/.gitignore
            done

            git add snapshots/$target_branch/demos
            git add -u snapshots/$target_branch/demos

            rm -rf snapshots/$target_branch/wasm-interpreter
            mkdir -p snapshots/$target_branch/wasm-interpreter
            cp -a ../api/sixtyfps-wasm-interpreter/pkg/* ./snapshots/$target_branch/wasm-interpreter/
            git add snapshots/$target_branch/wasm-interpreter
            git add -u snapshots/$target_branch/wasm-interpreter

            rm -rf snapshots/$target_branch/editor
            mkdir -p snapshots/$target_branch/editor
            cp -a ../tools/online_editor/dist/* snapshots/$target_branch/editor/
            git add snapshots/$target_branch/editor
            git add -u snapshots/$target_branch/editor

            rm -rf snapshots/$target_branch/docs
            mkdir -p snapshots/$target_branch/docs
            mkdir -p snapshots/$target_branch/docs/cpp
            cp -a ../target/cppdocs/html/* snapshots/$target_branch/docs/cpp/
            mkdir -p snapshots/$target_branch/docs/rust
            cp -a ../target/doc/* snapshots/$target_branch/docs/rust/
            mkdir -p snapshots/$target_branch/docs/tutorial/rust
            cp -a ../docs/tutorial/rust/book/html/* snapshots/$target_branch/docs/tutorial/rust
            mkdir -p snapshots/$target_branch/docs/tutorial/cpp
            cp -a ../docs/tutorial/cpp/book/html/* snapshots/$target_branch/docs/tutorial/cpp
            mkdir -p snapshots/$target_branch/docs/node
            cp -a ../api/sixtyfps-node/docs/* snapshots/$target_branch/docs/node/
            git add snapshots/$target_branch/docs
            git add -u snapshots/$target_branch/docs

            git commit --message "Update $NAME from $GITHUB_REPOSITORY" --message "Pull web demos and C++/Rust reference docs from commit $GITHUB_SHA ($GITHUB_REF)"
            git push origin master


# Copyright Â© SixtyFPS GmbH <info@sixtyfps.io>
# SPDX-License-Identifier: (GPL-3.0-only OR LicenseRef-SixtyFPS-commercial)

name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build_and_test:
    env:
      DYLD_FRAMEWORK_PATH: /Users/runner/work/sixtyfps/Qt/5.15.2/clang_64/lib
      QT_QPA_PLATFORM: offscreen
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: false
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-11, windows-latest]
        rust_version: [stable, 1.54]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-20.04'
      run: sudo apt-get install libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
    - name: Cache Qt
      if: matrix.os != 'windows-latest'
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ~/work/sixtyfps/Qt
        key: ${{ runner.os }}-${{ github.job }}-Qt5.15.2
    - name: Install Qt
      if: matrix.os != 'windows-latest'
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.2'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Set default style
      if: matrix.os != 'windows-latest'
      run: |
          echo "SIXTYFPS_STYLE=native" >> $GITHUB_ENV
    - name: Set default style
      if: matrix.os == 'windows-latest'
      run: |
          echo "SIXTYFPS_STYLE=fluent" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "SIXTYFPS_NO_QT=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12'
    - id: nodeversion
      run: |
          echo "::set-output name=node-version::$(node --version)"
    - name: Cache native node libraries
      uses: actions/cache@v2
      if: matrix.os == 'windows-latest'
      with:
        path: ~/node-gyp/cache
        key: ${{ runner.os }}-${{ github.job }}-${{ steps.nodeversion.outputs.node-version }}
    - name: Ensure node-gyp cache is populated
      if: matrix.os == 'windows-latest'
      run: |
          npm install -g node-gyp
          node-gyp install
    - name: Install latest stable
      uses: actions-rs/toolchain@v1
      with:
          toolchain: ${{ matrix.rust_version }}
          profile: minimal
    - uses: Swatinem/rust-cache@v1
      with:
          key: ${{ steps.nodeversion.outputs.node-version }} # The cached rustc artifacts contain linking information where to find node.lib, which is in a versioned directory.
    - name: Build
      uses: actions-rs/cargo@v1
      with:
          command: build
          args: --verbose --all-features --workspace
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
          command: test
          args: --verbose
  cpp_test_driver:
    env:
      DYLD_FRAMEWORK_PATH: /Users/runner/work/sixtyfps/Qt/5.15.2/clang_64/lib
      QT_QPA_PLATFORM: offscreen
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: false
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-11, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-20.04'
      run: sudo apt-get install libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
    - name: Cache Qt
      if: matrix.os != 'windows-latest'
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ~/work/sixtyfps/Qt
        key: ${{ runner.os }}-${{ github.job }}-Qt5.15.2
    - name: Install Qt
      if: matrix.os != 'windows-latest'
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.2'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Set default style
      if: matrix.os != 'windows-latest'
      run: |
          echo "SIXTYFPS_STYLE=native" >> $GITHUB_ENV
    - name: Set default style
      if: matrix.os == 'windows-latest'
      run: |
          echo "SIXTYFPS_STYLE=fluent" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "SIXTYFPS_NO_QT=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-${{ github.job }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
    - name: Cache cargo index
      uses: actions/cache@v2
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-${{ github.job }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
    - name: Cache cargo build
      if: matrix.os != 'macOS-11'
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-${{ github.job }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}-${{ steps.nodeversion.outputs.node-version }}
    - name: Install latest stable
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
    - name: Build
      uses: actions-rs/cargo@v1
      with:
          command: build
          args: --lib -p sixtyfps-cpp --features testing
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
          command: test
          args: --verbose -p  test-driver-cpp
    - name: Clean cache # Otherwise the cache is much too big
      if: matrix.os == 'ubuntu-20.04'
      run: |
          du -hs target
          rm -rf target/*/*/*sixtyfps*
          rm -rf target/*/*sixtyfps*
          rm -rf target/*/*/test*
          rm -rf target/*/*test*
          du -hs target
    - name: Clean cache # Otherwise the cache is much too big
      if: matrix.os == 'windows-latest'
      run: |
          du -hs target
          rm -Recurse -Force target/*/incremental
          rm -Recurse -Force target/*/*/*sixtyfps*
          rm -Recurse -Force target/*/*sixtyfps*
          rm -Recurse -Force target/*/*/test*
          rm -Recurse -Force target/*/*test*
          du -hs target

  cpp_cmake:
    env:
      DYLD_FRAMEWORK_PATH: /Users/runner/work/sixtyfps/Qt/6.2.1/clang_64/lib
      QT_QPA_PLATFORM: offscreen
      CARGO_INCREMENTAL: false
    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-11, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-20.04'
      run: sudo apt-get install libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
    - name: Cache Qt
      if: matrix.os != 'windows-latest'
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ~/work/sixtyfps/Qt
        key: ${{ runner.os }}-${{ github.job }}-cpp-qt
    - name: Install Qt (Ubuntu)
      uses: jurplel/install-qt-action@v2
      if: matrix.os == 'ubuntu-20.04'
      with:
        version: 5.15.2
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Install Qt (Windows, uncached)
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v2
      with:
        version: 6.2.1
    - name: Install Qt (cached)
      if: matrix.os != 'ubuntu-20.04' && matrix.os != 'windows-latest'
      uses: jurplel/install-qt-action@v2
      with:
        version: 6.2.1
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
    - name: Install latest stable
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          override: true
    - uses: Swatinem/rust-cache@v1
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Select MSVC (windows)
      run: |
        echo "CC=cl.exe" >> $GITHUB_ENV
        echo "CXX=cl.exe" >> $GITHUB_ENV
      if: matrix.os == 'windows-latest'
    - name: Enable test coverage for resource embedding in C++ when building examples
      if: matrix.os == 'ubuntu-20.04'
      run: |
          echo "SIXTYFPS_EMBED_RESOURCES=true" >> $GITHUB_ENV
    - name: C++ Build
      uses: lukka/run-cmake@v3.4
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: CMakeLists.txt
        cmakeAppendedArgs: '-DBUILD_TESTING=ON -DSIXTYFPS_BUILD_EXAMPLES=ON -DCMAKE_BUILD_TYPE=Debug'
        buildDirectory: ${{ runner.workspace }}/cppbuild
        buildWithCMakeArgs: '--config Debug'
    - name: ctest
      working-directory: ${{ runner.workspace }}/cppbuild
      run: ctest --verbose

  docs:
    uses: sixtyfpsui/sixtyfps/.github/workflows/build_docs.yaml@master

  wasm:
    uses: sixtyfpsui/sixtyfps/.github/workflows/wasm_editor_and_interpreter.yaml@master   

  wasm_demo:
    uses: sixtyfpsui/sixtyfps/.github/workflows/wasm_demos.yaml@master   

  # Checkout a old version of the tests and example, then run the syntax_updater on them
  # and check that it worked with the interpreter test.
  updater_test:
    env:
      SIXTYFPS_NO_QT: 1
      CARGO_INCREMENTAL: false
      # There were binding loops with layout in our demo, so ignore theses errors
      SIXTYFPS_INTERPRETER_ERROR_WHITELIST: "is part of a binding loop"
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        from_version: ['0.0.5', '0.0.6', '0.1.0']
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install Linux Dependencies
      run: sudo apt-get install libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
    - name: Install latest stable
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          profile: minimal
    - uses: Swatinem/rust-cache@v1
    - name: Checkout old version
      run: |
          git checkout v${{ matrix.from_version }} --no-overlay -- examples
          git checkout v${{ matrix.from_version }} --no-overlay -- tests/cases
          # Remove printerdemo_old from Cargo.toml because this directory was not there in 0.0.5
          sed -i "/printerdemo_old/d" Cargo.toml
    - name: Remove newer examples
      run: |
          # Remove imagefilter and plotter from Cargo.toml because these directories were not there before 0.1.1
          sed -i "/imagefilter/d;/plotter/d" Cargo.toml
      if: matrix.from_version == '0.0.5' || matrix.from_version == '0.0.6' || matrix.from_version == '0.1.0'
    - name: "Commit old checkout"
      run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          git commit -a -m "REVERT TESTS TO v${{ matrix.from_version }}"
    - name: run the updater
      run: |
        cargo run --bin syntax_updater -- --from ${{ matrix.from_version }} -i examples/*/*.60
        cargo run --bin syntax_updater -- --from ${{ matrix.from_version }} -i examples/*/*/*.60
        cargo run --bin syntax_updater -- --from ${{ matrix.from_version }} -i tests/cases/*.60
        cargo run --bin syntax_updater -- --from ${{ matrix.from_version }} -i tests/cases/*/*.60
    - name: Show the diff
      run: git diff
    - name: test
      uses: actions-rs/cargo@v1
      with:
          command: test
          # skip example_printerdemo_old because that was not in 0.0.5
          # skip test_interpreter_examples_rotate because the internal rotate element was removed
          args: --bin test-driver-interpreter -- --skip example_printerdemo_old --skip test_interpreter_examples_rotate

# Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
# SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial

name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build_and_test:
    env:
      DYLD_FRAMEWORK_PATH: /Users/runner/work/slint/Qt/5.15.2/clang_64/lib
      QT_QPA_PLATFORM: offscreen
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: false
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2022]
        rust_version: [stable, "1.60"]
        include:
          - os: windows-2022
            extra_args: "--exclude slint-node --exclude test-driver-nodejs"
        exclude:
          - os: macos-11
            rust_version: "1.60"

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/install-linux-dependencies
    - name: Install Qt
      if: runner.os != 'Windows'
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
    - name: Set default style
      if: matrix.os != 'windows-2022'
      run: |
          echo "SLINT_STYLE=native" >> $GITHUB_ENV
    - name: Set default style
      if: matrix.os == 'windows-2022'
      run: |
          echo "SLINT_STYLE=fluent" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "SLINT_NO_QT=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - uses: ./.github/actions/install-nodejs
      id: node-install
    - uses: ./.github/actions/setup-rust
      with:
        key: x-v2-${{ steps.node-install.outputs.node-version }} # the cache key consists of a manually bumpable version and the node version, as the cached rustc artifacts contain linking information where to find node.lib, which is in a versioned directory.
    - name: Build
      uses: actions-rs/cargo@v1
      with:
          command: build
          args: --verbose --all-features --workspace ${{ matrix.extra_args }} --exclude test-driver-cpp --exclude mcu-board-support --exclude printerdemo_mcu  # mcu backend requires nightly
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
          command: test
          args: --verbose --all-features --workspace ${{ matrix.extra_args }} --exclude test-driver-cpp --exclude mcu-board-support --exclude printerdemo_mcu   # mcu backend requires nightly

  cpp_test_driver:
    env:
      DYLD_FRAMEWORK_PATH: /Users/runner/work/slint/Qt/5.15.2/clang_64/lib
      QT_QPA_PLATFORM: offscreen
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: false
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2022]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/install-linux-dependencies
      with:
        force-gcc-10: true
    - name: Install Qt
      if: runner.os != 'Windows'
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
    - name: Set default style
      if: runner.os != 'Windows'
      run: echo "SLINT_STYLE=native" >> $GITHUB_ENV
    - name: Set default style
      if: runner.os == 'Windows'
      run: |
          echo "SLINT_STYLE=fluent" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "SLINT_NO_QT=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - uses: ./.github/actions/setup-rust
    - name: Build
      uses: actions-rs/cargo@v1
      with:
          command: build
          args: --lib -p slint-cpp --features testing,backend-qt
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
          command: test
          args: --verbose -p  test-driver-cpp --features slint-cpp/backend-qt

  cpp_cmake:
    env:
      DYLD_FRAMEWORK_PATH: /Users/runner/work/slint/Qt/6.2.1/clang_64/lib
      QT_QPA_PLATFORM: offscreen
      CARGO_INCREMENTAL: false
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/install-linux-dependencies
      with:
        force-gcc-10: true
    - name: Install Qt (Ubuntu)
      uses: jurplel/install-qt-action@v3
      if: matrix.os == 'ubuntu-20.04'
      with:
        version: 5.15.2
    - name: Install Qt (cached)
      if: matrix.os != 'ubuntu-20.04'
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.2.1
    - uses: ./.github/actions/setup-rust
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Select MSVC (windows)
      run: |
        echo "CC=cl.exe" >> $GITHUB_ENV
        echo "CXX=cl.exe" >> $GITHUB_ENV
      if: matrix.os == 'windows-2022'
    - name: Enable test coverage for resource embedding in C++ when building examples
      if: matrix.os == 'ubuntu-20.04'
      run: |
          echo "SLINT_EMBED_RESOURCES=true" >> $GITHUB_ENV
    - name: C++ Build
      uses: lukka/run-cmake@v3.4
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: CMakeLists.txt
        cmakeAppendedArgs: '-DBUILD_TESTING=ON -DSLINT_BUILD_EXAMPLES=ON -DCMAKE_BUILD_TYPE=Debug'
        buildDirectory: ${{ runner.workspace }}/cppbuild
        buildWithCMakeArgs: '--config Debug'
    - name: ctest
      working-directory: ${{ runner.workspace }}/cppbuild
      run: ctest --verbose
    - name: cpack
      working-directory: ${{ runner.workspace }}/cppbuild
      run: cmake --build . --config Debug --target package
    - name: "Create C++ packages artefact"
      uses: actions/upload-artifact@v3
      with:
          name: cpp_bin-${{ matrix.os }}
          path: ${{ runner.workspace }}/cppbuild/Slint-cpp-*

  cpp_package_test:
    needs: [cpp_cmake]
    runs-on: ubuntu-20.04
    env:
      DYLD_FRAMEWORK_PATH: /Users/runner/work/slint/Qt/6.2.1/clang_64/lib
      QT_QPA_PLATFORM: offscreen
      CARGO_INCREMENTAL: false
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/install-linux-dependencies
      with:
        force-gcc-10: true
    - name: Install Qt (Ubuntu)
      uses: jurplel/install-qt-action@v3
      with:
        version: 5.15.2
    - uses: actions/download-artifact@v3
      with:
        name: cpp_bin-ubuntu-20.04
        path: cpp-package
    - name: unpack package
      run: |
          mkdir package
          tar xvf cpp-package/Slint-cpp-*.tar.gz -C package --strip-components=1
          echo "CMAKE_PREFIX_PATH=`pwd`/package" >> $GITHUB_ENV
    # Build the examples with a config different than the package (which is debug)
    - name: Build examples
      uses: lukka/run-cmake@v3.4
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: examples/CMakeLists.txt
        cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=Release -DSLINT_FEATURE_INTERPRETER=1 -DSLINT_FEATURE_BACKEND_QT=1'
        buildDirectory: ${{ runner.workspace }}/examples/build
        buildWithCMakeArgs: '--config Release'

  # test to compile the mcu backend with nightly and for the armv6 target (no_std)
  mcu:
    env:
      SLINT_EMBED_GLYPHS: 1
      SLINT_FONT_SIZES: 8,11,10,12,13,14,15,16,18,20,22,24,32
      SLINT_PROCESS_IMAGES: 1
      RUSTFLAGS: --cfg slint_int_coord
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/setup-rust
      with:
        toolchain: nightly
        target: thumbv6m-none-eabi
    - name: Check
      uses: actions-rs/cargo@v1
      with:
          command: check
          args: --target=thumbv6m-none-eabi -p printerdemo_mcu --no-default-features --features=mcu-board-support/pico-st7789

  docs:
    uses: ./.github/workflows/build_docs.yaml

  wasm:
    uses: ./.github/workflows/wasm_editor_and_interpreter.yaml

  wasm_demo:
    uses: ./.github/workflows/wasm_demos.yaml

  # Checkout a old version of the tests and example, then run the syntax_updater on them
  # and check that it worked with the interpreter test.
  updater_test:
    env:
      SLINT_NO_QT: 1
      CARGO_INCREMENTAL: false
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        from_version: ['0.3.0']
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/install-linux-dependencies
    - uses: ./.github/actions/setup-rust
    - name: Checkout old version
      run: |
          git checkout v${{ matrix.from_version }} --no-overlay -- examples
          git checkout v${{ matrix.from_version }} --no-overlay -- tests/cases
          git checkout v${{ matrix.from_version }} --no-overlay -- tests/helper_components
          # Remove examples from the workspace because they may no longer exist or their Cargo.toml might prevent the build of the updater
          sed -i "/examples/d" Cargo.toml
    # - name: "Commit old checkout"
    #   run: |
    #       git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
    #       git config --global user.name "${GITHUB_ACTOR}"
    #       git commit -a -m "REVERT TESTS TO v${{ matrix.from_version }}"
    # - name: run the updater
    #   run: |
    #     cargo run --bin syntax_updater -- --from ${{ matrix.from_version }} -i examples/*/*.slint
    #     cargo run --bin syntax_updater -- --from ${{ matrix.from_version }} -i examples/*/*/*.slint
    #     cargo run --bin syntax_updater -- --from ${{ matrix.from_version }} -i tests/cases/*.slint
    #     cargo run --bin syntax_updater -- --from ${{ matrix.from_version }} -i tests/cases/*/*.slint
    # - name: Show the diff
    #   run: git diff
    - name: test
      uses: actions-rs/cargo@v1
      with:
          command: test
          args: --bin test-driver-interpreter

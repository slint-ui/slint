# Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
# SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial

[package]
name = "slint"
version = "0.2.6"
authors = ["Slint Developers <info@slint-ui.com>"]
edition = "2021"
license = "GPL-3.0-only OR LicenseRef-Slint-commercial"
description = "Slint Rust API"
repository = "https://github.com/slint-ui/slint"
homepage = "https://slint-ui.com"
categories = ["gui", "rendering::engine"]
keywords = ["gui", "toolkit", "graphics", "design", "ui"]
rust-version = "1.60"

[lib]
path = "lib.rs"

[features]

default = [
  "std",
  "eventloop-winit",
  "renderer-femtovg",
  "backend-qt",
  "compat-0-2-0",
]

## Mandatory feature:
## This feature is required to keep the compatibility with Slint 0.2.0
## Newer patch version may put current functionality behind a new feature
## that would be enabled by default only if this feature was added
compat-0-2-0 = []

## Enable use of the Rust standard library.
std = ["i-slint-core/std"]

#! ### Backends

## The Qt backend feature uses Qt for the windowing system integration and rendering.
## This backend is required to use the `native` style.
## It requires Qt 5.15 or later to be installed. If Qt is not installed, the
## backend will not be operational
backend-qt = ["i-slint-backend-selector/i-slint-backend-qt", "std"]

# The following backend-gl-* are just alias for compatibility
backend-gl-all = ["eventloop-winit", "renderer-femtovg"]
backend-gl-x11 = ["eventloop-winit-x11", "renderer-femtovg"]
backend-gl-wayland = ["eventloop-winit-wayland", "renderer-femtovg"]

## The the `winit` crate is used for the event loop and windowing system integration.
## With this feature, all windowing systems are supported. For a smaller build, omit
## this feature and select one of the other specific `eventloop-winit-XX` features.
eventloop-winit = ["i-slint-backend-selector/eventloop-winit", "std"]

## Simliar to `eventloop-winit` this enables the winit based event loop but only
## with support for the X Window System on Unix.
eventloop-winit-x11 = ["i-slint-backend-selector/eventloop-winit-x11", "std"]

## Simliar to `eventloop-winit` this enables the winit based event loop but only
## with support for the Wayland window system on Unix.
eventloop-winit-wayland = [
  "i-slint-backend-selector/eventloop-winit-wayland",
  "std",
]

## This feature is an alias for `backend-qt`
eventloop-qt = ["backend-qt"]

## The `femtovg` crate is available for rendering.
renderer-femtovg = ["i-slint-backend-selector/renderer-femtovg", "std"]

## The Skia based rendering engine.
renderer-skia = ["i-slint-backend-selector/renderer-skia", "std"]

## This feature makes the `slint::platform::swrenderer` module available in the public API.
## Use this to render with Slint for example on MCUs, when you provide you own `slint::platform::Platform`.
## Alternatively, enabling this feature alongside `eventloop-winit` enables selecting the software
## renderer at run-time when using winit, via the `SLINT_BACKEND=software` environment variable.
renderer-software = [
  "i-slint-core/swrenderer",
  "i-slint-backend-selector/renderer-software",
]

## This feature is an alias for `backend-qt`
renderer-qt = ["backend-qt"]

## This feature enables floating point arithmetic emulation using the [libm](https://crates.io/crates/libm) crate. Use this
## in MCU environments where the processor does not support floating point arithmetic.
libm = ["i-slint-core/libm"]

## Slint uses internally some `thread_local` state.
##
## When the `std` feature is enabled, Slint can use [`std::thread_local!`], but when in a `#![no_std]`
## environment, we need a replacement. Using this feature, Slint will just use static variable
## disregarding Rust's Send and Sync safety
##
## **Safety** : You must ensure that there is only one single thread that call into the Slint API
unsafe-single-threaded = ["i-slint-core/unsafe-single-threaded"]

[dependencies]
i-slint-core = { version = "=0.2.6", path = "../../../internal/core", default-features = false }
slint-macros = { version = "=0.2.6", path = "../macros" }
i-slint-backend-selector = { version = "=0.2.6", path = "../../../internal/backends/selector" }

const-field-offset = { version = "0.1.2", path = "../../../helper_crates/const-field-offset" }
document-features = { version = "0.2.0", optional = true }
vtable = { version = "0.1.6", path = "../../../helper_crates/vtable" }

once_cell = { version = "1.5", default-features = false, features = ["alloc"] }
pin-weak = { version = "1.1", default-features = false }
num-traits = { version = "0.2", default-features = false }

## If enabled, calls of `debug()` in `.slint` files use to the `debug!()` macro
## of the `log` crate instead of just `println!()`.
log = { version = "0.4.17", optional = true }

[dev-dependencies]
slint-build = { path = "../build" }

[package.metadata.docs.rs]
rustdoc-args = [
  "--html-in-header",
  "docs/resources/slint-docs-preview.html",
  "--html-in-header",
  "docs/resources/slint-docs-highlight.html",
]
features = ["document-features", "renderer-software"]

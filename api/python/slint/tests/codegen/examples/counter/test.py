# Copyright Â© SixtyFPS GmbH <info@slint.dev>
# SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0

# Generated by slint.codegen from test.slint
from __future__ import annotations

import importlib.resources as _resources
import os
import types
from contextlib import nullcontext as _nullcontext
from pathlib import Path
from typing import Any

import slint

__all__ = [
    "OptionalDemo",
    "OptionalFloat",
    "OptionalBool",
    "OptionalInt",
    "OptionalString",
    "OptionalEnum",
]

_MODULE_DIR = Path(__file__).parent

_SLINT_RESOURCE = "test.slint"


def _load() -> types.SimpleNamespace:
    """Load the compiled Slint module for this package."""
    package = __package__ or (__spec__.parent if __spec__ else None)
    if package:
        ctx = _resources.as_file(_resources.files(package).joinpath(_SLINT_RESOURCE))
    else:
        ctx = _nullcontext(Path(__file__).with_name(_SLINT_RESOURCE))
    with ctx as slint_path:
        include_paths: list[os.PathLike[Any] | Path] | None = None
        library_paths: dict[str, os.PathLike[Any] | Path] | None = None
        return slint.load_file(
            path=slint_path,
            quiet=True,
            style=None,
            include_paths=include_paths,
            library_paths=library_paths,
            translation_domain=None,
        )


_module = _load()

OptionalDemo = _module.OptionalDemo
OptionalFloat = _module.OptionalFloat
OptionalBool = _module.OptionalBool
OptionalInt = _module.OptionalInt
OptionalString = _module.OptionalString
OptionalEnum = _module.OptionalEnum

# Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
# SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial

[package]
name = "slint-interpreter"
version = "0.2.1"
authors = ["Slint Developers <info@slint-ui.com>"]
edition = "2021"
license = "GPL-3.0-only OR LicenseRef-Slint-commercial"
description = "Interpreter library for Slint"
repository = "https://github.com/slint-ui/slint"
homepage = "https://slint-ui.com"
categories = ["gui", "rendering::engine"]
keywords = ["gui", "toolkit", "graphics", "design", "ui"]

[lib]
path = "lib.rs"

[features]

default = ["std", "backend-gl-all", "backend-qt", "compat-0-2-0"]

## Mandatory feature:
## This feature is required to keep the compatibility with Slint 0.2.0
## Newer patch version may put current functionality behind a new feature
## that would be enabled by default only if this feature was added
compat-0-2-0 = []

## enable the [`print_diagnostics`] function to show diagnostic in the console output
display-diagnostics = ["i-slint-compiler/display-diagnostics"]

# (internal) export C++ FFI functions
ffi = ["spin_on", "i-slint-core/ffi"]

## Enable use of the Rust standard library.
std = ["i-slint-core/std"]

#! ### Backends

## The Qt backend feature uses Qt for the windowing system integration and rendering.
## This backend is required to use the `native` style.
## It requires Qt 5.15 or later to be installed. If Qt is not installed, the
## backend will not be operational
backend-qt = ["i-slint-backend-selector/i-slint-backend-qt", "i-slint-backend-selector/rtti-qt", "std"]

## The GL backend uses the `winit` crate for the windowing system integration,
## and the `femtovg` crate for the rendering. With this feature, all windowing
## systems are supported. For a smaller build, omit this feature and select
## one of the other specific `backend-gl-XX` features.
backend-gl-all = ["i-slint-backend-selector/backend-gl-all", "i-slint-backend-selector/rtti-gl", "std"]
## Simliar to `backend-gl-all` this enables the GL backend but only with support for the
## X Window System on Unix.
backend-gl-x11 = ["i-slint-backend-selector/backend-gl-x11", "i-slint-backend-selector/rtti-gl", "std"]
## Simliar to `backend-gl-all` this enables the GL backend but only with support for the
## Wayland window system on Unix.
backend-gl-wayland = ["i-slint-backend-selector/backend-gl-wayland", "i-slint-backend-selector/rtti-gl", "std"]


[dependencies]
i-slint-compiler = { version = "=0.2.1", path = "../compiler" }
i-slint-core = { version = "=0.2.1", path = "../core", features = ["rtti"] }
i-slint-backend-selector = { version = "=0.2.1", path = "../../internal/backends/selector" }

vtable = { version = "0.1.6", path="../../helper_crates/vtable" }

derive_more = "0.99.5"
generativity = "1"
lyon_path = { version = "0.17.3" }
once_cell = "1.5"
thiserror = "1"
document-features = { version = "0.2.0", optional = true }

[dependencies.spin_on]
version = "0.1"
optional = true

[target.'cfg(target_arch = "wasm32")'.dependencies]
i-slint-backend-gl = { version = "=0.2.1", path = "../../internal/backends/gl" }

[dev-dependencies]
i-slint-backend-testing = { path = "../../internal/backends/testing" }

spin_on = "0.1"

[package.metadata.docs.rs]
features = ["display-diagnostics", "document-features"]

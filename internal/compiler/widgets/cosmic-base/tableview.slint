// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.2 OR LicenseRef-Slint-commercial

import { CosmicPalette, CosmicFontSettings, Icons } from "styling.slint";
import { ListView } from "../common/listview.slint";
import { StateLayer, StateLayerBase } from "components.slint";

component TableViewColumn inherits Rectangle {
    in property <SortOrder> sort-order: SortOrder.unsorted;

    callback clicked <=> touch-area.clicked;
    callback adjust_size(length);

    min-height: max(24px, layout.min-height);
    background: CosmicPalette.control-background;

    touch-area := TouchArea {
        width: parent.width - 11px;
    }

    layout := HorizontalLayout {
        padding-left: 8px;
        padding-right: 8px;
        spacing: 2px;

        HorizontalLayout {
            @children
        }

        icon := Image {
            image-fit: contain;
            colorize: CosmicPalette.foreground;
            visible: root.sort-order != SortOrder.unsorted;
            width: 12px;
            y: (parent.height - self.height) / 2;
            source: root.sort-order == SortOrder.ascending ? Icons.arrow-down : Icons.arrow-up;

            animate colorize { duration: 150ms; }
        }
    }

    StateLayerBase {
        width: 100%;
        height: 100%;
        has-hover: touch-area.has-hover;
        pressed: touch-area.pressed;
    }

    // border
    Rectangle {
        y: parent.height - self.height;
        width: 100%;
        height: 1px;
        background: CosmicPalette.border;
    }

    Rectangle {
        x: parent.width - 1px;
        width: 1px;

        states [
            hover when movable-touch-area.has-hover : {
                background: CosmicPalette.foreground;
            }
        ]

        animate background { duration: 150ms; }

        movable-touch-area := TouchArea {
            width: 10px;
            mouse-cursor: ew-resize;

            moved => {
                if (self.pressed) {
                    adjust_size(self.mouse-x - self.pressed-x);
                }
            }
        }
    }
}

component TableViewCell inherits Rectangle {
    clip: true;

    HorizontalLayout {
        padding: 8px;

        @children
    }
}

component TableViewRow inherits Rectangle {
    in property <bool> selected;
    in property <bool> even;

    callback clicked <=> touch-area.clicked;
    callback pointer-event(/* event */ PointerEvent, /* absolute mouse position */ Point);

    min-width: layout.min-width;
    min-height: max(24px, layout.min-height);
    background: root.even ? CosmicPalette.control-background : transparent;

    layout := HorizontalLayout {
       @children
    }

    StateLayerBase {
        checked: root.selected;
        focus-boder-margin: 0;
        border-radius: root.border-radius;
        pressed: touch-area.pressed;
        has-hover: touch-area.has-hover;
    }

    touch-area := TouchArea {
        pointer-event(pe) => {
            root.pointer-event(pe, {
                x: self.absolute-position.x + self.mouse-x,
                y: self.absolute-position.y + self.mouse-y,
            });
        }
    }
}

export component StandardTableView {
    in property <[[StandardListViewItem]]> rows;
    out property <int> current-sort-column: -1;
    in-out property <[TableColumn]> columns;
    in-out property <int> current-row: -1;

    callback sort-ascending(/* column-index */ int);
    callback sort-descending(/* column-index */ int);
    callback row-pointer-event(/* row-index */ int, /* event */ PointerEvent,  /* absolute mouse position */ Point);
    callback current-row-changed(/* current-row */ int);

    public function set-current-row(index: int) {
        if (index < 0 || index >= rows.length) {
            return;
        }

        current-row = index;
        current-row-changed(current-row);

        if (current-item-y < 0) {
            scroll-view.viewport-y += 0 - current-item-y;
        }

        if (current-item-y + item-height > scroll-view.visible-height) {
            scroll-view.viewport-y -= current-item-y + item-height - scroll-view.visible-height;
        }
    }

    private property <length> min-header-height: 32px;
    private property <length> item-height: scroll-view.viewport-height / rows.length;
    private property <length> current-item-y: scroll-view.viewport-y + current-row * item-height;

    function sort(index: int) {
        if (root.current-sort-column != index) {
            root.columns[root.current-sort-column].sort-order = SortOrder.unsorted;
        }

        if(root.columns[index].sort-order == SortOrder.ascending) {
            root.columns[index].sort-order = SortOrder.descending;
            root.sort-descending(index);
        } else {
            root.columns[index].sort-order = SortOrder.ascending;
            root.sort-ascending(index);
        }

        root.current-sort-column = index;
    }

    min-width: 400px;
    min-height: 200px;
    horizontal-stretch: 1;
    vertical-stretch: 1;
    forward-focus: focus-scope;
    accessible-role: table;

    VerticalLayout {
        Rectangle {
            clip: true;
            vertical-stretch: 0;
            min-height: root.min-header-height;
            background: CosmicPalette.control-background;

            header-layout := HorizontalLayout {
                width: max(self.preferred-width, parent.width);
                x: scroll-view.viewport-x;
                padding-right: 6px;
                min-height: root.min-header-height;

                for column[index] in root.columns : TableViewColumn {
                    sort-order: column.sort-order;
                    horizontal-stretch: column.horizontal-stretch;
                    min-width: max(column.min-width, column.width);
                    preferred-width: self.min-width;
                    max-width: (index < columns.length && column.width >= 1px) ? max(column.min-width, column.width) : 100000px;

                    clicked => {
                        root.sort(index);
                    }

                    adjust-size(diff) => {
                        column.width = max(1px, self.width + diff);
                    }

                    Text {
                        vertical-alignment: center;
                        text: column.title;
                        font-weight: CosmicFontSettings.body.font-weight;
                        font-size: CosmicFontSettings.body.font-size;
                        color: CosmicPalette.foreground;
                        overflow: elide;
                    }
                }
            }
        }

        scroll-view := ListView {
            for row[idx] in root.rows : TableViewRow {
                selected: idx == root.current-row;
                even: mod(idx, 2) == 0;

                pointer-event(pe, pos) => {
                    root.row-pointer-event(idx, pe, {
                        x: pos.x - root.absolute-position.x,
                        y: pos.y - root.absolute-position.y,
                    });
                }

                clicked => {
                    root.focus();
                    root.set-current-row(idx);
                }

                for cell[index] in row : TableViewCell {
                    private property <bool> has_inner_focus;

                    horizontal-stretch: root.columns[index].horizontal-stretch;
                    min-width: max(columns[index].min-width, columns[index].width);
                    preferred-width: self.min-width;
                    max-width: (index < columns.length && columns[index].width >= 1px) ? max(columns[index].min-width, columns[index].width) : 100000px;

                    Rectangle {
                        cell-text := Text {
                            width: 100%;
                            height: 100%;
                            overflow: elide;
                            vertical-alignment: center;
                            text: cell.text;
                            font-weight: CosmicFontSettings.body.font-weight;
                            font-size: CosmicFontSettings.body.font-size;
                            color: mod(idx, 2) == 0 ? CosmicPalette.control-foreground : CosmicPalette.foreground;

                            states [
                                selected when idx == root.current-row : {
                                    cell-text.color: CosmicPalette.accent-background;
                                }
                            ]
                        }
                    }
                }
            }
        }
    }

    focus-scope := FocusScope {
        x: 0;
        width: 0; // Do not react on clicks

        key-pressed(event) => {
            if (event.text == Key.UpArrow) {
                root.set-current-row(root.current-row - 1);
                return accept;
            } else if (event.text == Key.DownArrow) {
                root.set-current-row(root.current-row + 1);
                return accept;
            }
            reject
        }
    }
}

import { md } from "md.slint";

export CheckBox := Rectangle {
    callback toggled;

    property <string> text <=> label.text;
    property <bool> checked;
    property <bool> has-focus;
    property<bool> enabled: true;
    height: 18pt;

    accessible-label <=> label.text;
    accessible-checkable: true;
    accessible-checked <=> checked;
    accessible-role: checkbox;

    HorizontalLayout {  
        spacing: 8pt;

        Rectangle {  
            width: 18pt;
            height: 18pt;
          
            container := Rectangle {  
                width: 100%;
                height: 100%;
                border-radius: 2pt;
                border-width: 2pt;
                border-color: md.sys.color.on-surface;
            }

            state-layer := Rectangle {
                width: 40pt;
                height: 40pt;
                x: (parent.width - width) / 2;
                y: (parent.height - height) / 2;
                opacity: 0;
                background: md.sys.color.primary;
                border-radius: 20pt;
                animate opacity { duration: 300ms; easing: ease; }
            }

            if (checked) : Path {
                width: 66%;
                height: 66%;
                x: (parent.width - width) / 2;
                y: (parent.height - height) / 2;
                commands: "M18.9 35.7 7.7 24.5l2.15-2.15 9.05 9.05 19.2-19.2 2.15 2.15Z";
                fill: md.sys.color.on-primary;

                states [
                    disabled when !root.enabled : {
                        fill: md.sys.color.on-surface;
                    }
                    hover-selected when touch.has-hover && root.checked : {
                        fill: md.sys.color.on-primary;
                    }
                ]
            }

            touch := TouchArea {
                enabled <=> root.enabled;
                clicked => {
                    if (root.enabled) {
                        root.checked = !root.checked;
                        root.toggled();
                    }
                }
            }
        }

        label := Text {
            color: md.sys.color.primary;
            horizontal-alignment: left;
            vertical-alignment: center;
            vertical-stretch: 1;
            font-size: md.sys.label-medium.size;
            font-weight: md.sys.label-medium.weight;
        }
    }

    fs := FocusScope {
        width: 0px; // Do not react on clicks
        enabled <=> root.enabled;
        has_focus <=> root.has-focus;

        key-pressed(event) => {
            if (event.text == " " || event.text == "\n") {
                 touch.clicked();
                 return accept;
            }
            return reject;
        }
    }

    states [
        disabled-selected when !root.enabled && root.checked  : {
            container.border-width: 0pt;
            container.border-color: transparent;
            container.background: md.sys.color.primary;
            container.opacity: 0.38;
            label.opacity: 0.38;
            label.color: md.sys.color.primary;
        }
        disabled when !root.enabled : {
            container.opacity: 0.38;
            label.opacity: 0.38;
            label.color: md.sys.color.primary;
        }
        pressed when touch.pressed && !root.checked : {
            state-layer.opacity: 0.12;
        }
        pressed-selected when touch.pressed && root.checked : {
            state-layer.opacity: 0.12;    
            state-layer.background: md.sys.color.on-surface;    
            container.border-width: 0pt;
            container.border-color: transparent;
            container.background: md.sys.color.primary;
        }
        hover-selected when touch.has-hover && root.checked : {
            state-layer.opacity: 0.08;    
            container.border-width: 0pt;
            container.border-color: transparent;
            container.background: md.sys.color.primary;
        }
        hover when touch.has-hover && !root.checked : {
            state-layer.background: md.sys.color.on-surface;
            state-layer.opacity: 0.08;    
        }
        selected when !touch.has-hover && root.checked : {
            container.border-width: 0pt;
            container.border-color: transparent;
            container.background: md.sys.color.primary;
        }
        focused-selected when fs.has-focus && root.checked : {
            state-layer.opacity: 0.12;
        }
        focused when fs.has-focus && !root.checked : {
            state-layer.background: md.sys.color.on-surface;
            state-layer.opacity: 0.12;
        }
    ]
}

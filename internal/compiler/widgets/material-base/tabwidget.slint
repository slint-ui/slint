// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial


import { Palette, Typography } from "styling.slint";

export component TabWidgetImpl inherits Rectangle {
    in property <length> tabbar-preferred-height;
    in property <length> tabbar-preferred-width;
    in property <length> content-min-height;
    in property <length> content-min-width;
    in property <int> current-index;
    in property <int> current-focused;
    out property <length> content-x: 0;
    out property <length> content-y: root.tabbar-preferred-height;
    out property <length> content-height: root.height - root.tabbar-preferred-height;
    out property <length> content-width: root.width;
    out property <length> tabbar-x: 0;
    out property <length> tabbar-y: 0;
    out property <length> tabbar-height: root.tabbar-preferred-height;
    out property <length> tabbar-width: root.width;

    preferred-width: root.content-min-width;
    min-width: max(root.content-min-width, root.tabbar-preferred-width);
    preferred-height: root.content-min-height + root.tabbar-preferred-height;
    min-height: root.content-min-height + root.tabbar-preferred-height;
}

export component TabImpl inherits Rectangle {
    in property <int> current-focused; // The currently focused tab
    in property <int> tab-index; // The index of this tab
    in property <int> num-tabs; // The total number of tabs
    in property <string> title <=> i-text.text;
    in property <bool> enabled: true;
    in-out property <int> current; // The currently selected tab

    private property <bool> has-focus: root.current-focused == root.tab-index;
    private property <bool> active: root.tab-index == root.current;

    height: 48px;
    accessible-role: tab;
    accessible-label: root.title;

    i-container := Rectangle {
        background: Palette.surface;
    }

    i-state-layer := Rectangle {
        opacity: !i-touch-area.pressed ? !i-touch-area.has-hover ? 0 : 0.08 : 0.12;
        width: 100%;
        height: 100%;
        border-radius: i-container.border-radius;
        background: Palette.primary;

        animate opacity { duration: 250ms; easing: ease; }
     }

    i-layout := HorizontalLayout {
        padding-left: 16px;
        padding-right: 16px;

        i-text := Text {
            vertical-alignment: center;
            color: !root.active ? Palette.on-surface : Palette.primary;
            // FIXME after Roboto font can be loaded
            //font-family: Typography.title-small.font;
            font-size: Typography.title-small.font-size;
            font-weight: Typography.title-small.font-weight;

            animate color { duration: 250ms; easing: ease; }
        }
    }

    i-indicator := Rectangle {
        opacity: !root.active ? 0 : 1;
        width: 100%;
        height: 3px;
        y: parent.height - self.height;
        background: Palette.primary;

        animate opacity { duration: 250ms; easing: ease; }
    }

    i-touch-area := TouchArea {
        enabled <=> root.enabled;

        clicked => {
            root.current = root.tab-index;
        }
    }
}

export component TabBarImpl {
    // injected properties:
    in-out property <int> current; // The currently selected tab
    in-out property <int> current-focused: i-focus-scope.has-focus ? i-focus-scope.focused-tab : -1; // The currently focused tab
    in-out property <int> num-tabs; // The total number of tabs

    accessible-role: tab;
    accessible-delegate-focus: root.current-focused >= 0 ? root.current-focused : root.current;

    HorizontalLayout {
        alignment: start;

        @children
    }

    i-focus-scope := FocusScope {
        property <int> focused-tab: 0;

        x: 0;
        width: 0; // Do not react on clicks

        key-pressed(event) => {
            if (event.text == "\n") {
                 root.current = root.current-focused;
                 return accept;
            }
            if (event.text == Key.LeftArrow) {
                 self.focused-tab = Math.max(self.focused-tab - 1,  0);
                 return accept;
            }
            if (event.text == Key.RightArrow) {
                 self.focused-tab = Math.min(self.focused-tab + 1, root.num-tabs - 1);
                 return accept;
            }
            return reject;
        }

        key-released(event) => {
            if (event.text == " ") {
                 root.current = root.current-focused;
                 return accept;
            }
            return reject;
        }
    }
}


export component TabWidget inherits TabWidget {}

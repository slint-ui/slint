// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.2 OR LicenseRef-Slint-commercial

export struct Date {
    year: int,
    month: int,
    day: int,
}

export struct CalendarDelegateStyle {
    font-size: length,
    font-weight: float,
    foreground: brush,
    state-brush: brush,
    background-selected: brush,
    foreground-selected: brush,
    state-brush-selected: brush,
    border-color-today: brush,
    foreground-today: brush,
    state-brush-today: brush,
}

component StateLayer inherits Rectangle {
    in property <bool> pressed;
    in property <bool> has-hover;
    in property <bool> has-focus;
    in property <bool> enabled;
    in property <brush> state-brush;

    states [
        highlighted when root.enabled && (root.pressed || root.has-focus) : {
            root.background: root.state-brush.with_alpha(0.12);
        }
        hovered when root.enabled && root.has-hover : {
            root.background: root.state-brush.with_alpha(0.08);   
        }
    ]
}

component CalendarHeaderDelegate {
    in property <string> text <=> text-label.text;    
    in property <length> font-size;
    in property <float> font-weight;
    in property <brush> foreground;
  
    min-width: max(40px, content-layer.min-width);
    min-height: max(40px, content-layer.min-height);
    
    content-layer := VerticalLayout {
        text-label := Text {
            vertical-alignment: center;
            horizontal-alignment: center;
            font-size: root.font-size;
            font-weight: root.font-weight;
            color: root.foreground;
        }
    }
}

component CalendarDelegate {
    in property <bool> selected;
    in property <bool> today;
    in property <string> text <=> text-label.text;
    in property <CalendarDelegateStyle> style;
    in property <bool> enabled: true;

    callback clicked <=> touch-area.clicked;

    min-width: max(40px, content-layer.min-width);
    min-height: max(40px, content-layer.min-height);
    forward-focus: focus-scope;

    accessible-role: button;
    accessible-checkable: true;
    accessible-checked: root.selected;
    accessible-label: root.text;
    accessible-action-default => { touch-area.clicked(); }

    touch-area := TouchArea {
        enabled: root.enabled;
    }

    focus-scope := FocusScope {
        width: 0px;
        enabled: root.enabled;
        
        key-pressed(event) => {
            if (event.text == " " || event.text == "\n") {
                touch-area.clicked();
                 return accept;
            }

            return reject;
        }
    }
    
    background-layer := Rectangle {
        border-radius: max(self.width, self.height) / 2;
    }

    content-layer := VerticalLayout {
        text-label := Text {
            vertical-alignment: center;
            horizontal-alignment: center;
            color: root.style.foreground;
            font-size: root.style.font-size;
            font-weight: root.style.font-weight;
        }
    }

    state-layer := StateLayer {
        enabled: root.enabled;
        border-radius: background-layer.border-radius;
        pressed: touch-area.pressed;
        has-hover: touch-area.has-hover;
        has-focus: focus-scope.has-focus;
        state-brush: root.style.state-brush;
    }

    states [
        disabled when !root.enabled : {
            root.opacity: 0.38;
        }
        selected when root.selected : {
            background-layer.background: root.style.background-selected;
            text-label.color: root.style.foreground-selected;
            state-layer.state-brush: root.style.state-brush-selected;
        }
        today when root.today : {
            background-layer.border-color: root.style.border-color-today;
            background-layer.border-width: 1px;
            state-layer.state-brush: root.style.state-brush-today;
        } 
    ]
}

export struct CalendarStyle {
    delegate-style: CalendarDelegateStyle,
    spacing: length,
}

export component Calendar {
    property <int> column-count: 7;
    property <int> row-count: 6;
    property <length> delegate-size: 40px;

    in property <CalendarStyle> style;
    in property <int> start-column;
    in property <[string]> header-model;
    in property <[Date]> model;
    in property <Date> today;
    in property <Date> selected-date;

    callback select-date(/* date */ Date);

    min-width: root.delegate-size * root.column-count + (root.column-count - 1) * root.style.spacing;
    min-height: root.delegate-size * root.row-count + (root.row-count - 1) * root.style.spacing;

    // header
    for day[index] in root.header-model : CalendarHeaderDelegate {
        x: root.delegate-x(index);
        y: root.delegate-y(index);
        text: day;
        font-size: root.style.delegate-style.font-size;
        font-weight: root.style.delegate-style.font-weight;
        foreground: root.style.delegate-style.foreground;
    }

    // items
    for date[index] in root.model : CalendarDelegate {
        x: root.delegate-x(root.index-on-calendar(index));
        y: root.delegate-y(root.index-on-calendar(index));
        width: root.delegate-size;
        height: root.delegate-size;
        text: date.day;
        style: root.style.delegate-style;
        selected: root.selected-date == date;
        today: root.today == date;

        clicked => {
            root.select-date(date);
        }
    }

    function index-on-calendar(index: int) -> int {
        // add column count because items starts after header row
        root.column-count + root.start-column + index
    }

    function row-for-index(index: int) -> int {
        floor(index / root.column-count)
    }

    function column-for-index(index: int) -> int {
        mod(index, root.column-count)
    }

    function delegate-x(index: int) -> length {
        root.column-for-index(index) * root.delegate-size + root.column-for-index(index) * root.style.spacing
    }

    function delegate-y(index: int) -> length {
        root.row-for-index(index) * root.delegate-size + root.row-for-index(index) * root.style.spacing
    }
}

export struct DatePickerStyle {
    calendar-style: CalendarStyle,
}

export component DatePickerBase {
    property <Date> current-date;
    
    in property <Date> date;
    in property <DatePickerStyle> style;

    min-width: content-layer.min-width;
    min-height: content-layer.min-height;

    content-layer := VerticalLayout {        
        calendar := Calendar {
            style: root.style.calendar-style;

            // FIXME: replace this after SlintInternal helper is ready
            header-model: DummyGenerator.calendar-header-model;
            model: DummyGenerator.calendar-model;
            today: DummyGenerator.today;
            selected-date <=> DummyGenerator.selected-date;
            start-column: DummyGenerator.start-column;

            select-date(date) => {
                DummyGenerator.selected-date = date;
            }
        }
    }

    pure public function ok-enabled() -> bool {
        true
    }

    public function get-current-date() -> Date {
        root.current-date
    }
}

global DummyGenerator {
    out property <int> start-column: 3;
    out property <Date> today: { year: 2024, month: 5, day: 17 };
    in-out property <Date> selected-date: { year: 2024, month: 5, day: 2 };
    out property <[string]> calendar-header-model: ["S", "M", "T", "W", "T", "F", "S"];
    out property <[Date]> calendar-model : [
          { year: 2024, month: 5, day: 1 },  
          { year: 2024, month: 5, day: 2 },  
          { year: 2024, month: 5, day: 3 },  
          { year: 2024, month: 5, day: 4 },  
          { year: 2024, month: 5, day: 5 },  
          { year: 2024, month: 5, day: 6 },  
          { year: 2024, month: 5, day: 7 },  
          { year: 2024, month: 5, day: 8 },  
          { year: 2024, month: 5, day: 9 },  
          { year: 2024, month: 5, day: 10 },  
          { year: 2024, month: 5, day: 11 },  
          { year: 2024, month: 5, day: 12 },  
          { year: 2024, month: 5, day: 13 },  
          { year: 2024, month: 5, day: 14 },  
          { year: 2024, month: 5, day: 15 },  
          { year: 2024, month: 5, day: 16 },  
          { year: 2024, month: 5, day: 17 },  
          { year: 2024, month: 5, day: 18 },  
          { year: 2024, month: 5, day: 19 },  
          { year: 2024, month: 5, day: 20 },  
          { year: 2024, month: 5, day: 21 },  
          { year: 2024, month: 5, day: 22 },  
          { year: 2024, month: 5, day: 23 },  
          { year: 2024, month: 5, day: 24 },  
          { year: 2024, month: 5, day: 25 },  
          { year: 2024, month: 5, day: 26 },  
          { year: 2024, month: 5, day: 27 },  
          { year: 2024, month: 5, day: 28 },  
          { year: 2024, month: 5, day: 29 },  
          { year: 2024, month: 5, day: 30 },  
          { year: 2024, month: 5, day: 31 },  
    ];
}

// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

import { FluentFontSettings, FluentPalette } from "styling.slint";

export component LineEdit {
    in property <bool> enabled <=> i-text-input.enabled;
    in property <InputType> input-type <=> i-text-input.input-type;
    in property <TextHorizontalAlignment> horizontal-alignment <=> i-text-input.horizontal-alignment;
    in property <bool> read-only <=> i-text-input.read-only;
    in property <length> font-size <=> i-text-input.font-size;
    in property <string> placeholder-text <=> i-placeholder.text;
    out property <bool> has-focus <=> i-text-input.has-focus;
    in-out property <string> text <=> i-text-input.text;

    callback accepted(/* text */ string);
    callback edited(/* text */ string);

    public function select-all() {
        i-text-input.select-all();
    }

    public function clear-selection() {
        i-text-input.clear-selection();
    }

    public function cut() {
        i-text-input.cut();
    }

    public function copy() {
        i-text-input.copy();
    }

    public function paste() {
        i-text-input.paste();
    }

    vertical-stretch: 0;
    horizontal-stretch: 1;
    min-width: max(160px, i-layout.min-height);
    min-height: max(32px, i-layout.min-height);
    forward-focus: i-text-input;

    states [
        disabled when !root.enabled : {
            i-background.background: FluentPalette.control-disabled;
            i-background.border-color: FluentPalette.border;
            i-text-input.color: FluentPalette.text-disabled;
            i-text-input.selection-foreground-color: FluentPalette.text-on-accent-disabled;
            i-placeholder.color: FluentPalette.text-disabled;
        }
        focused when root.has-focus : {
            i-background.background: FluentPalette.control-input-active;
            i-background.border-color: FluentPalette.border;
            i-focus-border.background: FluentPalette.accent;
            i-placeholder.color: FluentPalette.text-tertiary;
        }
    ]

    i-background := Rectangle {
        border-radius: 4px;
        background: FluentPalette.surface;
        border-width: 1px;
        border-color: FluentPalette.text-control-border;

        i-layout := HorizontalLayout {
            padding-left: 12px;
            padding-right: 12px;

            Rectangle {
                clip: true;

                i-placeholder := Text {
                    width: 100%;
                    height: 100%;
                    color: FluentPalette.text-secondary;
                    font-size: FluentFontSettings.body.font-size;
                    font-weight: FluentFontSettings.body.font-weight;
                    visible: root.text == "";
                    vertical-alignment: center;
                }

                i-text-input := TextInput {
                    property <length> computed_x;
                    property <length> padding-outer: i-layout.padding-left + i-layout.padding-right;

                    x: min(0px, max(parent.width - self.width, self.computed_x));
                    width: max(parent.width, self.preferred-width);
                    height: 100%;
                    color: FluentPalette.foreground;
                    vertical-alignment: center;
                    font-size: FluentFontSettings.body.font-size;
                    font-weight: FluentFontSettings.body.font-weight;
                    selection-background-color: FluentPalette.accent-selected-text;
                    selection-foreground-color: FluentPalette.on-accent;

                    accepted => {
                        root.accepted(self.text);
                    }

                    edited => {
                        root.edited(self.text);
                    }

                    cursor-position-changed(cpos) => {
                        if (cpos.x + self.computed_x < self.padding-outer) {
                            self.computed_x = - cpos.x + self.padding-outer;
                        } else if (cpos.x + self.computed_x > parent.width - self.padding-outer) {
                            self.computed_x = parent.width - cpos.x - self.padding-outer;
                        }
                    }
                }
            }
        }

        i-focus-border := Rectangle {
            x: parent.border-radius;
            y: parent.height - self.height;
            width: parent.width - 2 * parent.border-radius;
            height: 2px;
        }
    }
}

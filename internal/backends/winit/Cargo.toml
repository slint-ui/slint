# Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
# SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial

[package]
name = "i-slint-backend-winit"
version = "0.3.4"
authors = ["Slint Developers <info@slint-ui.com>"]
edition = "2021"
license = "GPL-3.0-only OR LicenseRef-Slint-commercial"
description = "OpenGL rendering backend for Slint"
repository = "https://github.com/slint-ui/slint"
homepage = "https://slint-ui.com"
build = "build.rs"
rust-version.workspace = true

[lib]
path = "lib.rs"

# Note, these features need to be kept in sync (along with their defaults) in
# the C++ crate's CMakeLists.txt
[features]
wayland = ["winit/wayland", "glutin/wayland", "copypasta/wayland", "i-slint-renderer-skia?/wayland"]
x11 = ["winit/x11", "glutin/x11", "copypasta/x11", "i-slint-renderer-skia?/x11"]
renderer-winit-femtovg = ["femtovg", "fontdb", "libc", "yeslogic-fontconfig-sys", "winapi", "dwrote", "imgref", "unicode-script", "ttf-parser", "rgb", "i-slint-core/box-shadow-cache"]
renderer-winit-skia = ["i-slint-renderer-skia"]
renderer-winit-skia-opengl = ["renderer-winit-skia", "i-slint-renderer-skia/opengl"]
renderer-winit-software = ["softbuffer", "imgref", "rgb", "i-slint-core/systemfonts"]
rtti = ["i-slint-core/rtti"]
default = []

[dependencies]
i-slint-core = { version = "=0.3.4", path = "../../../internal/core" }
i-slint-core-macros = { version = "=0.3.4", path = "../../../internal/core-macros" }
i-slint-common = { version = "=0.3.4", path = "../../../internal/common" }

const-field-offset = { version = "0.1", path = "../../../helper_crates/const-field-offset" }
vtable = { version = "0.1.6", path = "../../../helper_crates/vtable" }

cfg-if = "1"
copypasta = { version = "0.8.1", default-features = false }
derive_more = "0.99.5"
lyon_path = "1.0"
once_cell = "1.5"
pin-weak = "1"
scoped-tls-hkt = "0.1"
winit = { version = "0.28.1", default-features = false }
dark-light = "1.0"
instant = "0.1"
raw-window-handle = { version = "0.5", features = ["alloc"] }
scopeguard =  { version = "1.1.0", default-features = false }

# For the FemtoVG renderer
femtovg = { version = "0.4.0", optional = true }
fontdb = { version = "0.10.0", optional = true, default-features = false }
ttf-parser = { version = "0.17.0", optional = true } # Use the same version was femtovg's rustybuzz, to avoid duplicate crates
unicode-script = { version = "0.5.4", optional = true } # Use the same version was femtovg's rustybuzz, to avoid duplicate crates
imgref = { version = "1.6.1", optional = true }
rgb = { version = "0.8.27", optional = true }

# For the Skia renderer
i-slint-renderer-skia = { version = "=0.3.4", path = "../../renderers/skia", optional = true }

# For the software renderer
softbuffer = { version = "0.2.0", optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
web-sys = { version = "0.3", features=["console", "WebGlContextAttributes", "CanvasRenderingContext2d", "HtmlInputElement", "HtmlCanvasElement", "Window", "Document", "CssStyleDeclaration", "Event", "KeyboardEvent", "InputEvent", "CompositionEvent"] }
wasm-bindgen = { version = "0.2" }
send_wrapper = "0.6.0"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
fontdb = { version = "0.10", optional = true, features = ["memmap", "fontconfig"] }
glutin = { version = "0.30", optional = true, default-features = false, features = ["egl", "wgl"] }

# For the FemtoVG renderer
[target.'cfg(target_family = "windows")'.dependencies]
dwrote = { version = "0.11.0", optional = true }
winapi = { version = "0.3", optional = true, features = ["dwrite"] }

[target.'cfg(not(any(target_family = "windows", target_os = "macos", target_os = "ios", target_arch = "wasm32")))'.dependencies]
libc = { version = "0.2", optional = true }
yeslogic-fontconfig-sys = { version = "3.2", optional = true }

[target.'cfg(target_os = "macos")'.dependencies]
# For GL rendering
cocoa = { version = "0.24.0" }
core-foundation = { version = "0.9.1" }
core-text = { version = "19.1.0" }

[build-dependencies]
cfg_aliases = "0.1.0"

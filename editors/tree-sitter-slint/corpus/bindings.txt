================================================================================
animated_default_geometry
================================================================================

TestCase := Rectangle {

    width: 100px;
    height: 200px;

    r := Rectangle {
        // default geometry for width & height
        animate height { duration: 1s; }
        animate width { duration: 1s; }
    }

    property<bool> test: r.width == 100px && r.height == 200px;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (comment)
            (block_statement
              (animate_statement
                (var_identifier)
                (animate_body
                  (value
                    (duration_value)))))
            (block_statement
              (animate_statement
                (var_identifier)
                (animate_body
                  (value
                    (duration_value))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier
                (post_identifier))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (length_value))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier))))
            (comparison_operator)
            (value
              (length_value))))))))

================================================================================
change_sub_property
================================================================================

SubElem := Rectangle {
    property <int> value: sub.value;
    callback change();
    change => { sub.value += 44; }
    sub := Rectangle {
        property <int> value: 55;
    }
}

TestCase := Rectangle {
    callback change();
    change => { sub.change() }
    property <int> toplevel: sub.value + 1;
    sub := SubElem { }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (binding_block_statement
          (callback_event
            (function_identifier)
            (block
              (assignment_expr
                (var_identifier
                  (post_identifier))
                (assignment_prec_operator)
                (value
                  (int_value)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (property
                (type
                  (type_identifier))
                (var_identifier)
                (value
                  (int_value)))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (binding_block_statement
          (callback_event
            (function_identifier)
            (block
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (add_binary_expression
            (var_identifier
              (post_identifier))
            (add_prec_operator)
            (value
              (int_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block))))))

================================================================================
change_sub_property2
================================================================================

SubElem := Rectangle {
    property <int> value: 55;
    callback change();
    change => { value += 44; }
}

TestCase := Rectangle {
    callback change();
    change => { sub.change(); sub2.change(); }
    property <int> toplevel: sub.value + sub2.value;
    sub := SubElem { }
    sub2 := SubElem { value : 1; }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (binding_block_statement
          (callback_event
            (function_identifier)
            (block
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (int_value)))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (binding_block_statement
          (callback_event
            (function_identifier)
            (block
              (block_statement
                (binding_block_statement
                  (var_identifier
                    (post_identifier
                      (function_call
                        (function_identifier)
                        (call_signature))))))
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (add_binary_expression
            (var_identifier
              (post_identifier))
            (add_prec_operator)
            (var_identifier
              (post_identifier)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (int_value)))))))))

================================================================================
issue_1026_opacity_alias
================================================================================

RoundedIcon := Rectangle {
    property <float> background-opacity <=> background-fill.opacity;
    background-fill := Rectangle {
        background:  #ff7d34;
        opacity: 1.0;
    }
    property <float> o: background-fill.opacity;
}

Device := VerticalLayout {
    spacing: 5px;
    ri := RoundedIcon {
        background-opacity: 0.15;
    }

    property<float> o: ri.o;
}

Sub := Rectangle {
    property o <=> d.o;
    d := Device {}
}


TestCase := Rectangle {
    s := Sub {}
    d := Device {}
    property o1 <=> s.o;
    property o2 <=> d.o;
    property <bool> test: abs(o1 - 0.15) < 0.001 && abs(o2 - 0.15) < 0.001;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (color_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (float_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (float_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (function_call
                (function_identifier)
                (call_signature
                  (add_binary_expression
                    (var_identifier)
                    (add_prec_operator)
                    (value
                      (float_value)))))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (float_value))
                (mult_prec_operator)
                (function_call
                  (function_identifier)
                  (call_signature
                    (add_binary_expression
                      (var_identifier)
                      (add_prec_operator)
                      (value
                        (float_value)))))))
            (comparison_operator)
            (value
              (float_value))))))))

================================================================================
issue_385_default_geom
================================================================================

TestCase := Rectangle {
    width: 100px;
    height: 200px;

    r := Rectangle {
        width <=> root.width;
        height <=> root.height;
    }

    property<bool> test: r.width == 100px && r.height == 200px;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier
                (post_identifier))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (length_value))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier))))
            (comparison_operator)
            (value
              (length_value))))))))

================================================================================
override
================================================================================

Compo := Text {
    property <int> prop_a: 10;
    property <int> prop_b;
    prop_b: 20;
    text: "hello";
}

TestCase := Rectangle {
    property <string> text: "ignore_me";
    c := Compo {
        prop_a: 1;
        prop_b: 2;
        text: "world";
    }

    property<int> prop_a: c.prop_a;
    property<int> prop_b: c.prop_b;
    property<string> prop_text: c.text;

    property<bool> test: prop_a == 1 && prop_b == 2 && prop_text == "world";
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (int_value)))))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (string_value)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (string_value))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (int_value)))))
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (int_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (string_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (comparison_binary_expression
                (var_identifier)
                (comparison_operator)
                (mult_binary_expression
                  (value
                    (int_value))
                  (mult_prec_operator)
                  (var_identifier)))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (int_value))
                (mult_prec_operator)
                (var_identifier)))
            (comparison_operator)
            (value
              (string_value))))))))

================================================================================
two_way_bug
================================================================================

// There used to be a bug in the deduplicate_property_read pass that would mess up aliases

BoxWithButtons := Window {
    property <string> value <=> val.text;
    val := Text {}
}

export TestCase := BoxWithButtons {
    property <int> temperature: 24;
    value: {
        (temperature < 0 ? "" : "+") + temperature;
    }

    property <bool> test: value == "+24";
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))))
  (export_modifier)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (binding_block_statement
          (assignment_block
            (var_identifier)
            (assignment_prec_operator)
            (block
              (add_binary_expression
                (comparison_binary_expression
                  (var_identifier)
                  (comparison_operator)
                  (ternary_expression
                    (value
                      (int_value))
                    (value
                      (string_value))
                    (value
                      (string_value))))
                (add_prec_operator)
                (var_identifier))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier)
            (comparison_operator)
            (value
              (string_value))))))))

================================================================================
two_way_model
================================================================================

// Regression test for a bug in which an alias to a model property was not
// properly set because it was thought as constant

MenuItem := Rectangle {
    property <length> h <=> root.val;
    height: val;
    property <length> val;
}

export TestCase := Rectangle {
    VerticalLayout {
        for entry[idx] in [
            { val: 12px },
        ] : MenuItem {
            h: entry.val;
        }
        Rectangle {}
    }
    property <bool> test: root.preferred_height == 12px;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (reference_identifier)
            (post_identifier))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))))
  (export_modifier)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (for_loop
                (var_identifier
                  (index_operator
                    (var_identifier)))
                (for_range
                  (value_list
                    (value
                      (anon_struct
                        (var_identifier)
                        (value
                          (length_value))))))
                (component
                  (type_identifier)
                  (block
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (post_identifier)))))))
            (block_statement
              (component
                (type_identifier)
                (block))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier
              (reference_identifier)
              (post_identifier))
            (comparison_operator)
            (value
              (length_value))))))))

================================================================================
two_way_simple
================================================================================

TestCase := Rectangle {
    property<brush> extra_background <=> background;
    property<length> sub_width1 <=> sub.width;
    property<length> sub_width2: sub.width;

    property<int> sub_foo1: 44;
    property<int> sub_foo2: sub.foo;


    sub := Rectangle {
        width: 80phx;
        property<int> foo <=> root.sub_foo1;
    }

    if (true) : Rectangle { background: root.extra_background; }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (physical_length_value)))))
            (block_statement
              (property
                (type
                  (type_identifier))
                (var_identifier)
                (var_identifier
                  (reference_identifier)
                  (post_identifier)))))))
      (block_statement
        (if_statement
          (value
            (value
              (bool_value)))
          (component
            (type_identifier)
            (block
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))))))))

================================================================================
change_sub_property_indirection
================================================================================

// hello, hello2 and alias are aliases
SubElem := Rectangle {
    property <string> hello <=> hello2;
    property <string> hello2;
    t := Text {
        text <=> hello;
    }
    property <string> alias <=> t.text;

    property <string> binding: hello2;
}

TestCase := Rectangle {
    property <string> public_alias: "ABC";

    sub_alias := SubElem {
        hello <=> public_alias;
        property <string> indirection: binding;
    }

    property <string> sub_text <=> sub_alias.indirection;
    property <bool> test: sub_text == "ABC";
}


--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier)))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (string_value))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier))))
            (block_statement
              (property
                (type
                  (type_identifier))
                (var_identifier)
                (var_identifier))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier)
            (comparison_operator)
            (value
              (string_value))))))))

================================================================================
issue_345_opacity_animation
================================================================================

Sub := Rectangle {
    property <bool> cond;
    property <float> child_opacity: inner.opacity;
    inner := Rectangle {
        opacity: cond ? 0 : 1;
        animate opacity { duration: 1s; }
        background: green;
    }
}

TestCase := Rectangle {
    property cond <=> s.cond;
    property val <=> s.child_opacity;
    s := Sub {}
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (ternary_expression
                    (var_identifier)
                    (value
                      (int_value))
                    (value
                      (int_value))))))
            (block_statement
              (animate_statement
                (var_identifier)
                (animate_body
                  (value
                    (duration_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block))))))

================================================================================
multiple_two_way
================================================================================

O := Text {
    property <int> val;
    text: val;
    property <int> a: val + 1;
}

TestCase := Window {
    property <int> val: condition ? 2 : 4;
    property <bool> condition : false;
    HorizontalLayout {
        o1 := O { val <=> root.val; }
        o2 := O { val <=> root.val; }
        o3 := O { val <=> root.val; }
        o4 := O { val <=> root.val; }
        o5 := O { val <=> root.val; }
    }
    property <int> checksum: 10000 * o1.a + 1000 * o2.a + 100 * o3.a + 10 * o4.a + 1 * o5.a;
    property <bool> test: checksum == 55555;
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (add_binary_expression
            (var_identifier)
            (add_prec_operator)
            (value
              (int_value)))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (ternary_expression
            (var_identifier)
            (value
              (int_value))
            (value
              (int_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (bool_value))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (binding_alias
                        (var_identifier)
                        (var_identifier
                          (reference_identifier)
                          (post_identifier))))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (binding_alias
                        (var_identifier)
                        (var_identifier
                          (reference_identifier)
                          (post_identifier))))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (binding_alias
                        (var_identifier)
                        (var_identifier
                          (reference_identifier)
                          (post_identifier))))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (binding_alias
                        (var_identifier)
                        (var_identifier
                          (reference_identifier)
                          (post_identifier))))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (binding_alias
                        (var_identifier)
                        (var_identifier
                          (reference_identifier)
                          (post_identifier)))))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (add_binary_expression
            (add_binary_expression
              (add_binary_expression
                (add_binary_expression
                  (mult_binary_expression
                    (value
                      (int_value))
                    (mult_prec_operator)
                    (var_identifier
                      (post_identifier)))
                  (add_prec_operator)
                  (mult_binary_expression
                    (value
                      (int_value))
                    (mult_prec_operator)
                    (var_identifier
                      (post_identifier))))
                (add_prec_operator)
                (mult_binary_expression
                  (value
                    (int_value))
                  (mult_prec_operator)
                  (var_identifier
                    (post_identifier))))
              (add_prec_operator)
              (mult_binary_expression
                (value
                  (int_value))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier))))
            (add_prec_operator)
            (mult_binary_expression
              (value
                (int_value))
              (mult_prec_operator)
              (var_identifier
                (post_identifier))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier)
            (comparison_operator)
            (value
              (int_value))))))))

================================================================================
two_way_binding
================================================================================

OtherComp := Rectangle {
    property <string> t <=> text.text;
    property <string> get_text <=> text.text;
    text := Text {
        text: "to be overridden";
    }
    property <int> some_value: 42;
    property <int> some_value_alias <=> some_value;
}

TestCase := Rectangle {

    property <string> text1: "Hello";
    property <string> text2: "Blah";
    property <string> ti1_text: ti1.text;
    property <string> ti2_text: ti2.text;
    property <string> text_item_text: text_item.text;
    property <string> othercomp_t: "real value";
    property <string> othercomp_get_text: other_comp.get_text;
    property <int> othercomp_some_value;
    property <int> othercomp_some_value_alias <=> other_comp.some_value_alias;
    property <int> othercomp_some_value_alias2;

    ti1 := TextInput {
        text <=> text1;
    }

    ti2 := TextInput {
        text <=> text_item.text;
    }

    text_item := Text {
        text: text2;
    }

    Text {
        text <=> text1;
    }

    other_comp := OtherComp {
        t <=> root.othercomp_t;
        some_value <=> othercomp_some_value;
        some_value_alias <=> othercomp_some_value_alias2;
    }

    callback set_ti1(string);
    set_ti1(a) => { ti1.text = a; }
    callback set_ti2(string);
    set_ti2(a) => { ti2.text = a; }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (string_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (string_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (string_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (string_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (post_identifier))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier))))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier)))))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))))
      (block_statement
        (binding_block_statement
          (callback_event
            (function_identifier)
            (call_signature
              (var_identifier))
            (block
              (assignment_expr
                (var_identifier
                  (post_identifier))
                (assignment_prec_operator)
                (var_identifier))))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))))
      (block_statement
        (binding_block_statement
          (callback_event
            (function_identifier)
            (call_signature
              (var_identifier))
            (block
              (assignment_expr
                (var_identifier
                  (post_identifier))
                (assignment_prec_operator)
                (var_identifier)))))))))

================================================================================
two_way_binding2
================================================================================

OtherComp := Rectangle {
    property t <=> text.text;
    property get_text <=> text.text;
    text := Text {
        text: "to be overridden";
    }
    property <int> some_value: 42;
    property some_value_alias <=> some_value;
}

TestCase := Rectangle {

    property <string> text1: "Hello";
    property <string> text2: "Blah";
    property ti1_text <=> ti1.text_alias;
    property ti2_text <=> ti2.text_alias;
    property text_item_text <=> text_item.text;
    property <string> othercomp_t: "real value";
    property othercomp_get_text <=> other_comp.get_text;
    property <int> othercomp_some_value;
    property othercomp_some_value_alias <=> other_comp.some_value_alias;
    property <int> othercomp_some_value_alias2;

    ti1 := TextInput {
        property text_alias <=> text;
        text <=> text1;
    }

    ti2 := TextInput {
        property text_alias <=> text_alias_indirection;
        property text_alias_indirection <=> text;
        text <=> text_item.text;
    }

    text_item := Text {
        text: text2;
    }

    Text {
        text <=> text1;
    }

    other_comp := OtherComp {
        t <=> root.othercomp_t;
        some_value <=> othercomp_some_value;
        some_value_alias <=> othercomp_some_value_alias2;
    }

    callback set_ti1(string);
    set_ti1(a) => { ti1.text = a; }
    callback set_ti2(string);
    set_ti2(a) => { ti2.text = a; }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (string_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (property
          (var_identifier)
          (var_identifier)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (string_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (string_value))))
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (string_value))))
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (property
                (var_identifier)
                (var_identifier)))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (property
                (var_identifier)
                (var_identifier)))
            (block_statement
              (property
                (var_identifier)
                (var_identifier)))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (post_identifier))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier))))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier)))))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))))
      (block_statement
        (binding_block_statement
          (callback_event
            (function_identifier)
            (call_signature
              (var_identifier))
            (block
              (assignment_expr
                (var_identifier
                  (post_identifier))
                (assignment_prec_operator)
                (var_identifier))))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))))
      (block_statement
        (binding_block_statement
          (callback_event
            (function_identifier)
            (call_signature
              (var_identifier))
            (block
              (assignment_expr
                (var_identifier
                  (post_identifier))
                (assignment_prec_operator)
                (var_identifier)))))))))

================================================================================
two_way_binding_animation
================================================================================

TestCase := Rectangle {
    property <int> xx : 1000;

    animate x {
        duration: xx * 1ms;
        easing: ease;
    }

    property<int> hello: 40;
    animate hello {
        duration: 1200ms;
    }

    property<bool> condition: true;
    property<int> binding_dep: condition ? 100 : 150;
    animate binding_dep {
        duration: 1200ms;
    }

    t:= Text {
        font_weight <=> root.binding_dep;
    }
    property <int> t1_font: t.font_weight;
    property alias_hello <=> hello;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (animate_statement
          (var_identifier)
          (animate_body
            (mult_binary_expression
              (var_identifier)
              (mult_prec_operator)
              (value
                (duration_value)))
            (var_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (animate_statement
          (var_identifier)
          (animate_body
            (value
              (duration_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (bool_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (ternary_expression
            (var_identifier)
            (value
              (int_value))
            (value
              (int_value)))))
      (block_statement
        (animate_statement
          (var_identifier)
          (animate_body
            (value
              (duration_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (var_identifier)
          (var_identifier))))))

================================================================================
two_way_binding_extra
================================================================================



TestCase := Rectangle {
    width: 100phx;
    height: 100phx;

    property<length> xx: 50phx;
    property<length> ww <=> first.width;

    first := TouchArea {
        x <=> parent.xx;
        width: 50phx;
        enabled <=> second.enabled;
        height: 15phx;
        clicked => { result += 40; }
    }

    second := TouchArea {
        x <=> parent.xx;
        width <=> root.ww;
        height <=> first.height;
        clicked => { result += 300; }
        y: 50phx;
    }

    property <int> result: 5;
}



--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (physical_length_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (physical_length_value)))))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (physical_length_value)))))
            (block_statement
              (binding_block_statement
                (callback_event
                  (function_identifier)
                  (block
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (callback_event
                  (function_identifier)
                  (block
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value)))))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (physical_length_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value)))))))

================================================================================
two_way_priority_default
================================================================================

// The visible and enabled property are set by default by Slint to true.
// But when overridden by an alias, the overridden value should take precedence.

export Button := Rectangle {
    property<bool> the_enabled <=> touch.enabled;
    property<bool> the_visible <=> touch.visible;
    background: !the_enabled ? blue : red;
    border-color: !the_visible ? green : yellow;
    border-width: 15px;
    touch := TouchArea {}
    fs := FocusScope {
        enabled <=> root.the_enabled;
        visible <=> root.the_visible;
    }
    property <bool> check: !fs.enabled && !touch.enabled && !fs.visible && !touch.visible;
}

export TestCase := Rectangle {
    VerticalLayout {
        spacing: 10px;
        b1 := Button { the_enabled: false; the_visible: false; }
        b2 := Button { the_enabled: false; the_visible: false; }
        b3 := Button { the_enabled: false; the_visible: false; }
        b4 := Button { the_enabled: false; the_visible: false; }
        b5 := Button { the_enabled: false; the_visible: false; }
        b6 := Button { the_enabled: false; the_visible: false; }
        b7 := Button { the_enabled: false; the_visible: false; }
    }

    property <bool> test: b1.check && b2.check && b3.check && b4.check && b5.check && b6.check && b7.check;
}


--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (export_modifier)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (unary_expression
              (unary_prec_operator)
              (ternary_expression
                (var_identifier)
                (var_identifier)
                (var_identifier))))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (unary_expression
              (unary_prec_operator)
              (ternary_expression
                (var_identifier)
                (var_identifier)
                (var_identifier))))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (mult_binary_expression
            (mult_binary_expression
              (mult_binary_expression
                (unary_expression
                  (unary_prec_operator)
                  (var_identifier
                    (post_identifier)))
                (mult_prec_operator)
                (unary_expression
                  (unary_prec_operator)
                  (var_identifier
                    (post_identifier))))
              (mult_prec_operator)
              (unary_expression
                (unary_prec_operator)
                (var_identifier
                  (post_identifier))))
            (mult_prec_operator)
            (unary_expression
              (unary_prec_operator)
              (var_identifier
                (post_identifier))))))))
  (export_modifier)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (length_value)))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (bool_value)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (bool_value))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (bool_value)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (bool_value))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (bool_value)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (bool_value))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (bool_value)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (bool_value))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (bool_value)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (bool_value))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (bool_value)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (bool_value))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (binding_block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (bool_value)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (bool_value)))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (mult_binary_expression
            (mult_binary_expression
              (mult_binary_expression
                (mult_binary_expression
                  (mult_binary_expression
                    (mult_binary_expression
                      (var_identifier
                        (post_identifier))
                      (mult_prec_operator)
                      (var_identifier
                        (post_identifier)))
                    (mult_prec_operator)
                    (var_identifier
                      (post_identifier)))
                  (mult_prec_operator)
                  (var_identifier
                    (post_identifier)))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier)))
              (mult_prec_operator)
              (var_identifier
                (post_identifier)))
            (mult_prec_operator)
            (var_identifier
              (post_identifier))))))))

================================================================================
two_way_deep
================================================================================

LineEdit := Rectangle {
    property <string> text <=> ti.text;
    ti := TextInput {  }
}

LiTest := Rectangle {
    li1 := LineEdit { text: "li1"; }
    li2 := LineEdit { text <=> li1.text; }
    li3 := LineEdit { text <=> li4.text; }
    li4 := LineEdit { text: "li4"; }
    property <bool> test_li: li1.text == "li1" && li3.text == "li4";
}

export TestCase := Window {

    li := LiTest {  }

    property <bool> test: li.test_li;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (string_value))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (post_identifier))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (binding_alias
                  (var_identifier)
                  (var_identifier
                    (post_identifier))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (string_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier
                (post_identifier))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (string_value))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier))))
            (comparison_operator)
            (value
              (string_value)))))))
  (export_modifier)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
two_way_priority
================================================================================

OpacityTwoWay := Rectangle {
    property <float> sub_opacity <=> rect.opacity;
    rect := Rectangle {
        opacity: 0.75;
    }
}

Compo := Rectangle {
    preferred-height: 10px;
    property<int> foo <=> self.bar;
    property<int> bar: 120;
}

export TestCase := Window {
    compo0 := Compo { foo: compo1.foo + 20; }
    compo1 := Compo {}
    compo2 := Compo { foo: compo1.foo + 10; }

    Rectangle {
        otw := OpacityTwoWay { sub_opacity: 0.5; }
        otw2 := OpacityTwoWay { sub_opacity: 0.5; }
    }

    property <int> override_bar: 22;
    force_instance := VerticalLayout {
        if true : Compo { bar <=> override_bar; }
    }

    property <int> compo0_foo: compo0.foo;
    property <int> compo2_foo: compo2.foo;
    property <float> otw_opacity <=> otw.sub_opacity;

    property <bool> test_override_bar: force_instance.preferred-height == 10px && override_bar == 22;

    property <bool> test: compo0_foo == 140 && compo2_foo == 130 && otw_opacity == 0.5 && otw2.sub_opacity == 0.5 && test_override_bar;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (float_value))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (reference_identifier)
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))))
  (export_modifier)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (add_binary_expression
                (var_identifier
                  (post_identifier))
                (add_prec_operator)
                (value
                  (int_value)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (add_binary_expression
                (var_identifier
                  (post_identifier))
                (add_prec_operator)
                (value
                  (int_value)))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (float_value))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (float_value)))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (if_statement
                (value
                  (bool_value))
                (component
                  (type_identifier)
                  (block
                    (block_statement
                      (binding_block_statement
                        (binding_alias
                          (var_identifier)
                          (var_identifier)))))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier
                (post_identifier))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (length_value))
                (mult_prec_operator)
                (var_identifier)))
            (comparison_operator)
            (value
              (int_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (comparison_binary_expression
                (comparison_binary_expression
                  (var_identifier)
                  (comparison_operator)
                  (mult_binary_expression
                    (value
                      (int_value))
                    (mult_prec_operator)
                    (var_identifier)))
                (comparison_operator)
                (mult_binary_expression
                  (value
                    (int_value))
                  (mult_prec_operator)
                  (var_identifier)))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (float_value))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier))))
            (comparison_operator)
            (mult_binary_expression
              (value
                (float_value))
              (mult_prec_operator)
              (var_identifier))))))))

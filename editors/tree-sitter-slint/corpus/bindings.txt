================================================================================
animated_default_geometry
================================================================================

TestCase := Rectangle {

    width: 100px;
    height: 200px;

    r := Rectangle {
        // default geometry for width & height
        animate height { duration: 1s; }
        animate width { duration: 1s; }
    }

    property<bool> test: r.width == 100px && r.height == 200px;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (comment)
              (animate_statement
                (var_identifier)
                (animate_declaration_list
                  (builtin_type_identifier)
                  (value
                    (number
                      (int_number)))
                  (ERROR
                    (UNEXPECTED ';'))))
              (animate_statement
                (var_identifier)
                (animate_declaration_list
                  (builtin_type_identifier)
                  (value
                    (number
                      (int_number)))
                  (ERROR
                    (UNEXPECTED ';')))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (ERROR
                (function_identifier))
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))))))

================================================================================
change_sub_property
================================================================================

SubElem := Rectangle {
    property <int> value: sub.value;
    callback change();
    change => { sub.value += 44; }
    sub := Rectangle {
        property <int> value: 55;
    }
}

TestCase := Rectangle {
    callback change();
    change => { sub.change() }
    property <int> toplevel: sub.value + 1;
    sub := SubElem { }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (callback_definition
          (function_identifier)
          (call_signature
            (formal_parameters)))
        (callback_event
          (function_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier
                  (post_identifier))
                (assignment_prec_operator)
                (value
                  (number
                    (int_number)))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (property_definition
                (builtin_type_identifier)
                (var_identifier)
                (property_expr
                  (value
                    (number
                      (int_number)))))))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (callback_definition
          (function_identifier)
          (call_signature
            (formal_parameters)))
        (callback_event
          (function_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature
                      (formal_parameters))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (add_binary_expression
              (var_identifier
                (post_identifier))
              (add_prec_operator)
              (value
                (number
                  (int_number))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))))))

================================================================================
change_sub_property2
================================================================================

SubElem := Rectangle {
    property <int> value: 55;
    callback change();
    change => { value += 44; }
}

TestCase := Rectangle {
    callback change();
    change => { sub.change(); sub2.change(); }
    property <int> toplevel: sub.value + sub2.value;
    sub := SubElem { }
    sub2 := SubElem { value : 1; }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (callback_definition
          (function_identifier)
          (call_signature
            (formal_parameters)))
        (callback_event
          (function_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (int_number))))))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (callback_definition
          (function_identifier)
          (call_signature
            (formal_parameters)))
        (callback_event
          (function_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier
                  (post_identifier
                    (function_call
                      (function_identifier)
                      (call_signature
                        (formal_parameters))))))
              (callback_call
                (var_identifier
                  (ERROR
                    (int_number))
                  (post_identifier
                    (function_call
                      (function_identifier)
                      (call_signature
                        (formal_parameters)))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (add_binary_expression
              (var_identifier
                (post_identifier))
              (add_prec_operator)
              (var_identifier
                (ERROR
                  (int_number))
                (post_identifier)))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (int_number)))))))))))

================================================================================
issue_1026_opacity_alias
================================================================================

RoundedIcon := Rectangle {
    property <float> background-opacity <=> background-fill.opacity;
    background-fill := Rectangle {
        background:  #ff7d34;
        opacity: 1.0;
    }
    property <float> o: background-fill.opacity;
}

Device := VerticalLayout {
    spacing: 5px;
    ri := RoundedIcon {
        background-opacity: 0.15;
    }

    property<float> o: ri.o;
}

Sub := Rectangle {
    property o <=> d.o;
    d := Device {}
}


TestCase := Rectangle {
    s := Sub {}
    d := Device {}
    property o1 <=> s.o;
    property o2 <=> d.o;
    property <bool> test: abs(o1 - 0.15) < 0.001 && abs(o2 - 0.15) < 0.001;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (color)))
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (float_number)))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier)))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (float_number)))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier)))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body)
      (ERROR
        (UNEXPECTED ')
        (UNEXPECTED '.')
        (UNEXPECTED ';')
        (UNEXPECTED ')
        (UNEXPECTED 'D'))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))
        (ERROR
          (UNEXPECTED '1')
          (int_number)
          (UNEXPECTED '.')
          (UNEXPECTED ';')
          (UNEXPECTED '2')
          (int_number)
          (UNEXPECTED '.')
          (UNEXPECTED ';'))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (comparison_binary_expression
              (comparison_binary_expression
                (function_call
                  (function_identifier)
                  (call_signature
                    (formal_parameters
                      (ERROR)
                      (formal_parameter
                        (add_binary_expression
                          (value
                            (number
                              (int_number)))
                          (add_prec_operator)
                          (value
                            (number
                              (float_number))))))))
                (comparison_operator)
                (mult_binary_expression
                  (value
                    (number
                      (float_number)))
                  (mult_prec_operator)
                  (function_call
                    (function_identifier)
                    (call_signature
                      (formal_parameters
                        (ERROR)
                        (formal_parameter
                          (add_binary_expression
                            (value
                              (number
                                (int_number)))
                            (add_prec_operator)
                            (value
                              (number
                                (float_number))))))))))
              (comparison_operator)
              (value
                (number
                  (float_number))))))))))

================================================================================
issue_385_default_geom
================================================================================

TestCase := Rectangle {
    width: 100px;
    height: 200px;

    r := Rectangle {
        width <=> root.width;
        height <=> root.height;
    }

    property<bool> test: r.width == 100px && r.height == 200px;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (var_identifier)
              (ERROR)
              (callback_call
                (var_identifier
                  (reference_identifier)
                  (post_identifier)))
              (var_identifier)
              (ERROR)
              (callback_call
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (ERROR
                (function_identifier))
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))))))

================================================================================
override
================================================================================

Compo := Text {
    property <int> prop_a: 10;
    property <int> prop_b;
    prop_b: 20;
    text: "hello";
}

TestCase := Rectangle {
    property <string> text: "ignore_me";
    c := Compo {
        prop_a: 1;
        prop_b: 2;
        text: "world";
    }

    property<int> prop_a: c.prop_a;
    property<int> prop_b: c.prop_b;
    property<string> prop_text: c.text;

    property<bool> test: prop_a == 1 && prop_b == 2 && prop_text == "world";
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (number
              (int_number))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (string
            (string_fragment))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (string
              (string_fragment))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (int_number))))
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (int_number))))
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (string
                  (string_fragment))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ERROR)
            (mult_binary_expression
              (mult_binary_expression
                (value
                  (number
                    (int_number)))
                (mult_prec_operator)
                (ERROR)
                (value
                  (number
                    (int_number))))
              (mult_prec_operator)
              (ERROR)
              (string
                (string_fragment)))))))))

================================================================================
two_way_bug
================================================================================

// There used to be a bug in the deduplicate_property_read pass that would mess up aliases

BoxWithButtons := Window {
    property <string> value <=> val.text;
    val := Text {}
}

export TestCase := BoxWithButtons {
    property <int> temperature: 24;
    value: {
        (temperature < 0 ? "" : "+") + temperature;
    }

    property <bool> test: value == "+24";
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body))))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (ERROR)
          (add_binary_expression
            (expression_body_paren
              (comparison_binary_expression
                (var_identifier)
                (comparison_operator)
                (ternary_expression
                  (value
                    (number
                      (int_number)))
                  (string)
                  (string
                    (string_fragment)))))
            (add_prec_operator)
            (var_identifier))))))
  (ERROR
    (user_type_identifier)
    (UNEXPECTED 'e')
    (UNEXPECTED 'v')
    (int_number)))

================================================================================
two_way_model
================================================================================

// Regression test for a bug in which an alias to a model property was not
// properly set because it was thought as constant

MenuItem := Rectangle {
    property <length> h <=> root.val;
    height: val;
    property <length> val;
}

export TestCase := Rectangle {
    VerticalLayout {
        for entry[idx] in [
            { val: 12px },
        ] : MenuItem {
            h: entry.val;
        }
        Rectangle {}
    }
    property <bool> test: root.preferred_height == 12px;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (reference_identifier)
            (post_identifier)))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (ERROR
            (var_identifier
              (index_operator
                (var_identifier)))
            (var_identifier)
            (ERROR
              (assignment_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))
            (assignment_prec_operator)
            (var_identifier))
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (post_identifier))))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body))))))
  (ERROR
    (user_type_identifier)
    (UNEXPECTED 'e')
    (UNEXPECTED 'e')
    (UNEXPECTED '_')
    (int_number)))

================================================================================
two_way_simple
================================================================================

TestCase := Rectangle {
    property<brush> extra_background <=> background;
    property<length> sub_width1 <=> sub.width;
    property<length> sub_width2: sub.width;

    property<int> sub_foo1: 44;
    property<int> sub_foo2: sub.foo;


    sub := Rectangle {
        width: 80phx;
        property<int> foo <=> root.sub_foo1;
    }

    if (true) : Rectangle { background: root.extra_background; }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier))
        (property_definition
          (builtin_type_identifier)
          (ERROR
            (int_number))
          (var_identifier
            (post_identifier)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (var_identifier
              (post_identifier))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (int_number)))
                (ERROR
                  (UNEXPECTED 'x')))
              (property_definition
                (builtin_type_identifier)
                (ERROR)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))
                (ERROR
                  (int_number))))))
        (if_statement_definition
          (expression_body_paren
            (value
              (language_constant)))
          (component_definition
            (user_type_identifier)
            (field_declaration_list
              (field_declaration_list_body
                (variable_set_equal
                  (var_identifier)
                  (assignment_prec_operator)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))))))))

================================================================================
change_sub_property_indirection
================================================================================

// hello, hello2 and alias are aliases
SubElem := Rectangle {
    property <string> hello <=> hello2;
    property <string> hello2;
    t := Text {
        text <=> hello;
    }
    property <string> alias <=> t.text;

    property <string> binding: hello2;
}

TestCase := Rectangle {
    property <string> public_alias: "ABC";

    sub_alias := SubElem {
        hello <=> public_alias;
        property <string> indirection: binding;
    }

    property <string> sub_text <=> sub_alias.indirection;
    property <bool> test: sub_text == "ABC";
}


--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier)
          (ERROR
            (int_number)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier)
                (ERROR
                  (UNEXPECTED 'h'))))))
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ERROR)
            (value
              (number
                (int_number))))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (string
              (string_fragment))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier)
                (ERROR
                  (UNEXPECTED 'u')))
              (property_definition
                (builtin_type_identifier)
                (var_identifier)
                (property_expr
                  (var_identifier))))))
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ERROR)
            (string
              (string_fragment))))))))

================================================================================
issue_345_opacity_animation
================================================================================

Sub := Rectangle {
    property <bool> cond;
    property <float> child_opacity: inner.opacity;
    inner := Rectangle {
        opacity: cond ? 0 : 1;
        animate opacity { duration: 1s; }
        background: green;
    }
}

TestCase := Rectangle {
    property cond <=> s.cond;
    property val <=> s.child_opacity;
    s := Sub {}
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (ternary_expression
                  (var_identifier)
                  (value
                    (number
                      (int_number)))
                  (value
                    (number
                      (int_number)))))
              (animate_statement
                (var_identifier)
                (animate_declaration_list
                  (builtin_type_identifier)
                  (value
                    (number
                      (int_number)))
                  (ERROR
                    (UNEXPECTED ';'))))
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (language_constant)))))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body)
      (ERROR
        (UNEXPECTED 'o')
        (UNEXPECTED '.')
        (UNEXPECTED 'o')
        (UNEXPECTED 'v')
        (UNEXPECTED '.')
        (UNEXPECTED '_')
        (UNEXPECTED ')
        (UNEXPECTED 'S')))))

================================================================================
multiple_two_way
================================================================================

O := Text {
    property <int> val;
    text: val;
    property <int> a: val + 1;
}

TestCase := Window {
    property <int> val: condition ? 2 : 4;
    property <bool> condition : false;
    HorizontalLayout {
        o1 := O { val <=> root.val; }
        o2 := O { val <=> root.val; }
        o3 := O { val <=> root.val; }
        o4 := O { val <=> root.val; }
        o5 := O { val <=> root.val; }
    }
    property <int> checksum: 10000 * o1.a + 1000 * o2.a + 100 * o3.a + 10 * o4.a + 1 * o5.a;
    property <bool> test: checksum == 55555;
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (add_binary_expression
              (var_identifier)
              (add_prec_operator)
              (value
                (number
                  (int_number)))))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ternary_expression
              (var_identifier)
              (value
                (number
                  (int_number)))
              (value
                (number
                  (int_number))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (language_constant))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (var_identifier)
                    (ERROR)
                    (callback_call
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (var_identifier)
                    (ERROR)
                    (callback_call
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (var_identifier)
                    (ERROR)
                    (callback_call
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (var_identifier)
                    (ERROR)
                    (callback_call
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (var_identifier)
                    (ERROR)
                    (callback_call
                      (var_identifier
                        (reference_identifier)
                        (post_identifier)))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (add_binary_expression
              (add_binary_expression
                (add_binary_expression
                  (add_binary_expression
                    (mult_binary_expression
                      (value
                        (number
                          (int_number)))
                      (mult_prec_operator)
                      (var_identifier
                        (ERROR
                          (int_number))
                        (post_identifier)))
                    (add_prec_operator)
                    (mult_binary_expression
                      (value
                        (number
                          (int_number)))
                      (mult_prec_operator)
                      (var_identifier
                        (ERROR
                          (int_number))
                        (post_identifier))))
                  (add_prec_operator)
                  (mult_binary_expression
                    (value
                      (number
                        (int_number)))
                    (mult_prec_operator)
                    (var_identifier
                      (ERROR
                        (int_number))
                      (post_identifier))))
                (add_prec_operator)
                (mult_binary_expression
                  (value
                    (number
                      (int_number)))
                  (mult_prec_operator)
                  (var_identifier
                    (ERROR
                      (int_number))
                    (post_identifier))))
              (add_prec_operator)
              (mult_binary_expression
                (value
                  (number
                    (int_number)))
                (mult_prec_operator)
                (var_identifier
                  (ERROR
                    (int_number))
                  (post_identifier))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ERROR)
            (value
              (number
                (int_number)))))))))

================================================================================
two_way_binding
================================================================================

OtherComp := Rectangle {
    property <string> t <=> text.text;
    property <string> get_text <=> text.text;
    text := Text {
        text: "to be overridden";
    }
    property <int> some_value: 42;
    property <int> some_value_alias <=> some_value;
}

TestCase := Rectangle {

    property <string> text1: "Hello";
    property <string> text2: "Blah";
    property <string> ti1_text: ti1.text;
    property <string> ti2_text: ti2.text;
    property <string> text_item_text: text_item.text;
    property <string> othercomp_t: "real value";
    property <string> othercomp_get_text: other_comp.get_text;
    property <int> othercomp_some_value;
    property <int> othercomp_some_value_alias <=> other_comp.some_value_alias;
    property <int> othercomp_some_value_alias2;

    ti1 := TextInput {
        text <=> text1;
    }

    ti2 := TextInput {
        text <=> text_item.text;
    }

    text_item := Text {
        text: text2;
    }

    Text {
        text <=> text1;
    }

    other_comp := OtherComp {
        t <=> root.othercomp_t;
        some_value <=> othercomp_some_value;
        some_value_alias <=> othercomp_some_value_alias2;
    }

    callback set_ti1(string);
    set_ti1(a) => { ti1.text = a; }
    callback set_ti2(string);
    set_ti2(a) => { ti2.text = a; }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (string
                  (string_fragment))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier)))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED '_'))
          (property_expr
            (var_identifier
              (ERROR
                (int_number))
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED '_'))
          (property_expr
            (var_identifier
              (ERROR
                (int_number))
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier)
                (ERROR
                  (UNEXPECTED 'e')
                  (int_number))))))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier
                  (ERROR
                    (UNEXPECTED 'e'))
                  (post_identifier))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (ERROR)
                (value
                  (number
                    (int_number)))))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier)
                (ERROR
                  (UNEXPECTED 'e')
                  (int_number))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (var_identifier)
              (ERROR)
              (callback_call
                (var_identifier
                  (reference_identifier)
                  (post_identifier)))
              (callback_call
                (var_identifier)
                (ERROR
                  (UNEXPECTED 't')))
              (callback_call
                (var_identifier)
                (ERROR
                  (UNEXPECTED 't')
                  (int_number))))))
        (callback_definition
          (function_identifier)
          (ERROR
            (int_number))
          (call_signature
            (formal_parameters
              (formal_parameter
                (builtin_type_identifier)))))
        (callback_event
          (function_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED '))
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier
                  (ERROR
                    (int_number))
                  (post_identifier))
                (assignment_prec_operator)
                (var_identifier)))))
        (callback_definition
          (function_identifier)
          (ERROR
            (int_number))
          (call_signature
            (formal_parameters
              (formal_parameter
                (builtin_type_identifier)))))
        (callback_event
          (function_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED '))
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier
                  (ERROR
                    (int_number))
                  (post_identifier))
                (assignment_prec_operator)
                (var_identifier)))))))))

================================================================================
two_way_binding2
================================================================================

OtherComp := Rectangle {
    property t <=> text.text;
    property get_text <=> text.text;
    text := Text {
        text: "to be overridden";
    }
    property <int> some_value: 42;
    property some_value_alias <=> some_value;
}

TestCase := Rectangle {

    property <string> text1: "Hello";
    property <string> text2: "Blah";
    property ti1_text <=> ti1.text_alias;
    property ti2_text <=> ti2.text_alias;
    property text_item_text <=> text_item.text;
    property <string> othercomp_t: "real value";
    property othercomp_get_text <=> other_comp.get_text;
    property <int> othercomp_some_value;
    property othercomp_some_value_alias <=> other_comp.some_value_alias;
    property <int> othercomp_some_value_alias2;

    ti1 := TextInput {
        property text_alias <=> text;
        text <=> text1;
    }

    ti2 := TextInput {
        property text_alias <=> text_alias_indirection;
        property text_alias_indirection <=> text;
        text <=> text_item.text;
    }

    text_item := Text {
        text: text2;
    }

    Text {
        text <=> text1;
    }

    other_comp := OtherComp {
        t <=> root.othercomp_t;
        some_value <=> othercomp_some_value;
        some_value_alias <=> othercomp_some_value_alias2;
    }

    callback set_ti1(string);
    set_ti1(a) => { ti1.text = a; }
    callback set_ti2(string);
    set_ti2(a) => { ti2.text = a; }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (ERROR
      (user_type_identifier)
      (ERROR
        (UNEXPECTED ')
        (UNEXPECTED 'e')
        (UNEXPECTED 'e'))
      (UNEXPECTED 'e')
      (UNEXPECTED 'e')
      (UNEXPECTED 'e')
      (UNEXPECTED 'e'))
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (string
            (string_fragment))))))
  (component_definition
    (user_type_identifier)
    (ERROR
      (UNEXPECTED '>')
      (UNEXPECTED 'o')
      (int_number)
      (UNEXPECTED 'o')
      (UNEXPECTED 'o')
      (UNEXPECTED 'T'))
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (string
              (string_fragment))))
        (ERROR
          (UNEXPECTED 'i')
          (int_number)
          (UNEXPECTED '_')
          (UNEXPECTED 'i')
          (int_number)
          (UNEXPECTED 'e')
          (UNEXPECTED 'i')
          (int_number)
          (UNEXPECTED '_')
          (UNEXPECTED 'i')
          (int_number)
          (UNEXPECTED 'e')
          (UNEXPECTED 'e')
          (UNEXPECTED 'e')
          (UNEXPECTED 'e'))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (string
              (string_fragment))))
        (ERROR
          (UNEXPECTED 't')
          (UNEXPECTED 't')
          (UNEXPECTED 'e'))
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (ERROR
          (UNEXPECTED 't')
          (UNEXPECTED 't')
          (UNEXPECTED 'o'))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)
            (ERROR
              (UNEXPECTED 'e')
              (UNEXPECTED 'e')
              (UNEXPECTED 'e')
              (UNEXPECTED 'e')
              (int_number))))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)
            (ERROR
              (UNEXPECTED 'e')
              (UNEXPECTED 'e')
              (UNEXPECTED 'i')
              (UNEXPECTED 'e')
              (UNEXPECTED 'i')
              (UNEXPECTED 'e')
              (UNEXPECTED 'e')
              (UNEXPECTED 'e')
              (UNEXPECTED 'e'))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (ERROR)
                (value
                  (number
                    (int_number)))))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier)
                (ERROR
                  (UNEXPECTED 'e')
                  (int_number))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (var_identifier)
              (ERROR)
              (callback_call
                (var_identifier
                  (reference_identifier)
                  (post_identifier)))
              (callback_call
                (var_identifier)
                (ERROR
                  (UNEXPECTED 't')))
              (callback_call
                (var_identifier)
                (ERROR
                  (UNEXPECTED 't')
                  (int_number))))))
        (callback_definition
          (function_identifier)
          (ERROR
            (int_number))
          (call_signature
            (formal_parameters
              (formal_parameter
                (builtin_type_identifier)))))
        (callback_event
          (function_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED '))
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier
                  (ERROR
                    (int_number))
                  (post_identifier))
                (assignment_prec_operator)
                (var_identifier)))))
        (callback_definition
          (function_identifier)
          (ERROR
            (int_number))
          (call_signature
            (formal_parameters
              (formal_parameter
                (builtin_type_identifier)))))
        (callback_event
          (function_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED '))
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier
                  (ERROR
                    (int_number))
                  (post_identifier))
                (assignment_prec_operator)
                (var_identifier)))))))))

================================================================================
two_way_binding_animation
================================================================================

TestCase := Rectangle {
    property <int> xx : 1000;

    animate x {
        duration: xx * 1ms;
        easing: ease;
    }

    property<int> hello: 40;
    animate hello {
        duration: 1200ms;
    }

    property<bool> condition: true;
    property<int> binding_dep: condition ? 100 : 150;
    animate binding_dep {
        duration: 1200ms;
    }

    t:= Text {
        font_weight <=> root.binding_dep;
    }
    property <int> t1_font: t.font_weight;
    property alias_hello <=> hello;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (animate_statement
          (var_identifier)
          (animate_declaration_list
            (builtin_type_identifier)
            (mult_binary_expression
              (var_identifier)
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))
            (builtin_type_identifier)
            (value
              (language_constant))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (animate_statement
          (var_identifier)
          (animate_declaration_list
            (builtin_type_identifier)
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (language_constant))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ternary_expression
              (var_identifier)
              (value
                (number
                  (int_number)))
              (value
                (number
                  (int_number))))))
        (animate_statement
          (var_identifier)
          (animate_declaration_list
            (builtin_type_identifier)
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (var_identifier)
              (ERROR)
              (callback_call
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED '_'))
          (property_expr
            (var_identifier
              (post_identifier)))))
      (ERROR
        (UNEXPECTED 'l')
        (UNEXPECTED 'h')))))

================================================================================
two_way_binding_extra
================================================================================



TestCase := Rectangle {
    width: 100phx;
    height: 100phx;

    property<length> xx: 50phx;
    property<length> ww <=> first.width;

    first := TouchArea {
        x <=> parent.xx;
        width: 50phx;
        enabled <=> second.enabled;
        height: 15phx;
        clicked => { result += 40; }
    }

    second := TouchArea {
        x <=> parent.xx;
        width <=> root.ww;
        height <=> first.height;
        clicked => { result += 300; }
        y: 50phx;
    }

    property <int> result: 5;
}



--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (number
              (int_number)))
          (ERROR
            (UNEXPECTED 'x')))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (number
              (int_number)))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number))))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (var_identifier)
              (ERROR)
              (callback_call
                (var_identifier
                  (reference_identifier)
                  (post_identifier)))
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (int_number)))
                (ERROR
                  (UNEXPECTED 'x')))
              (callback_call
                (var_identifier
                  (ERROR
                    (UNEXPECTED 'e'))
                  (post_identifier)))
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (int_number)))
                (ERROR
                  (UNEXPECTED 'x')))
              (callback_event
                (function_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (int_number))))))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (var_identifier)
              (ERROR)
              (callback_call
                (var_identifier
                  (reference_identifier)
                  (post_identifier)))
              (var_identifier)
              (ERROR)
              (callback_call
                (var_identifier
                  (reference_identifier)
                  (post_identifier)))
              (callback_call
                (var_identifier
                  (ERROR
                    (UNEXPECTED 'i'))
                  (post_identifier)))
              (callback_event
                (function_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (int_number)))))))
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (int_number)))
                (ERROR
                  (UNEXPECTED 'x'))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))))))

================================================================================
two_way_priority_default
================================================================================

// The visible and enabled property are set by default by Slint to true.
// But when overridden by an alias, the overridden value should take precedence.

export Button := Rectangle {
    property<bool> the_enabled <=> touch.enabled;
    property<bool> the_visible <=> touch.visible;
    background: !the_enabled ? blue : red;
    border-color: !the_visible ? green : yellow;
    border-width: 15px;
    touch := TouchArea {}
    fs := FocusScope {
        enabled <=> root.the_enabled;
        visible <=> root.the_visible;
    }
    property <bool> check: !fs.enabled && !touch.enabled && !fs.visible && !touch.visible;
}

export TestCase := Rectangle {
    VerticalLayout {
        spacing: 10px;
        b1 := Button { the_enabled: false; the_visible: false; }
        b2 := Button { the_enabled: false; the_visible: false; }
        b3 := Button { the_enabled: false; the_visible: false; }
        b4 := Button { the_enabled: false; the_visible: false; }
        b5 := Button { the_enabled: false; the_visible: false; }
        b6 := Button { the_enabled: false; the_visible: false; }
        b7 := Button { the_enabled: false; the_visible: false; }
    }

    property <bool> test: b1.check && b2.check && b3.check && b4.check && b5.check && b6.check && b7.check;
}


--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (unary_expression
            (unary_prec_operator)
            (ternary_expression
              (var_identifier)
              (value
                (language_constant))
              (value
                (language_constant)))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (unary_expression
            (unary_prec_operator)
            (ternary_expression
              (var_identifier)
              (value
                (language_constant))
              (value
                (language_constant)))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (var_identifier)
              (ERROR)
              (callback_call
                (var_identifier
                  (reference_identifier)
                  (post_identifier)))
              (var_identifier)
              (ERROR)
              (callback_call
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (mult_binary_expression
              (mult_binary_expression
                (mult_binary_expression
                  (unary_expression
                    (unary_prec_operator)
                    (var_identifier
                      (post_identifier)))
                  (mult_prec_operator)
                  (unary_expression
                    (unary_prec_operator)
                    (var_identifier
                      (post_identifier))))
                (mult_prec_operator)
                (unary_expression
                  (unary_prec_operator)
                  (var_identifier
                    (post_identifier))))
              (mult_prec_operator)
              (unary_expression
                (unary_prec_operator)
                (var_identifier
                  (post_identifier)))))))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (value_with_units
                    (number
                      (int_number))
                    (unit_type))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant)))
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant)))
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant)))
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant)))
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant)))
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant)))
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant)))
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant)))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (mult_binary_expression
              (mult_binary_expression
                (mult_binary_expression
                  (mult_binary_expression
                    (mult_binary_expression
                      (mult_binary_expression
                        (var_identifier
                          (ERROR
                            (int_number))
                          (post_identifier))
                        (mult_prec_operator)
                        (var_identifier
                          (ERROR
                            (int_number))
                          (post_identifier)))
                      (mult_prec_operator)
                      (var_identifier
                        (ERROR
                          (int_number))
                        (post_identifier)))
                    (mult_prec_operator)
                    (var_identifier
                      (ERROR
                        (int_number))
                      (post_identifier)))
                  (mult_prec_operator)
                  (var_identifier
                    (ERROR
                      (int_number))
                    (post_identifier)))
                (mult_prec_operator)
                (var_identifier
                  (ERROR
                    (int_number))
                  (post_identifier)))
              (mult_prec_operator)
              (var_identifier
                (ERROR
                  (int_number))
                (post_identifier)))))))))

================================================================================
two_way_deep
================================================================================

LineEdit := Rectangle {
    property <string> text <=> ti.text;
    ti := TextInput {  }
}

LiTest := Rectangle {
    li1 := LineEdit { text: "li1"; }
    li2 := LineEdit { text <=> li1.text; }
    li3 := LineEdit { text <=> li4.text; }
    li4 := LineEdit { text: "li4"; }
    property <bool> test_li: li1.text == "li1" && li3.text == "li4";
}

export TestCase := Window {

    li := LiTest {  }

    property <bool> test: li.test_li;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (string
                  (string_fragment))))))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier
                  (ERROR
                    (UNEXPECTED 'i')
                    (int_number))
                  (post_identifier))))))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier
                  (ERROR
                    (UNEXPECTED 'i')
                    (int_number))
                  (post_identifier))))))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (string
                  (string_fragment))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ERROR
              (ERROR
                (int_number))
              (function_identifier))
            (mult_binary_expression
              (string
                (string_fragment))
              (mult_prec_operator)
              (ERROR
                (ERROR
                  (int_number))
                (function_identifier))
              (string
                (string_fragment))))))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))))))

================================================================================
two_way_priority
================================================================================

OpacityTwoWay := Rectangle {
    property <float> sub_opacity <=> rect.opacity;
    rect := Rectangle {
        opacity: 0.75;
    }
}

Compo := Rectangle {
    preferred-height: 10px;
    property<int> foo <=> self.bar;
    property<int> bar: 120;
}

export TestCase := Window {
    compo0 := Compo { foo: compo1.foo + 20; }
    compo1 := Compo {}
    compo2 := Compo { foo: compo1.foo + 10; }

    Rectangle {
        otw := OpacityTwoWay { sub_opacity: 0.5; }
        otw2 := OpacityTwoWay { sub_opacity: 0.5; }
    }

    property <int> override_bar: 22;
    force_instance := VerticalLayout {
        if true : Compo { bar <=> override_bar; }
    }

    property <int> compo0_foo: compo0.foo;
    property <int> compo2_foo: compo2.foo;
    property <float> otw_opacity <=> otw.sub_opacity;

    property <bool> test_override_bar: force_instance.preferred-height == 10px && override_bar == 22;

    property <bool> test: compo0_foo == 140 && compo2_foo == 130 && otw_opacity == 0.5 && otw2.sub_opacity == 0.5 && test_override_bar;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (float_number))))))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number))))))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (add_binary_expression
                  (var_identifier
                    (ERROR
                      (int_number))
                    (post_identifier))
                  (add_prec_operator)
                  (value
                    (number
                      (int_number))))))))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (add_binary_expression
                  (var_identifier
                    (ERROR
                      (int_number))
                    (post_identifier))
                  (add_prec_operator)
                  (value
                    (number
                      (int_number))))))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (float_number)))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (float_number))))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (if_statement_definition
                (value
                  (language_constant))
                (component_definition
                  (user_type_identifier)
                  (field_declaration_list
                    (field_declaration_list_body
                      (callback_call
                        (var_identifier)
                        (ERROR
                          (UNEXPECTED 'v'))))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED '_'))
          (property_expr
            (var_identifier
              (ERROR
                (int_number))
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED '_'))
          (property_expr
            (var_identifier
              (ERROR
                (int_number))
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (ERROR)
              (value
                (number
                  (int_number))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (var_identifier))
            (int_number)
            (UNEXPECTED '_')
            (property_expr
              (mult_binary_expression
                (value
                  (number
                    (int_number)))
                (mult_prec_operator)
                (var_identifier)))
            (int_number)
            (UNEXPECTED '_')
            (property_expr
              (mult_binary_expression
                (value
                  (number
                    (int_number)))
                (mult_prec_operator)
                (var_identifier)))
            (value
              (number
                (float_number)))
            (mult_prec_operator)
            (ERROR
              (int_number))
            (function_identifier))
          (property_expr
            (mult_binary_expression
              (value
                (number
                  (float_number)))
              (mult_prec_operator)
              (var_identifier))))))))

================================================================================
box_shadow_use
================================================================================

// Test to show the internal `BoxShadow` element. This can be used for manual
// visual verification and it also serves as a test to ensure that such generated
// code compiles.

// Shows three colored rectangles with drop shadow in a vertical box layout. The first
// is manually created, the other two come out of a repeater.

// Additionally, there are three green rectangles at the bottom placed diagonally
// using equal spacing and manual calcuation, using a repeater.

BlueRect := Rectangle {
    background: blue;
    border-radius: 10px;
    drop-shadow-offset-x: 10px;
    drop-shadow-offset-y: 10px;
    drop-shadow-color: #00000080;
    drop-shadow-blur: 5px;
    opacity: 0.5;
    clip: true;
}

TestCase := Window {
    width: 800px;
    height: 600px;

    VerticalLayout {
        padding: 50px;

        BlueRect {}

        for r[i] in [
            {color: #0f0 },
            {color: #f00 },
        ]: Rectangle {
            background: r.color;
            drop-shadow-offset-x: 10px;
            drop-shadow-offset-y: 10px;
            drop-shadow-color: #00000080;
            drop-shadow-blur: 5px;
        }

        Rectangle {
            clip: true;
            border-color: black;
            border-width: 1px;
            border-radius: 2px;

            Rectangle {
                x: parent.width / 2;
                y: parent.height / 2;
                width: parent.width / 2;
                height: parent.height / 4;

                background: blue;

                drop-shadow-offset-x: 10px;
                drop-shadow-offset-y: 10px;
                drop-shadow-color: #249a04;
                drop-shadow-blur: 3px;
            }
        }
    }

    for i in 3: Rectangle {
        background: green;
        border-color: black;
        border-width: 1px;

        x: 100px + i * 50px;
        y: 300px + i * 30px;
        width: 30px;
        height: 20px;

        drop-shadow-offset-x: 5px;
        drop-shadow-offset-y: 5px;
        drop-shadow-color: #00000080;
        drop-shadow-blur: 5px;
    }
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (type_identifier)))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (color_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (float_value))))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (bool_value)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (component
                (type_identifier)
                (block)))
            (block_statement
              (for_loop
                (var_identifier
                  (index_operator
                    (type_identifier)))
                (for_range
                  (value_list
                    (anon_struct
                      (var_identifier)
                      (value
                        (color_value)))
                    (anon_struct
                      (var_identifier)
                      (value
                        (color_value)))))
                (component
                  (type_identifier)
                  (block
                    (block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (var_identifier
                          (post_identifier))))
                    (block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (length_value))))
                    (block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (length_value))))
                    (block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (color_value))))
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value)))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (bool_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (type_identifier)))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (mult_binary_expression
                              (var_identifier
                                (reference_identifier)
                                (post_identifier))
                              (mult_prec_operator)
                              (value
                                (int_value)))))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (mult_binary_expression
                              (var_identifier
                                (reference_identifier)
                                (post_identifier))
                              (mult_prec_operator)
                              (value
                                (int_value)))))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (mult_binary_expression
                              (var_identifier
                                (reference_identifier)
                                (post_identifier))
                              (mult_prec_operator)
                              (value
                                (int_value)))))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (mult_binary_expression
                              (var_identifier
                                (reference_identifier)
                                (post_identifier))
                              (mult_prec_operator)
                              (value
                                (int_value)))))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (type_identifier)))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (length_value))))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (length_value))))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (color_value))))
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (length_value))))))))))))
      (block_statement
        (for_loop
          (var_identifier)
          (for_range)
          (component
            (type_identifier)
            (block
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (type_identifier)))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (type_identifier)))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (length_value))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (add_binary_expression
                    (value
                      (length_value))
                    (add_prec_operator)
                    (mult_binary_expression
                      (type_identifier)
                      (mult_prec_operator)
                      (value
                        (length_value))))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (add_binary_expression
                    (value
                      (length_value))
                    (add_prec_operator)
                    (mult_binary_expression
                      (type_identifier)
                      (mult_prec_operator)
                      (value
                        (length_value))))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (length_value))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (length_value))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (length_value))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (length_value))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (color_value))))
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))))))))

================================================================================
color
================================================================================

Win := Window {
    property <color> base: #00007F;
    GridLayout {
        r := Rectangle {
            background: base;
        }
        Rectangle {
            background: base.brighter(50%);
        }
        Rectangle {
            background: base.darker(50%);
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (color_value))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier)))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier
                      (post_identifier
                        (function_call
                          (function_identifier)
                          (call_signature
                            (value
                              (percent_value))))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier
                      (post_identifier
                        (function_call
                          (function_identifier)
                          (call_signature
                            (value
                              (percent_value))))))))))))))))

================================================================================
colored_image
================================================================================

Win := Window {
    GridLayout {
        Image {
            source: @image-url("../../../examples/memory/icons/tile_logo.png");
        }
        Image {
            source: @image-url("../../../examples/memory/icons/tile_logo.png");
            colorize: yellow;
        }
        Image {
            row: 1;
            source: @image-url("../../../examples/memory/icons/tile_logo.png");
            colorize: @linear-gradient(45deg, blue, red);
        }
        Image {
            source: @image-url("../../../examples/memory/icons/tile_logo.png");
            colorize: @linear-gradient(0, red, yellow, green, transparent);
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (function_call
                      (function_identifier)
                      (call_signature
                        (value
                          (string_value
                            (_string_fragment)))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (function_call
                        (function_identifier)
                        (call_signature
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier)))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (function_call
                        (function_identifier)
                        (call_signature
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (function_call
                      (function_identifier)
                      (call_signature
                        (value
                          (angle_value))
                        (type_identifier)
                        (type_identifier)))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (function_call
                        (function_identifier)
                        (call_signature
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (function_call
                      (function_identifier)
                      (call_signature
                        (value
                          (int_value))
                        (type_identifier)
                        (type_identifier)
                        (type_identifier)
                        (type_identifier)))))))))))))

================================================================================
image_fit
================================================================================

Win := Window {
    GridLayout {
        Image {
            source: @image-url("../../../examples/printerdemo/ui/images/cat.jpg");
        }
        Image {
            source: @image-url("../../../examples/printerdemo/ui/images/cat.jpg");
            image-fit: contain;
        }
        Image {
            row: 1;
            source: @image-url("../../../examples/printerdemo/ui/images/cat.jpg");
            image-fit: cover;
        }
        Image {
            source: @image-url("../../../examples/printerdemo/ui/images/cat.jpg");
            image-fit: fill;
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (function_call
                      (function_identifier)
                      (call_signature
                        (value
                          (string_value
                            (_string_fragment)))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (function_call
                        (function_identifier)
                        (call_signature
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier)))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (function_call
                        (function_identifier)
                        (call_signature
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier)))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (function_call
                        (function_identifier)
                        (call_signature
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier)))))))))))

================================================================================
image_rendering
================================================================================

export MainWindow := Window {
    title: "Slint Image Scaling Example";
    preferred-width: 800px;
    preferred-height: 600px;

    HorizontalLayout {
        Image {
            source: @image-url("../../../examples/printerdemo/ui/images/cat.jpg");
            image-rendering: smooth;
        }
        Image {
            source: @image-url("../../../examples/printerdemo/ui/images/cat.jpg");
            image-rendering: pixelated;
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (export_modifier)
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (string_value
              (_string_fragment)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (function_call
                        (function_identifier)
                        (call_signature
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier)))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (function_call
                        (function_identifier)
                        (call_signature
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier)))))))))))

================================================================================
opacity
================================================================================

Comp := Rectangle {
    Rectangle {
        width: 5%;
        height: 5%;
        background: white;
        opacity: 1;
    }
}


TestCase := Window {
    width: 800px;
    height: 600px;
    background: green;

    Rectangle {
        background: red;
        width: 50%;
        height: 50%;
        opacity: 0.5;
    }

    Comp {
        background: blue;
        x: parent.width / 4;
        y: parent.height / 4;
        width: 50%;
        height: 50%;
        opacity: 0.5;
        Rectangle {
            width: 10%;
            height: 10%;
            background: yellow;
        }
    }

    for i in 3 : Rectangle {
        background: black;
        width: 10%;
        height: 10%;
        opacity: 0.2 * (i + 1);
        y: parent.height / 3;
        x: parent.width / 4 * i;
    }


}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (percent_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (percent_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (int_value))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (type_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (percent_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (percent_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (float_value))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (mult_binary_expression
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))
                  (mult_prec_operator)
                  (value
                    (int_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (mult_binary_expression
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))
                  (mult_prec_operator)
                  (value
                    (int_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (percent_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (percent_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (float_value))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (percent_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (percent_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier))))))))
      (block_statement
        (for_loop
          (var_identifier)
          (for_range)
          (component
            (type_identifier)
            (block
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (type_identifier)))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (percent_value))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (percent_value))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (mult_binary_expression
                    (value
                      (float_value))
                    (mult_prec_operator)
                    (add_binary_expression
                      (type_identifier)
                      (add_prec_operator)
                      (value
                        (int_value))))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (mult_binary_expression
                    (var_identifier
                      (reference_identifier)
                      (post_identifier))
                    (mult_prec_operator)
                    (value
                      (int_value)))))
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (mult_binary_expression
                  (mult_binary_expression
                    (var_identifier
                      (reference_identifier)
                      (post_identifier))
                    (mult_prec_operator)
                    (value
                      (int_value)))
                  (mult_prec_operator)
                  (type_identifier))))))))))

================================================================================
path_fill_rule
================================================================================

PathFillRule := Window {
    GridLayout {
        Row {
            Text {
                text: "The rectangle to the right should have a hole in the center";
            }
            Path {
                commands: "M210,0  h90 v90 h-90 z M230,20 v50 h50 v-50 z";
                fill: black;
                fill-rule: evenodd;
                stroke: red;
                stroke-width: 1px;
            }
        }
        Row {
            Text {
                text: "The rectangle to the right should be filled in the center";
            }
            Path {
                commands: "M210,0  h90 v90 h-90 z M230,20 v50 h50 v-50 z";
                fill: black;
                fill-rule: nonzero;
                stroke: red;
                stroke-width: 1px;
            }
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (string_value
                                (_string_fragment)))))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (type_identifier)))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (type_identifier)))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (type_identifier)))
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (length_value)))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (string_value
                                (_string_fragment)))))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (type_identifier)))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (type_identifier)))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (type_identifier)))
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (length_value)))))))))))))))

================================================================================
path_viewbox
================================================================================

RectPath := Path {
    MoveTo {
        x: 0;
        y: 0;
    }

    LineTo {
        x: 100;
        y: 0;
    }

    LineTo {
        x: 100;
        y: 100;
    }

    LineTo {
        x: 0;
        y: 100;
    }

    Close {}
}

PathViewBox := Window {
    preferred-width: 600px;
    preferred-height: 600px;

    // This is the reference path rectangle
    RectPath {
        x: 100px;
        y: 100px;
        width: 100px;
        height: 100px;

        stroke-width: 1px;
        stroke: black;
    }

    // This path rectangle uses an unclipped viewbox and therefore
    // draws outside the boundaries of the underlying green rectangle.
    Rectangle {
        background: #26e115da;
        x: 300px;
        y: 100px;
        width: 100px;
        height: 100px;

        RectPath {
            width: 100px;
            height: 100px;

            stroke-width: 1px;
            stroke: black;

            viewbox-x: 50;
            viewbox-y: 0;
            viewbox-width: 100;
            viewbox-height: 100;
        }
    }

    // This path rectangle uses an clipped viewbox and therefore
    // draws only inside the boundaries of the underlying green rectangle.
    Rectangle {
        background: #26e115da;
        x: 100px;
        y: 300px;
        width: 100px;
        height: 100px;

        RectPath {
            width: 100px;
            height: 100px;

            stroke-width: 1px;
            stroke: black;

            clip: true;

            viewbox-x: 50;
            viewbox-y: 0;
            viewbox-width: 100;
            viewbox-height: 100;
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (int_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (int_value))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (int_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (int_value))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (int_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (int_value))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (int_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (int_value))))))
      (block_statement
        (component
          (type_identifier)
          (block)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (comment)
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (type_identifier)))))
      (comment)
      (comment)
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (color_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (type_identifier)))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value)))))))))
      (comment)
      (comment)
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (color_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (type_identifier)))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (bool_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value))))))))))))

================================================================================
plusminus
================================================================================

Btn := Rectangle {
    property<string> button_text;
    callback clicked;
    width: 100phx;
    height: 75phx;
    TouchArea {
        width: 100phx;
        height: 75phx;
        clicked => { root.clicked() }
    }
    Text {
        x: 50phx;
        y: 10phx;
        text: button_text;
        color: black;
    }
}

PlusMinus := Rectangle {
    width: 100phx;
    height: 300phx;
    background: white;

    property<int> counter;

    GridLayout {
        Row {
            Btn {
                clicked => { counter -= 1 }
                button_text: "-";
            }
        }
        Row {
            Text {
                text: counter;
                color: black;
            }
        }
        Row {
            Btn {
                clicked => { counter += 1 }
                button_text: "+";
            }
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (var_identifier
                    (reference_identifier)
                    (post_identifier
                      (function_call
                        (function_identifier)
                        (call_signature))))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (type_identifier)))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (type_identifier)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (callback_event
                            (function_identifier)
                            (block
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (value
                                  (int_value))))))
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (string_value
                              (_string_fragment))))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (type_identifier)))
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (type_identifier))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (callback_event
                            (function_identifier)
                            (block
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (value
                                  (int_value))))))
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (string_value
                              (_string_fragment))))))))))))))))

================================================================================
rectangle_clip
================================================================================

// This should render as a rectangle with a black border and
// green "fill".

export Test := Window {
    background: white;

    TouchArea {
        clicked => { r.clip = !r.clip; }
    }

    r:= Rectangle {
        x: 50px;
        y: 50px;
        width: 300px;
        height: 300px;
        border-radius: 25px;
        border-width: 20px;
        border-color: black;

        clip: true;

        Rectangle {
            x: -20px;
            y: -20px;
            width: parent.width + 20px;
            height: parent.height + 20px;
            background: green;
        }

        Text {
            color: blue;
            y: 10px;
            text: "This Text is clipped";
            font-size: 24px;
        }

        Rectangle {
            x: 150px;
            y: 150px;
            width: 200px;
            height: 200px;
            background: red;
        }

        Image {
            source: @image-url("../../../logo/slint-logo-square-light-128x128.png");
            y: 50px;
            x: -30px;
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (component_definition
    (export_modifier)
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (type_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (assignment_expr
                    (var_identifier
                      (post_identifier))
                    (assignment_prec_operator)
                    (unary_expression
                      (unary_prec_operator)
                      (var_identifier
                        (post_identifier))))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (bool_value))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (unary_expression
                        (unary_prec_operator)
                        (value
                          (length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (unary_expression
                        (unary_prec_operator)
                        (value
                          (length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (add_binary_expression
                        (var_identifier
                          (reference_identifier)
                          (post_identifier))
                        (add_prec_operator)
                        (value
                          (length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (add_binary_expression
                        (var_identifier
                          (reference_identifier)
                          (post_identifier))
                        (add_prec_operator)
                        (value
                          (length_value)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier)))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (type_identifier)))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (string_value
                          (_string_fragment)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (length_value))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier)))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (function_call
                        (function_identifier)
                        (call_signature
                          (value
                            (string_value
                              (_string_fragment)))))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (unary_expression
                      (unary_prec_operator)
                      (value
                        (length_value)))))))))))))

================================================================================
sample_component
================================================================================

export struct MyStruct := {
    foo: int,
    bar: string,
}

SampleComponent := Window {
    property<int> counter;
    property<string> user_name;
    callback hello;
    // ... maybe more elements here
}
--------------------------------------------------------------------------------

(source_file
  (struct_definition
    (export_modifier)
    (type_identifier)
    (type_anon_struct
      (var_identifier)
      (type
        (type_identifier))
      (ERROR
        (UNEXPECTED 'a'))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (callback
          (function_identifier)))
      (comment))))

================================================================================
window_default_font
================================================================================

// Test for manual visual verification of default font properties of Window
//

TestCase := Window {
    width: 800px;
    height: 600px;

    default-font-family: "Courier New";
    default-font-size: 48px;

    GridLayout {
        Text {
            text: "This text should be shown in 48px Courier New\nIt's a fixed width font so the characters should align";
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (string_value
              (_string_fragment)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (string_value
                        (_string_fragment)
                        (_string_fragment)))))))))))))

================================================================================
hello
================================================================================

TwoRectangle := Rectangle {

    callback clicked;

    Rectangle {
        x: 50phx;
        y: 50.0phx;
        width: 25phx;
        height: 25phx;
        background: red;

        my_area := TouchArea {
            width: 25phx;
            height: 25phx;
            clicked => { root.clicked() }
        }
    }
}

ButtonRectangle := Rectangle {
    property<string> button_text;
    callback clicked;
    width: 100phx;
    height: 75phx;

    inner := Rectangle {
        background: { area.pressed ? green : root.background };
        animate background { duration: 500ms; }
        area := TouchArea {
            width: inner.width;
            height: inner.height;
            clicked => { root.clicked() }
        }
        Text {
            animate x { duration: 500ms; }
            animate y { duration: 500ms; }
            x: { area.pressed ? 60phx : 50phx; }
            y: { area.pressed ? 20phx : 10phx; }
            text: button_text;
            width: root.width;
            height: root.height;
            horizontal-alignment: left;
            vertical-alignment: center;
        }
        animate x { duration: 500ms; }
        animate y { duration: 500ms; }
        animate width { duration: 500ms; }
        animate height { duration: 500ms; }
        x: { area.pressed ? 0phx-10phx : 0phx }
        y: { area.pressed ? 0phx-10phx : 0phx; }
        width: { area.pressed ? (root.width + 20phx) : root.width; }
        height: { area.pressed ? (root.height + 20phx) : root.height; }
    }
}

Hello := Rectangle {

    callback foobar;
    callback plus_clicked;
    callback minus_clicked;

    background: white;

    TwoRectangle {
        width: 100phx;
        height: 100phx;
        background: blue;
        clicked => { foobar() }
    }
    Rectangle {
        x: 100phx;
        y: 100phx;
        width: (100phx);
        height: {100phx}
        background: green;
        Rectangle {
            x: 50phx;
            y: 50.0phx;
            width: 25phx;
            height: 25phx;
            background: yellow;
        }
    }
    Image {
        x: 200phx;
        y: 200phx;
        source: @image-url("../../../examples/memory/icons/tile_logo.png");
    }

    ButtonRectangle {
        background: #888;
        x: 50phx;
        y: 225phx;
        clicked => { counter += 1 }
        button_text: "+";
    }
    property<int> counter;
    counter_label := Text { x: 100phx; y: 300phx; text: counter; color: black; }
    ButtonRectangle {
        background: #888;
        x: 50phx;
        y: 350phx;
        clicked => { minus_clicked() }
        button_text: "-";
    }

     Path {
        x: 100phx;
        y: 300phx;
        fill: green;
        stroke: black;
        stroke_width: 2px;

        MoveTo {
            x: 0;
            y: 0;
        }

        LineTo {
            x: 100;
            y: 50;
        }
        LineTo {
            x: 0;
            y: 100;
        }

        ArcTo {
            x: 0;
            y: 0;
            radius_x: 10;
            radius_y: 10;
        }

//        M 0 0 C 15.3333 3.6667 92 1 48 46 Q -25 54 0 0
        CubicTo {
            x: 48;
            y: 46;
            control-1-x: 15;
            control-1-y: 3;
            control-2-x: 92;
            control-2-y: 1;
        }

        QuadraticTo {
            x: 0;
            y: 0;
            control-x: -25;
            control-y: 54;
        }

        Close {}
    }

    Path {
        commands: ta.pressed ? root.arrow_down_commands : root.funky-shape-commands;
        x: 100phx;
        y: 500phx;
        stroke: black;
        stroke_width: 2px;
    }

    ta := TouchArea {

    }

    property <string> arrow_down_commands: "M21.8,311.1l84.2-82.1c15.7-15.2,41-15.2,56.7,0l341.1,304.1l333.7-297.5c15.5-15.2,41-15.2,56.6,0l84.3,82.1c15.6,15.2,15.6,40,0,55.2L531.7,771c-15.7,15.3-41,15.3-56.7,0l-6.9-6.7L21.8,366.3C6.1,351,6.1,326.3,21.8,311.1z";
    property <string> funky_shape_commands: "M 100 300 Q 150 50 250 150 C 250 300 300 300 300 450 A 50 50 0 1 0 450 450 L 550 300";
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (physical_length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (physical_length_value))))
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (block
                        (var_identifier
                          (reference_identifier)
                          (post_identifier
                            (function_call
                              (function_identifier)
                              (call_signature)))))))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_block
                (var_identifier)
                (assignment_prec_operator)
                (block
                  (ternary_expression
                    (var_identifier
                      (post_identifier))
                    (type_identifier)
                    (var_identifier
                      (reference_identifier)
                      (post_identifier))))))
            (block_statement
              (animate_statement
                (var_identifier)
                (animate_body
                  (value
                    (duration_value)))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (post_identifier))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (post_identifier))))
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (block
                        (var_identifier
                          (reference_identifier)
                          (post_identifier
                            (function_call
                              (function_identifier)
                              (call_signature))))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (animate_statement
                      (var_identifier)
                      (animate_body
                        (value
                          (duration_value)))))
                  (block_statement
                    (animate_statement
                      (var_identifier)
                      (animate_body
                        (value
                          (duration_value)))))
                  (block_statement
                    (assignment_block
                      (var_identifier)
                      (assignment_prec_operator)
                      (block
                        (ternary_expression
                          (var_identifier
                            (post_identifier))
                          (value
                            (physical_length_value))
                          (value
                            (physical_length_value))))))
                  (block_statement
                    (assignment_block
                      (var_identifier)
                      (assignment_prec_operator)
                      (block
                        (ternary_expression
                          (var_identifier
                            (post_identifier))
                          (value
                            (physical_length_value))
                          (value
                            (physical_length_value))))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (type_identifier)))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (type_identifier)))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier)))))
            (block_statement
              (animate_statement
                (var_identifier)
                (animate_body
                  (value
                    (duration_value)))))
            (block_statement
              (animate_statement
                (var_identifier)
                (animate_body
                  (value
                    (duration_value)))))
            (block_statement
              (animate_statement
                (var_identifier)
                (animate_body
                  (value
                    (duration_value)))))
            (block_statement
              (animate_statement
                (var_identifier)
                (animate_body
                  (value
                    (duration_value)))))
            (block_statement
              (assignment_block
                (var_identifier)
                (assignment_prec_operator)
                (block
                  (ternary_expression
                    (var_identifier
                      (post_identifier))
                    (add_binary_expression
                      (value
                        (physical_length_value))
                      (add_prec_operator)
                      (value
                        (physical_length_value)))
                    (value
                      (physical_length_value))))))
            (block_statement
              (assignment_block
                (var_identifier)
                (assignment_prec_operator)
                (block
                  (ternary_expression
                    (var_identifier
                      (post_identifier))
                    (add_binary_expression
                      (value
                        (physical_length_value))
                      (add_prec_operator)
                      (value
                        (physical_length_value)))
                    (value
                      (physical_length_value))))))
            (block_statement
              (assignment_block
                (var_identifier)
                (assignment_prec_operator)
                (block
                  (ternary_expression
                    (var_identifier
                      (post_identifier))
                    (add_binary_expression
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))
                      (add_prec_operator)
                      (value
                        (physical_length_value)))
                    (var_identifier
                      (reference_identifier)
                      (post_identifier))))))
            (assignment_block
              (var_identifier)
              (assignment_prec_operator)
              (block
                (ternary_expression
                  (var_identifier
                    (post_identifier))
                  (add_binary_expression
                    (var_identifier
                      (reference_identifier)
                      (post_identifier))
                    (add_prec_operator)
                    (value
                      (physical_length_value)))
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (type_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (block_statement
                    (function_call
                      (function_identifier)
                      (call_signature)))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_block
                (var_identifier)
                (assignment_prec_operator)
                (block
                  (value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (physical_length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (physical_length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (physical_length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (physical_length_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (function_call
                (function_identifier)
                (call_signature
                  (value
                    (string_value
                      (_string_fragment)))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (color_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value))))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (string_value
                  (_string_fragment)))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (type_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (color_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (block_statement
                    (function_call
                      (function_identifier)
                      (call_signature))))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (string_value
                  (_string_fragment)))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value))))))
            (comment)
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (unary_expression
                        (unary_prec_operator)
                        (value
                          (int_value)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value))))))
            (block_statement
              (component
                (type_identifier)
                (block))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (ternary_expression
                  (var_identifier
                    (post_identifier))
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (length_value))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (string_value
              (_string_fragment)))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (string_value
              (_string_fragment))))))))

================================================================================
key_press
================================================================================

W := Window {
    VerticalLayout {
        Rectangle { background: field.has_focus ? blue: red;  }
        field := FocusScope {
            vertical_stretch: 1;
            key-pressed(event) => {
                if (event.text == Key.F1) {
                    debug("F1");
                }
                if (event.text == Key.PageUp) {
                    debug("PageUp");
                }
                if (event.modifiers.control) {
                    debug("   (control modifier pressed)");
                }
                if (event.modifiers.alt) {
                    debug("   (alt modifier pressed)");
                }
                if (event.modifiers.shift) {
                    debug("   (shift modifier pressed)");
                }
                if (event.modifiers.meta) {
                    debug("   (meta modifier pressed)");
                }
                debug(event.text);
                t.text += event.text;
                accept
            }
            Rectangle { background: yellow; }
        }
        t:= Text {
            text: "> ";
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (ternary_expression
                      (var_identifier
                        (post_identifier))
                      (type_identifier)
                      (type_identifier))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (call_signature
                        (type_identifier))
                      (block
                        (block_statement
                          (if_statement
                            (comparison_binary_expression
                              (var_identifier
                                (post_identifier))
                              (comparison_operator)
                              (var_identifier
                                (post_identifier)))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (function_call
                                  (function_identifier)
                                  (call_signature
                                    (value
                                      (string_value
                                        (_string_fragment)))))))))
                        (block_statement
                          (if_statement
                            (comparison_binary_expression
                              (var_identifier
                                (post_identifier))
                              (comparison_operator)
                              (var_identifier
                                (post_identifier)))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (function_call
                                  (function_identifier)
                                  (call_signature
                                    (value
                                      (string_value
                                        (_string_fragment)))))))))
                        (block_statement
                          (if_statement
                            (var_identifier
                              (post_identifier)
                              (post_identifier))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (function_call
                                  (function_identifier)
                                  (call_signature
                                    (value
                                      (string_value
                                        (_string_fragment)))))))))
                        (block_statement
                          (if_statement
                            (var_identifier
                              (post_identifier)
                              (post_identifier))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (function_call
                                  (function_identifier)
                                  (call_signature
                                    (value
                                      (string_value
                                        (_string_fragment)))))))))
                        (block_statement
                          (if_statement
                            (var_identifier
                              (post_identifier)
                              (post_identifier))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (function_call
                                  (function_identifier)
                                  (call_signature
                                    (value
                                      (string_value
                                        (_string_fragment)))))))))
                        (block_statement
                          (if_statement
                            (var_identifier
                              (post_identifier)
                              (post_identifier))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (function_call
                                  (function_identifier)
                                  (call_signature
                                    (value
                                      (string_value
                                        (_string_fragment)))))))))
                        (function_call
                          (function_identifier)
                          (call_signature
                            (var_identifier
                              (post_identifier))))
                        (ERROR
                          (UNEXPECTED '.')
                          (UNEXPECTED 'e')
                          (UNEXPECTED 'v')
                          (UNEXPECTED 'e')
                          (UNEXPECTED 'c')))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (type_identifier))))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (string_value
                        (_string_fragment)))))))))))))

================================================================================
layer
================================================================================

import { Button } from "std-widgets.slint";

// Test case for manual visual verification that layering does not pessimize the
// output, and to have a compile-time verification that the lowering to the Layer
// element compiles.

MyLayer := Rectangle {
    cache-rendering-hint: true;
    background: red;
    for i in 1000: Rectangle {
        cache-rendering-hint: i == 8;
        background: blue;
        drop-shadow-blur: 10px;
        drop-shadow-offset-x: 5px;
        drop-shadow-offset-y: 5px;
        drop-shadow-color: green;
        Text {
            text: "Many text items over each other";
        }
    }
}

export TestCase := Window {
    preferred-width: 800px;
    preferred-height: 600px;
    background: white;

    VerticalLayout {

        Button {
            text: "Press me to start the animation and check that it is smooth.";
            clicked => {
                layered.place_to_the_right = true;
            }
        }

        Rectangle {

            // This will be a layer
            layered := MyLayer {
                width: 200px;
                height: 100px;

                property <bool> place_to_the_right;
                states [
                    right when place_to_the_right: {
                        x: 200px;
                    }
                    left when !place_to_the_right: {
                        x: 10px;
                    }
                ]

                animate x {
                    duration: 15s;
                }
            }
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (import_statement
    (type_identifier)
    (string_value
      (_string_fragment)))
  (comment)
  (comment)
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (bool_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (type_identifier)))
      (block_statement
        (for_loop
          (var_identifier)
          (for_range)
          (component
            (type_identifier)
            (block
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (comparison_binary_expression
                    (type_identifier)
                    (comparison_operator)
                    (value
                      (int_value)))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (type_identifier)))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (length_value))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (length_value))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (length_value))))
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (type_identifier)))
              (block_statement
                (component
                  (type_identifier)
                  (block
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (string_value
                          (_string_fragment)))))))))))))
  (component_definition
    (export_modifier)
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (type_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (string_value
                          (_string_fragment)))))
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (block
                        (assignment_expr
                          (var_identifier
                            (post_identifier))
                          (assignment_prec_operator)
                          (value
                            (bool_value)))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (comment)
                  (block_statement
                    (component
                      (var_identifier)
                      (type_identifier)
                      (block
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (length_value))))
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (length_value))))
                        (block_statement
                          (property
                            (type_identifier)
                            (var_identifier)))
                        (block_statement
                          (component
                            (type_identifier)
                            (ERROR
                              (UNEXPECTED 'l'))
                            (block
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (value
                                  (length_value))))))
                        (ERROR
                          (unary_expression
                            (unary_prec_operator)
                            (type_identifier))
                          (UNEXPECTED 'x'))
                        (value
                          (length_value)))))
                  (ERROR)
                  (block_statement
                    (animate_statement
                      (var_identifier)
                      (animate_body
                        (value
                          (duration_value)))))))))))))
  (ERROR))

================================================================================
rotate
================================================================================

// Test for manual visual verification of rotation
//
// The green rectangle should be 45 degree rotated inside the black rectangle
//
// The rectangle with the linear gradient should be rotated by 315 degrees
// inside the other black rectangle

TestCase := Window {
    width: 800px;
    height: 600px;

    // "box" to act as translation
    Rectangle {
        x: 50px;
        y: 50px;

        Image {
            rotation-angle: 45deg;
            x: 50px;
            y: 50px;
            rotation-origin-x: 0;
            rotation-origin-y: 0;
            width: 50px;
            height: 50px;
            source: @image-url("../../../logo/slint-logo-square-light-128x128.png");
        }

        Rectangle {
            x: 50px;
            y: 50px;
            width: 50px;
            height: 50px;
            border-width: 1px;
            border-color: black;
        }

    }

    // -------

    // "box" to act as translation
    Rectangle {
        x: 200px;
        y: 50px;
        border-width: 1px;
        border-color: black;
        width: i2.width;
        height: i2.height;

        i2 := Image {
            rotation-angle: 315deg;
            source: @image-url("../../../logo/slint-logo-square-light-128x128.png");
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (length_value))))
      (comment)
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (angle_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (function_call
                      (function_identifier)
                      (call_signature
                        (value
                          (string_value
                            (_string_fragment)))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (length_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (type_identifier))))))))
      (comment)
      (comment)
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (post_identifier))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (post_identifier))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (angle_value))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (function_call
                      (function_identifier)
                      (call_signature
                        (value
                          (string_value
                            (_string_fragment)))))))))))))))

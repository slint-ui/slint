================================================================================
assign_equal_model
================================================================================

TestCase := Rectangle {
    property <[int]> foo: [1, 2, 3];
    property <[int]> bar: [1, 2, 3];
    property <int> first: foo[0];

    callback do() -> bool;
    do => {
        if (first != 1) { return false; }
        // This makes both property share the same underlying model
        // Even though they are the same contents, we must make sure that
        // the model are properly shared and everything that depends on them
        // gets dirty
        foo = bar;
        if (first != 1) { return false; }
        bar[0] = 42;
        if (first != 42) { return false; }
        return true;
    }

    property <bool> test: do();
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_identifier))))
          (var_identifier)
          (value
            (value_list
              (value
                (int_value))
              (value
                (int_value))
              (value
                (int_value))))))
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_identifier))))
          (var_identifier)
          (value
            (value_list
              (value
                (int_value))
              (value
                (int_value))
              (value
                (int_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (index_operator
              (value
                (int_value))))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)
          (type_identifier)))
      (block_statement
        (binding_block_statement
          (callback_event
            (function_identifier)
            (block
              (block_statement
                (if_statement
                  (comparison_binary_expression
                    (var_identifier)
                    (comparison_operator)
                    (value
                      (int_value)))
                  (component
                    (type_identifier
                      (MISSING _identifier))
                    (block
                      (block_statement
                        (binding_block_statement
                          (value
                            (bool_value))))))))
              (comment)
              (comment)
              (comment)
              (comment)
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier))))
              (block_statement
                (if_statement
                  (comparison_binary_expression
                    (var_identifier)
                    (comparison_operator)
                    (value
                      (int_value)))
                  (component
                    (type_identifier
                      (MISSING _identifier))
                    (block
                      (block_statement
                        (binding_block_statement
                          (value
                            (bool_value))))))))
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier
                      (index_operator
                        (value
                          (int_value))))
                    (assignment_prec_operator)
                    (value
                      (int_value)))))
              (block_statement
                (if_statement
                  (comparison_binary_expression
                    (var_identifier)
                    (comparison_operator)
                    (value
                      (int_value)))
                  (component
                    (type_identifier
                      (MISSING _identifier))
                    (block
                      (block_statement
                        (binding_block_statement
                          (value
                            (bool_value))))))))
              (block_statement
                (binding_block_statement
                  (value
                    (bool_value))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (function_call
            (function_identifier)
            (call_signature)))))))

================================================================================
if_cond_property
================================================================================

// Test that the condition of an if can access the properties of native items


TestCase := Rectangle {
    width: 100phx;
    height: 100phx;

    ta := TouchArea {}
    if (ta.pressed) : Rectangle {}
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (if_statement
          (var_identifier
            (post_identifier))
          (component
            (type_identifier)
            (block)))))))

================================================================================
array
================================================================================

export TestCase := Rectangle {
    property<[int]> ints: [1, 2, 3, 4, 5];
    property<int> num_ints: ints.length;
    property<int> n: ints[ints[4] - ints[1]];
    property<int> operations: ints.length < 1 ? ints.length : ints.length + ints.length;
    property<[{a: [int]}]> empty_model;
    property<[[int]]> array_of_array: [ints, ints, ints];

    property<bool> test: num_ints == 5 && operations == 10
        && hello_world == (["", "world"])[1] && empty_model.length == 0 && empty_model[45].a.length == 0
        && array_of_array[1][1] == 2;
    property<int> third_int: ints[2];
    property<string> hello_world: [{t: "hello"}, {t: "world"}][1].t;
}

--------------------------------------------------------------------------------

(source_file
  (export_modifier)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_identifier))))
          (var_identifier)
          (value
            (value_list
              (value
                (int_value))
              (value
                (int_value))
              (value
                (int_value))
              (value
                (int_value))
              (value
                (int_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (index_operator
              (add_binary_expression
                (var_identifier
                  (index_operator
                    (value
                      (int_value))))
                (add_prec_operator)
                (var_identifier
                  (index_operator
                    (value
                      (int_value)))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier
              (post_identifier))
            (comparison_operator)
            (add_binary_expression
              (ternary_expression
                (value
                  (int_value))
                (var_identifier
                  (post_identifier))
                (var_identifier
                  (post_identifier)))
              (add_prec_operator)
              (var_identifier
                (post_identifier))))))
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_anon_struct
                  (var_identifier)
                  (type
                    (type_list
                      (type
                        (type_identifier))))))))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_list
                  (type
                    (type_identifier))))))
          (var_identifier)
          (value
            (value_list
              (var_identifier)
              (var_identifier)
              (var_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (comparison_binary_expression
                (comparison_binary_expression
                  (comparison_binary_expression
                    (comparison_binary_expression
                      (var_identifier)
                      (comparison_operator)
                      (mult_binary_expression
                        (value
                          (int_value))
                        (mult_prec_operator)
                        (var_identifier)))
                    (comparison_operator)
                    (mult_binary_expression
                      (value
                        (int_value))
                      (mult_prec_operator)
                      (var_identifier)))
                  (comparison_operator)
                  (mult_binary_expression
                    (value
                      (value
                        (value_list
                          (value
                            (string_value))
                          (value
                            (string_value)))))
                    (index_operator
                      (value
                        (int_value)))
                    (mult_prec_operator)
                    (var_identifier
                      (post_identifier))))
                (comparison_operator)
                (mult_binary_expression
                  (value
                    (int_value))
                  (mult_prec_operator)
                  (var_identifier
                    (index_operator
                      (value
                        (int_value)))
                    (post_identifier)
                    (post_identifier))))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (int_value))
                (mult_prec_operator)
                (var_identifier
                  (index_operator
                    (value
                      (int_value)))
                  (index_operator
                    (value
                      (int_value))))))
            (comparison_operator)
            (value
              (int_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (index_operator
              (value
                (int_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (value_list
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))))
          (index_operator
            (value
              (int_value)))
          (post_identifier))))))

================================================================================
for
================================================================================

ExtraComponent := Rectangle {
    for x in [{a: "0"}, {a: "1"}] : Text { text: x.a; }
}


Extra2 := Rectangle {
    property<int> top_level;
    property<int> value;
    callback update_value;
    for aaa[r] in [[10, top_level], [2, 3]] : blah := Rectangle {
        width: parent.width;
        height: root.height;
        property <int> some_value: 1000;
        for bb[l] in aaa : TouchArea {
            property <int> some_value: 1515;
            width: 10phx;
            height: 10phx;
            x: r*10phx;
            y: l*10phx;
            clicked => {
                root.value += bb + blah.some_value;
                update_value();
            }
        }
    }
}

export TestCase := Rectangle {
    width: 100phx;
    height: 100phx;
    background: white;
    property<float> top_level: 42;
    property<int> value: 0;

   for pp[idx] in 5: Rectangle {
        s := Rectangle {
            property<length> within: 88phx;
            x: 2phx * idx;
            y: 200phx * pp;
            width: s.within;
            height: root.top_level * 1phx;
            for nested in [1phx] : Rectangle {
                x : s.width + root.top_level * 1phx + nested;
            }
        }
    }

    for pp[idx] in [1,3,2]: Rectangle {
        x: idx * 1phx;
        y: 25phx * pp;
    }

    for pp[idx] in ["1","3","2"]: Rectangle {
        x: idx * 1phx;
        Text { text: pp; }
    }

    for pp in [{a: 12, b: "aa", c: {a: #00f}}, {a: 13, b: "cc", c: { a: #f00}}]: Text {
        x: pp.a * 1phx;
        text: pp.b;
        color: pp.c.a;
        ExtraComponent {
        }
    }
    Extra2 {
        width: parent.width;
        height: root.height;
        top_level: root.top_level;
        update_value => {
            root.value = self.value;
        }
    }

    property<[{a: int}]> m;
    for x in m : TouchArea {
        width: parent.width;
        height: root.height;
        clicked => {
            root.value = x.a;
        }
    }
}



--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (for_loop
          (var_identifier)
          (for_range
            (value_list
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))))
          (component
            (type_identifier)
            (block
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (post_identifier)))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (for_loop
          (var_identifier
            (index_operator
              (var_identifier)))
          (for_range
            (value_list
              (value
                (value_list
                  (value
                    (int_value))
                  (var_identifier)))
              (value
                (value_list
                  (value
                    (int_value))
                  (value
                    (int_value))))))
          (component
            (var_identifier)
            (type_identifier)
            (block
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier
                      (reference_identifier)
                      (post_identifier)))))
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier
                      (reference_identifier)
                      (post_identifier)))))
              (block_statement
                (property
                  (type
                    (type_identifier))
                  (var_identifier)
                  (value
                    (int_value))))
              (block_statement
                (for_loop
                  (var_identifier
                    (index_operator
                      (var_identifier)))
                  (for_range
                    (var_identifier))
                  (component
                    (type_identifier)
                    (block
                      (block_statement
                        (property
                          (type
                            (type_identifier))
                          (var_identifier)
                          (value
                            (int_value))))
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (physical_length_value)))))
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (physical_length_value)))))
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (mult_binary_expression
                              (var_identifier)
                              (mult_prec_operator)
                              (value
                                (physical_length_value))))))
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (mult_binary_expression
                              (var_identifier)
                              (mult_prec_operator)
                              (value
                                (physical_length_value))))))
                      (block_statement
                        (binding_block_statement
                          (callback_event
                            (function_identifier)
                            (block
                              (block_statement
                                (binding_block_statement
                                  (assignment_expr
                                    (var_identifier
                                      (reference_identifier)
                                      (post_identifier))
                                    (assignment_prec_operator)
                                    (add_binary_expression
                                      (var_identifier)
                                      (add_prec_operator)
                                      (var_identifier
                                        (post_identifier))))))
                              (function_call
                                (function_identifier)
                                (call_signature))))))))))))))))
  (export_modifier)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (for_loop
          (var_identifier
            (index_operator
              (var_identifier)))
          (for_range)
          (component
            (type_identifier)
            (block
              (block_statement
                (component
                  (var_identifier)
                  (type_identifier)
                  (block
                    (block_statement
                      (property
                        (type
                          (type_identifier))
                        (var_identifier)
                        (value
                          (physical_length_value))))
                    (block_statement
                      (binding_block_statement
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (mult_binary_expression
                            (value
                              (physical_length_value))
                            (mult_prec_operator)
                            (var_identifier)))))
                    (block_statement
                      (binding_block_statement
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (mult_binary_expression
                            (value
                              (physical_length_value))
                            (mult_prec_operator)
                            (var_identifier)))))
                    (block_statement
                      (binding_block_statement
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (var_identifier
                            (post_identifier)))))
                    (block_statement
                      (binding_block_statement
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (mult_binary_expression
                            (var_identifier
                              (reference_identifier)
                              (post_identifier))
                            (mult_prec_operator)
                            (value
                              (physical_length_value))))))
                    (block_statement
                      (for_loop
                        (var_identifier)
                        (for_range
                          (value_list
                            (value
                              (physical_length_value))))
                        (component
                          (type_identifier)
                          (block
                            (assignment_expr
                              (var_identifier)
                              (assignment_prec_operator)
                              (add_binary_expression
                                (add_binary_expression
                                  (var_identifier
                                    (post_identifier))
                                  (add_prec_operator)
                                  (mult_binary_expression
                                    (var_identifier
                                      (reference_identifier)
                                      (post_identifier))
                                    (mult_prec_operator)
                                    (value
                                      (physical_length_value))))
                                (add_prec_operator)
                                (var_identifier))))))))))))))
      (block_statement
        (for_loop
          (var_identifier
            (index_operator
              (var_identifier)))
          (for_range
            (value_list
              (value
                (int_value))
              (value
                (int_value))
              (value
                (int_value))))
          (component
            (type_identifier)
            (block
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (mult_binary_expression
                      (var_identifier)
                      (mult_prec_operator)
                      (value
                        (physical_length_value))))))
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (mult_binary_expression
                  (value
                    (physical_length_value))
                  (mult_prec_operator)
                  (var_identifier)))))))
      (block_statement
        (for_loop
          (var_identifier
            (index_operator
              (var_identifier)))
          (for_range
            (value_list
              (value
                (string_value))
              (value
                (string_value))
              (value
                (string_value))))
          (component
            (type_identifier)
            (block
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (mult_binary_expression
                      (var_identifier)
                      (mult_prec_operator)
                      (value
                        (physical_length_value))))))
              (block_statement
                (component
                  (type_identifier)
                  (block
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier)))))))))
      (block_statement
        (for_loop
          (var_identifier)
          (for_range
            (value_list
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (int_value))
                  (var_identifier)
                  (value
                    (string_value))
                  (var_identifier)
                  (value
                    (anon_struct
                      (var_identifier)
                      (value
                        (color_value))))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (int_value))
                  (var_identifier)
                  (value
                    (string_value))
                  (var_identifier)
                  (value
                    (anon_struct
                      (var_identifier)
                      (value
                        (color_value))))))))
          (component
            (type_identifier)
            (block
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (mult_binary_expression
                      (var_identifier
                        (post_identifier))
                      (mult_prec_operator)
                      (value
                        (physical_length_value))))))
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier
                      (post_identifier)))))
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier
                      (post_identifier)
                      (post_identifier)))))
              (block_statement
                (component
                  (type_identifier)
                  (block)))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier)))))
            (block_statement
              (binding_block_statement
                (callback_event
                  (function_identifier)
                  (block
                    (assignment_expr
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))
                      (assignment_prec_operator)
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))))))))))
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_anon_struct
                  (var_identifier)
                  (type
                    (type_identifier))))))
          (var_identifier)))
      (block_statement
        (for_loop
          (var_identifier)
          (for_range
            (var_identifier))
          (component
            (type_identifier)
            (block
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier
                      (reference_identifier)
                      (post_identifier)))))
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier
                      (reference_identifier)
                      (post_identifier)))))
              (block_statement
                (binding_block_statement
                  (callback_event
                    (function_identifier)
                    (block
                      (assignment_expr
                        (var_identifier
                          (reference_identifier)
                          (post_identifier))
                        (assignment_prec_operator)
                        (var_identifier
                          (post_identifier))))))))))))))

================================================================================
if
================================================================================

TestCase := Rectangle {
    width: 100phx;
    height: 100phx;
    background: white;
    property<int> top_level: 42;

    property<bool> cond1;
    property<bool> cond2;
    property<bool> cond3;

    if (cond1) : TouchArea {
        width: parent.width;
        height: root.height;
        property<int> xx: root.top_level;
        clicked => {
            root.top_level += self.xx + 8;
        }
    }

    if (cond1 ? cond2 : cond3) : Rectangle {
        background: root.background;
    }
}




--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (if_statement
          (var_identifier)
          (component
            (type_identifier)
            (block
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier
                      (reference_identifier)
                      (post_identifier)))))
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier
                      (reference_identifier)
                      (post_identifier)))))
              (block_statement
                (property
                  (type
                    (type_identifier))
                  (var_identifier)
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))))
              (block_statement
                (binding_block_statement
                  (callback_event
                    (function_identifier)
                    (block
                      (assignment_expr
                        (var_identifier
                          (reference_identifier)
                          (post_identifier))
                        (assignment_prec_operator)
                        (add_binary_expression
                          (var_identifier
                            (reference_identifier)
                            (post_identifier))
                          (add_prec_operator)
                          (value
                            (int_value))))))))))))
      (block_statement
        (if_statement
          (ternary_expression
            (var_identifier)
            (var_identifier)
            (var_identifier))
          (component
            (type_identifier)
            (block
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))))))))

================================================================================
if_lookup
================================================================================


TestCase := Rectangle {
    width: 100phx;
    height: 100phx;
    background: white;
    property<int> top_level: 42;

    property<bool> cond1;

    Rectangle {
        property <string> blah: "ddd";
        Rectangle {
            property <bool> cc <=> cond1;
            property <bool> blah: false;
            if (cc || self.blah) : TouchArea {
                property <int> cc: 0;
                clicked => {
                    root.top_level += 50;
                }
            }
        }
    }

}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (property
                (type
                  (type_identifier))
                (var_identifier)
                (value
                  (string_value))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (property
                      (type
                        (type_identifier))
                      (var_identifier)
                      (var_identifier)))
                  (block_statement
                    (property
                      (type
                        (type_identifier))
                      (var_identifier)
                      (value
                        (bool_value))))
                  (block_statement
                    (if_statement
                      (mult_binary_expression
                        (var_identifier)
                        (mult_prec_operator)
                        (var_identifier
                          (reference_identifier)
                          (post_identifier)))
                      (component
                        (type_identifier)
                        (block
                          (block_statement
                            (property
                              (type
                                (type_identifier))
                              (var_identifier)
                              (value
                                (int_value))))
                          (block_statement
                            (binding_block_statement
                              (callback_event
                                (function_identifier)
                                (block
                                  (assignment_expr
                                    (var_identifier
                                      (reference_identifier)
                                      (post_identifier))
                                    (assignment_prec_operator)
                                    (value
                                      (int_value))))))))))))))))))))

================================================================================
model_in_struct
================================================================================

struct Foo := {
    ok: bool,
}

// Make sure that the generated code for this compiles, as we emit
// #[derive(Debug)] for structures and in this case the field of the
// struct contains a model handle.
struct Bar := {
    foos: [Foo],
}

TestCase := Rectangle {
    property <[Bar]> bars: [];

    // make sure the generated code compiles (that we generate .clone() properly)
    property <Foo> foo: {ok: true};
    property <Bar> bar: {foos: [foo, foo]};
    property <[Bar]> bars2: [bar, bar];
}
--------------------------------------------------------------------------------

(source_file
  (struct_definition
    (type_identifier)
    (type_anon_struct
      (var_identifier)
      (type
        (type_identifier))))
  (comment)
  (comment)
  (comment)
  (struct_definition
    (type_identifier)
    (type_anon_struct
      (var_identifier)
      (type
        (type_list
          (type
            (type_identifier))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_identifier))))
          (var_identifier)
          (value
            (value_list))))
      (comment)
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (binding_block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (bool_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (binding_block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (value_list
                  (var_identifier)
                  (var_identifier)))))))
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_identifier))))
          (var_identifier)
          (value
            (value_list
              (var_identifier)
              (var_identifier))))))))

================================================================================
scrolled_model
================================================================================

import { Button, ListView } from "std-widgets.slint";

TestCase := Rectangle {
    width: 300phx;
    height: 50phx;

    property<[{name: string}]> model: [
        { name: "1Olivier", },
        { name: "1Simon", },
        { name: "2Olivier", },
        { name: "2Simon", },
        { name: "3Olivier", },
        { name: "3Simon", },
        { name: "4Olivier", },
        { name: "4Simon", },
        { name: "5Olivier", },
        { name: "6Simon", },
        { name: "7Olivier", },
        { name: "7Simon", },
        { name: "8Olivier", },
        { name: "8Simon", },
        { name: "9Olivier", },
        { name: "9Simon", },
        { name: "10Olivier", },
        { name: "10Simon", },
        { name: "11Olivier", },
        { name: "11Simon", }
    ];

    VerticalLayout {
        ListView {
            for data in model : Button {
                height: 20px;
                text: data.name;
            }

            viewport-y: -200px;
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (import_statement
    (type_identifier)
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_anon_struct
                  (var_identifier)
                  (type
                    (type_identifier))))))
          (var_identifier)
          (value
            (value_list
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (for_loop
                      (var_identifier)
                      (for_range
                        (var_identifier))
                      (component
                        (type_identifier)
                        (block
                          (block_statement
                            (binding_block_statement
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (value
                                  (length_value)))))
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (var_identifier
                              (post_identifier)))))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (unary_expression
                      (unary_prec_operator)
                      (value
                        (length_value)))))))))))))

================================================================================
write_to_model
================================================================================

TestCase := Rectangle {
    width: 300phx;
    height: 300phx;
    property<[{name: string, account: string, score: float}]> model: [
        {
            name: "Olivier",
            account: "ogoffart",
            score: 456,
        },
        {
            name: "Simon",
            account: "tronical",
            score: 789,
        }
    ];

    property <int> clicked_score;

    for person[i] in model: TouchArea {
        x: i*10phx;
        width: 10phx;
        height: 10phx;
        property <int> score: person.score;
        clicked => {
            person.score += 1;
            person.score = person.score + 1;
            person.score += 1;
            clicked_score = score;
        }
    }

    callback manual_score_update(int, int);
    manual_score_update(i, val) => {
        model[i].score += val;
    }


}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_anon_struct
                  (var_identifier)
                  (type
                    (type_identifier))
                  (var_identifier)
                  (type
                    (type_identifier))
                  (var_identifier)
                  (type
                    (type_identifier))))))
          (var_identifier)
          (value
            (value_list
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))
                  (var_identifier)
                  (value
                    (string_value))
                  (var_identifier)
                  (value
                    (int_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))
                  (var_identifier)
                  (value
                    (string_value))
                  (var_identifier)
                  (value
                    (int_value))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (for_loop
          (var_identifier
            (index_operator
              (var_identifier)))
          (for_range
            (var_identifier))
          (component
            (type_identifier)
            (block
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (mult_binary_expression
                      (var_identifier)
                      (mult_prec_operator)
                      (value
                        (physical_length_value))))))
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (physical_length_value)))))
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (physical_length_value)))))
              (block_statement
                (property
                  (type
                    (type_identifier))
                  (var_identifier)
                  (var_identifier
                    (post_identifier))))
              (block_statement
                (binding_block_statement
                  (callback_event
                    (function_identifier)
                    (block
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier
                              (post_identifier))
                            (assignment_prec_operator)
                            (value
                              (int_value)))))
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier
                              (post_identifier))
                            (assignment_prec_operator)
                            (add_binary_expression
                              (var_identifier
                                (post_identifier))
                              (add_prec_operator)
                              (value
                                (int_value))))))
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier
                              (post_identifier))
                            (assignment_prec_operator)
                            (value
                              (int_value)))))
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (var_identifier))))))))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier)
            (var_identifier))))
      (block_statement
        (binding_block_statement
          (callback_event
            (function_identifier)
            (call_signature
              (var_identifier)
              (var_identifier))
            (block
              (assignment_expr
                (var_identifier
                  (index_operator
                    (var_identifier))
                  (post_identifier))
                (assignment_prec_operator)
                (var_identifier)))))))))

================================================================================
write_to_model_sub_component
================================================================================

SubComponent := Rectangle {
    property <[int]> m;
    HorizontalLayout {
        for foo in m: Rectangle {
            if foo < 100 : TouchArea {
                clicked => { foo += 8; }
            }
        }
    }
}

TestCase := Rectangle {
    width: 100px;
    height: 100px;
    property <[int]> mod;
    SubComponent {
        m: mod;
    }
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_identifier))))
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (for_loop
                (var_identifier)
                (for_range
                  (var_identifier))
                (component
                  (type_identifier)
                  (block
                    (block_statement
                      (if_statement
                        (comparison_binary_expression
                          (var_identifier)
                          (comparison_operator)
                          (value
                            (int_value)))
                        (component
                          (type_identifier)
                          (block
                            (block_statement
                              (binding_block_statement
                                (callback_event
                                  (function_identifier)
                                  (block
                                    (assignment_expr
                                      (var_identifier)
                                      (assignment_prec_operator)
                                      (value
                                        (int_value))))))))))))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_identifier))))
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier))))))))

================================================================================
model
================================================================================

TestCase := Rectangle {
    width: 300phx;
    height: 300phx;
    property<[{name: string, account: string, score: float}]> model: [
        {
            name: "Olivier",
            account: "ogoffart",
            score: 456,
        },
        {
            name: "Simon",
            account: "tronical",
            score: 789,
        }
    ];

    property <int> clicked_score;
    property <string> clicked_name;
    property <int> clicked_internal_state;
    property <int> clicked_index;

    for person[i] in model: TouchArea {
        x: i*10phx;
        width: 10phx;
        height: 10phx;
        property <length> model; // this is not the model
        property <string> text: person.name;
        property <int> score: person.score * 1000;
        property <int> internal_state: 0;
        clicked => {
            internal_state += 1;
            clicked_internal_state = internal_state;
            clicked_score = score;
            clicked_name = text;
            clicked_index = i;
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_anon_struct
                  (var_identifier)
                  (type
                    (type_identifier))
                  (var_identifier)
                  (type
                    (type_identifier))
                  (var_identifier)
                  (type
                    (type_identifier))))))
          (var_identifier)
          (value
            (value_list
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))
                  (var_identifier)
                  (value
                    (string_value))
                  (var_identifier)
                  (value
                    (int_value))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (string_value))
                  (var_identifier)
                  (value
                    (string_value))
                  (var_identifier)
                  (value
                    (int_value))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (for_loop
          (var_identifier
            (index_operator
              (var_identifier)))
          (for_range
            (var_identifier))
          (component
            (type_identifier)
            (block
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (mult_binary_expression
                      (var_identifier)
                      (mult_prec_operator)
                      (value
                        (physical_length_value))))))
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (physical_length_value)))))
              (block_statement
                (binding_block_statement
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (physical_length_value)))))
              (block_statement
                (property
                  (type
                    (type_identifier))
                  (var_identifier)))
              (comment)
              (block_statement
                (property
                  (type
                    (type_identifier))
                  (var_identifier)
                  (var_identifier
                    (post_identifier))))
              (block_statement
                (property
                  (type
                    (type_identifier))
                  (var_identifier)
                  (mult_binary_expression
                    (var_identifier
                      (post_identifier))
                    (mult_prec_operator)
                    (value
                      (int_value)))))
              (block_statement
                (property
                  (type
                    (type_identifier))
                  (var_identifier)
                  (value
                    (int_value))))
              (block_statement
                (binding_block_statement
                  (callback_event
                    (function_identifier)
                    (block
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (int_value)))))
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (var_identifier))))
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (var_identifier))))
                      (block_statement
                        (binding_block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (var_identifier))))
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (var_identifier)))))))))))))

================================================================================
repeater_model_change
================================================================================


TestCase := Rectangle {
    width: 100phx;
    height: 100phx;

    property <int> creation-count: 0;
    property <bool> condition;
    property <length> test-width: preferred-width;

    HorizontalLayout {
        if condition: Rectangle {
            preferred-width: 10px;
            init => {
                creation-count += 1;
            }
        }
    }

}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (if_statement
                (var_identifier)
                (component
                  (type_identifier)
                  (block
                    (block_statement
                      (binding_block_statement
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (length_value)))))
                    (block_statement
                      (binding_block_statement
                        (callback_event
                          (function_identifier)
                          (block
                            (assignment_expr
                              (var_identifier)
                              (assignment_prec_operator)
                              (value
                                (int_value)))))))))))))))))

================================================================================
negative_intmodel
================================================================================


TestCase := Rectangle {
    width: 100phx;
    height: 100phx;

    property <int> creation-count: 0;

    property <length> test-height: preferred-height;

    property <int> repeater-count: -10;

    VerticalLayout {
        for _ in repeater-count: Rectangle {
            preferred-height: 10px;
            init => {
                creation-count += 1;
            }
        }
    }

}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (unary_expression
            (unary_prec_operator)
            (value
              (int_value)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (for_loop
                (var_identifier)
                (for_range
                  (var_identifier))
                (component
                  (type_identifier)
                  (block
                    (block_statement
                      (binding_block_statement
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (length_value)))))
                    (block_statement
                      (binding_block_statement
                        (callback_event
                          (function_identifier)
                          (block
                            (assignment_expr
                              (var_identifier)
                              (assignment_prec_operator)
                              (value
                                (int_value)))))))))))))))))

================================================================================
listview_model_change
================================================================================

// This test case verifies that the listview updates its layout / geometry when the
// entire model changes. This test works by triggering layout updates by simulating
// mouse clicks, which results in item tree traversal and ensure_updated_listview
// calls, similar to when painting. The actual model change is triggered via simulated
// mouse clicks into the touch area further down.
// Note: The C++ test uses the same test method, but due to its differing implementation
// it's not testing the same code path.

import { ListView } from "std-widgets.slint";

TestCase := Window {
    width: 300px;
    height: 300px;

    property<length> viewport-height: lv.viewport-height;
    property<[length]> fixed-height-model: [100px, 0px];

    lv := ListView {
        for fixed-height in fixed-height-model: Rectangle {
            background: blue;
            height: fixed-height;
        }
    }

    TouchArea {
        y: 50px;
        clicked => {
            fixed-height-model = [200px];
        }
    }
}


--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (import_statement
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (binding_block_statement
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_list
              (type
                (type_identifier))))
          (var_identifier)
          (value
            (value_list
              (value
                (length_value))
              (value
                (length_value))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (for_loop
                (var_identifier)
                (for_range
                  (var_identifier))
                (component
                  (type_identifier)
                  (block
                    (block_statement
                      (binding_block_statement
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (var_identifier))))
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier)))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (binding_block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (length_value)))))
            (block_statement
              (binding_block_statement
                (callback_event
                  (function_identifier)
                  (block
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (value_list
                          (value
                            (length_value)))))))))))))))

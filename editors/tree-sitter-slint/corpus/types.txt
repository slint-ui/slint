================================================================================
angles
================================================================================

Test := Rectangle {
    property<angle> angle: 0.25turn;
    property<bool> test: abs((angle - 0.5rad * 3.1415926535)/1grad) < 0.00001;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (float_number))))
          (ERROR
            (UNEXPECTED 'u')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (comparison_binary_expression
              (function_call
                (function_identifier)
                (call_signature
                  (formal_parameters
                    (formal_parameter
                      (mult_binary_expression
                        (expression_body_paren
                          (add_binary_expression
                            (builtin_type_identifier)
                            (add_prec_operator)
                            (mult_binary_expression
                              (value
                                (number
                                  (float_number)))
                              (ERROR
                                (UNEXPECTED 'a'))
                              (mult_prec_operator)
                              (value
                                (number
                                  (float_number))))))
                        (mult_prec_operator)
                        (value
                          (number
                            (int_number)))))
                    (ERROR
                      (UNEXPECTED 'a')))))
              (comparison_operator)
              (value
                (number
                  (float_number))))))))))

================================================================================
bool
================================================================================

TestCase := Rectangle {
    property<bool> truevar: true;
    property<bool> falsevar: false;
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (language_constant))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (language_constant))))))))

================================================================================
color
================================================================================

Test := Rectangle {
    property<color> b1: blue;
    property<color> b2: #00f;
    property<color> b3: #0000ff;
    property<color> b4: #00ff;
    property<color> b5: #0000ffff;
    property<color> r1: red;
    property<color> r2: #f00;
    property<color> r3: #ff0000;
    property<color> r4: #f00f;
    property<color> r5: #ff0000ff;

    property<color> y1: yellow;
    property<color> y2: #ff0;

    property<color> g1: #999;

    property<color> c1: #ff335588;
    property<color> c2: rgb(100, 23, 42);
    property<color> c3: rgba(39%, 50%, 16%, 81%);

    property<color> i1: rgb(0, 666, -85);

    property<bool> test: b1 == b2 && b2 == b5 && b3 == Colors.blue && Colors.red == r4 && y1 == Colors.rgba(255, 100%, 0, 100%);
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (language_constant))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color)))
          (ERROR))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color)))
          (ERROR))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (language_constant))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color)))
          (ERROR))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color)))
          (ERROR))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (language_constant))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (color)))
          (ERROR
            (int_number)))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (function_call
              (function_identifier)
              (call_signature
                (formal_parameters
                  (formal_parameter
                    (value
                      (number
                        (int_number))))
                  (formal_parameter
                    (value
                      (number
                        (int_number))))
                  (formal_parameter
                    (value
                      (number
                        (int_number)))))))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (function_call
              (function_identifier)
              (call_signature
                (formal_parameters
                  (formal_parameter
                    (value
                      (value_with_units
                        (number
                          (int_number))
                        (unit_type))))
                  (formal_parameter
                    (value
                      (value_with_units
                        (number
                          (int_number))
                        (unit_type))))
                  (formal_parameter
                    (value
                      (value_with_units
                        (number
                          (int_number))
                        (unit_type))))
                  (formal_parameter
                    (value
                      (value_with_units
                        (number
                          (int_number))
                        (unit_type)))))))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (function_call
              (function_identifier)
              (call_signature
                (formal_parameters
                  (formal_parameter
                    (value
                      (number
                        (int_number))))
                  (formal_parameter
                    (value
                      (number
                        (int_number))))
                  (formal_parameter
                    (unary_expression
                      (unary_prec_operator)
                      (value
                        (number
                          (int_number))))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (var_identifier))
            (int_number)
            (property_expr
              (ERROR)
              (mult_binary_expression
                (value
                  (number
                    (int_number)))
                (mult_prec_operator)
                (var_identifier)))
            (int_number)
            (property_expr
              (ERROR)
              (mult_binary_expression
                (value
                  (number
                    (int_number)))
                (mult_prec_operator)
                (var_identifier)))
            (int_number)
            (var_identifier
              (post_identifier))
            (mult_prec_operator)
            (function_identifier)
            (property_expr
              (ERROR)
              (mult_binary_expression
                (value
                  (number
                    (int_number)))
                (mult_prec_operator)
                (var_identifier)))
            (int_number))
          (property_expr
            (var_identifier
              (post_identifier
                (function_call
                  (function_identifier)
                  (call_signature
                    (formal_parameters
                      (formal_parameter
                        (value
                          (number
                            (int_number))))
                      (formal_parameter
                        (value
                          (value_with_units
                            (number
                              (int_number))
                            (unit_type))))
                      (formal_parameter
                        (value
                          (number
                            (int_number))))
                      (formal_parameter
                        (value
                          (value_with_units
                            (number
                              (int_number))
                            (unit_type)))))))))))))))

================================================================================
duration
================================================================================

TestCase := Rectangle {
    property<duration> d1: 100ms;
    property<duration> d2: 3s;
    property<duration> d3: 1.5s;
    property<duration> d4: 30 * 1ms;
    property<duration> d5: 8ms + 3s;
    property<duration> d6: d1 - d2;
    property<duration> d7: -0.5s;
    property<duration> d8: -0.5s / 2 * 1px / 1px;
    property<int> i1: d1 / 1ms;
    property<int> i2: d1 / (2ms + 0);

    property<int> untyped_d1: self.d1 / 1ms;
    property<int> untyped_d2: self.d2 / 1ms;
    property<int> untyped_d3: self.d3 / 1ms;
    property<int> untyped_d4: self.d4 / 1ms;
    property<int> untyped_d5: self.d5 / 1ms;
    property<int> untyped_d6: self.d6 / 1ms;
    property<int> untyped_d7: self.d7 / 1ms;
    property<int> untyped_d8: self.d8 / 1ms;
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (number
                (int_number))))
          (ERROR
            (UNEXPECTED ';')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (number
                (float_number))))
          (ERROR
            (UNEXPECTED ';')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (value
                (number
                  (int_number)))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (add_binary_expression
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type)))
              (add_prec_operator)
              (value
                (number
                  (int_number)))))
          (ERROR
            (UNEXPECTED ';')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (ERROR)
            (add_binary_expression
              (value
                (number
                  (int_number)))
              (add_prec_operator)
              (ERROR)
              (value
                (number
                  (int_number))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (unary_expression
              (unary_prec_operator)
              (value
                (number
                  (float_number)))))
          (ERROR
            (UNEXPECTED ';')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (mult_binary_expression
                (mult_binary_expression
                  (unary_expression
                    (unary_prec_operator)
                    (value
                      (number
                        (float_number))))
                  (ERROR
                    (UNEXPECTED '))
                  (mult_prec_operator)
                  (value
                    (number
                      (int_number))))
                (mult_prec_operator)
                (value
                  (value_with_units
                    (number
                      (int_number))
                    (unit_type))))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (ERROR)
            (mult_binary_expression
              (value
                (number
                  (int_number)))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (ERROR)
            (mult_binary_expression
              (value
                (number
                  (int_number)))
              (mult_prec_operator)
              (expression_body_paren
                (add_binary_expression
                  (value
                    (value_with_units
                      (number
                        (int_number))
                      (unit_type)))
                  (add_prec_operator)
                  (value
                    (number
                      (int_number))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))))))

================================================================================
enum_compare
================================================================================

TestCase := Rectangle {
    property <TextWrap> hello: word-wrap;
    property <bool> test: hello == TextWrap.word-wrap && hello != TextWrap.no-wrap && !(hello == TextWrap.no-wrap);
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (var_identifier))
            (property_expr
              (mult_binary_expression
                (var_identifier
                  (post_identifier))
                (mult_prec_operator)
                (var_identifier)))
            (var_identifier
              (post_identifier))
            (mult_prec_operator)
            (unary_prec_operator))
          (property_expr
            (var_identifier
              (post_identifier)))
          (ERROR))))))

================================================================================
gradients
================================================================================

// Verify that this compiles with all generators

Test := Rectangle {
    background: @linear-gradient(45deg, #ff9a9e 0%, #fad0c4 99%, #fad0c4 100%);
    property <color> foo: #a23;
    property <brush> bar: @linear-gradient(1.2rad, foo.darker(0.5), foo.brighter(0.5), );

    for data in [{xx: #b56}] : Rectangle {
        background: @linear-gradient(1.2rad, data.xx, blue);
    }

    property <color> c: @linear-gradient(90deg,#e2e1e1,#c5c5c5);
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (function_call
            (function_identifier)
            (call_signature
              (formal_parameters
                (formal_parameter
                  (value
                    (number
                      (int_number))))
                (ERROR
                  (UNEXPECTED 'e'))
                (ERROR
                  (value
                    (color)))
                (formal_parameter
                  (value
                    (value_with_units
                      (number
                        (int_number))
                      (unit_type))))
                (ERROR
                  (value
                    (color)))
                (formal_parameter
                  (value
                    (value_with_units
                      (number
                        (int_number))
                      (unit_type))))
                (ERROR
                  (value
                    (color)))
                (formal_parameter
                  (value
                    (value_with_units
                      (number
                        (int_number))
                      (unit_type))))))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (color))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (function_call
              (function_identifier)
              (call_signature
                (formal_parameters
                  (formal_parameter
                    (value
                      (number
                        (float_number))))
                  (ERROR
                    (UNEXPECTED 'a'))
                  (formal_parameter
                    (var_identifier
                      (post_identifier
                        (function_call
                          (function_identifier)
                          (call_signature
                            (formal_parameters
                              (formal_parameter
                                (value
                                  (number
                                    (float_number))))))))))
                  (formal_parameter
                    (var_identifier
                      (post_identifier
                        (function_call
                          (function_identifier)
                          (call_signature
                            (formal_parameters
                              (formal_parameter
                                (value
                                  (number
                                    (float_number)))))))))))))))
        (ERROR
          (var_identifier)
          (UNEXPECTED 'x')
          (UNEXPECTED '5')
          (int_number)
          (UNEXPECTED 'R'))
        (component_definition
          (builtin_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (function_call
                  (function_identifier)
                  (call_signature
                    (formal_parameters
                      (formal_parameter
                        (value
                          (number
                            (float_number))))
                      (ERROR
                        (UNEXPECTED 'a'))
                      (formal_parameter
                        (var_identifier
                          (post_identifier)))
                      (formal_parameter
                        (value
                          (language_constant))))))))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (property_expr
            (function_call
              (function_identifier)
              (call_signature
                (formal_parameters
                  (formal_parameter
                    (value
                      (number
                        (int_number))))
                  (ERROR
                    (UNEXPECTED 'e'))
                  (formal_parameter
                    (value
                      (color)))
                  (formal_parameter
                    (value
                      (color))))))))))))

================================================================================
nested_struct
================================================================================

// This test case verifies that we do emit the code for the `Nested` struct,
// when it's only indirectly referenced through the `Item` struct.

struct Nested := {
    ok: bool
}

struct Item := {
    nested: Nested
}

export TestCase := Rectangle {
    property <Item> fob;
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (struct_definition
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (builtin_type_identifier))))
  (struct_definition
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (var_identifier))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (user_type_identifier)
          (var_identifier))))))

================================================================================
percent
================================================================================

TestCase := Rectangle {
    property<float> p1: 100%;
    property<float> p2: 1%;
    property<float> p3: 5.5%;
    property<float> p4: 10 + 50%;
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (value_with_units
                (number
                  (float_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (add_binary_expression
              (value
                (number
                  (int_number)))
              (add_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))))))

================================================================================
relative_lengths
================================================================================

Sub := Rectangle {
    width: 25%;
    height: 35%;
}

TestCase := Rectangle {
    width: 600phx;
    inner_rect := Rectangle {
        width: 50%;
        inner_inner := Sub { }
    }
    property<length> test_length: inner_rect.width;
    property<length> test_inner_inner_length: inner_inner.width;


    height: 200phx;
    property<percent> controller: 10%;
    inner_rect_2 := Rectangle {
        height: parent.controller;
    }
    property<length> controlled_test_length: inner_rect_2.height;
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type)))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (number
              (int_number)))
          (ERROR
            (UNEXPECTED 'x')))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (value_with_units
                    (number
                      (int_number))
                    (unit_type))))
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (number
              (int_number)))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (ERROR
                (int_number))
              (post_identifier))))))))

================================================================================
resource
================================================================================

//include_path: ../../../examples/printerdemo/ui/images/
TestCase := Rectangle {
    property <image> empty_image: @image-url("");
    property <image> cat: @image-url("cat.jpg");

    property <int> empty_width: empty_image.width;
    property <int> empty_height: empty_image.height;
    property <int> cat_width: cat.width;
    property <int> cat_height: cat.height;

    property <bool> test: empty_width == 0 && empty_height == 0 && cat_width == 320 && cat_height == 480;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (function_call
              (function_identifier)
              (call_signature
                (formal_parameters
                  (formal_parameter
                    (string)))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (function_call
              (function_identifier)
              (call_signature
                (formal_parameters
                  (formal_parameter
                    (string
                      (string_fragment))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ERROR)
            (mult_binary_expression
              (mult_binary_expression
                (mult_binary_expression
                  (value
                    (number
                      (int_number)))
                  (mult_prec_operator)
                  (ERROR)
                  (value
                    (number
                      (int_number))))
                (mult_prec_operator)
                (ERROR)
                (value
                  (number
                    (int_number))))
              (mult_prec_operator)
              (ERROR)
              (value
                (number
                  (int_number))))))))))

================================================================================
string
================================================================================

TestCase := Rectangle {
    property<string> p1: "hello";
    property<string> p2: "fox:🦊";
    property<string> p3: "with\"quote\\\"\u{8}";
    property<bool> e1: p2 == "fox:🦊";
    property<bool> e2: p2 == "fox:🦍";
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (string
              (string_fragment)
              (escape_sequence)
              (string_fragment)
              (escape_sequence)
              (escape_sequence)
              (escape_sequence))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (property_expr
              (var_identifier))
            (int_number))
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (property_expr
              (var_identifier))
            (int_number))
          (property_expr
            (string
              (string_fragment))))))))

================================================================================
string_to_float
================================================================================

TestCase := Rectangle {
    property<string> hello: "hello";
    property<string> number: "42.56";
    property<string> invalid: "132a";
    property<string> negative: "-1200000.1";

    property<float> number_as_float: number.to_float();
    property<float> negative_as_float: negative.to_float();
    property<bool> test_is_float: !hello.is_float() && number.is_float() &&
         !invalid.is_float() && negative.is_float();

    property<bool> test: test_is_float &&  42.56001 - number_as_float  < 0.001 && "123".to-float() == 123;
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (string
              (string_fragment))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier
                (function_call
                  (function_identifier)
                  (call_signature
                    (formal_parameters)))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier
                (function_call
                  (function_identifier)
                  (call_signature
                    (formal_parameters)))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (mult_binary_expression
              (mult_binary_expression
                (mult_binary_expression
                  (unary_expression
                    (unary_prec_operator)
                    (var_identifier
                      (post_identifier
                        (function_call
                          (function_identifier)
                          (call_signature
                            (formal_parameters))))))
                  (mult_prec_operator)
                  (var_identifier
                    (post_identifier
                      (function_call
                        (function_identifier)
                        (call_signature
                          (formal_parameters))))))
                (mult_prec_operator)
                (unary_expression
                  (unary_prec_operator)
                  (var_identifier
                    (post_identifier
                      (function_call
                        (function_identifier)
                        (call_signature
                          (formal_parameters)))))))
              (mult_prec_operator)
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature
                      (formal_parameters))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (comparison_binary_expression
                (add_binary_expression
                  (mult_binary_expression
                    (var_identifier)
                    (mult_prec_operator)
                    (value
                      (number
                        (float_number))))
                  (add_prec_operator)
                  (var_identifier))
                (comparison_operator)
                (add_binary_expression
                  (mult_binary_expression
                    (value
                      (number
                        (float_number)))
                    (mult_prec_operator)
                    (string
                      (string_fragment)))
                  (ERROR
                    (UNEXPECTED 'o'))
                  (add_prec_operator)
                  (builtin_type_identifier)))))
          (property_expr
            (value
              (number
                (int_number)))))))))

================================================================================
structs_keyword
================================================================================

// Right now, this test is only testing rust keyword, but it should be expaneded to JS and C++ keywords

export struct mod := {
    loop: string,
}

match := Rectangle {
    property<mod> move: {loop : "mod" };
    property<bool> test: move.loop == "mod";
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (struct_definition
    (visibility_modifier)
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (builtin_type_identifier))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (UNEXPECTED 'o'))
          (property_expr
            (string
              (string_fragment)))
          (ERROR))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ERROR
              (function_identifier))
            (string
              (string_fragment))))))))

================================================================================
brush
================================================================================

Test := Rectangle {
    // allow declaring brush properties and assigning colors
    property<brush> color_brush: blue;
    // allow to use brighter and darker on a brush
    property<brush> ligher: true ? color_brush.brighter(50%) : color_brush.darker(50%);

    VerticalLayout {
        r1 := Rectangle {
            background: @linear-gradient(1.2rad, red, blue);
        }
        r2 := Rectangle {
            background: r1.background.darker(50%);
        }
    }
    property <color> r2_col: r2.background;
    property <brush> conditional: false ? Colors.white : true ? r2.background : Colors.green;

    test_circl := Rectangle {
        background: @radial_gradient(circle, #abc, #123 10%, #fed);
        property <color> colo: background;
        property <bool> test: colo == #abc
            && background.brighter(10%) == @radial_gradient(circle, (#abc).brighter(10%), (#123).brighter(10%) 10%, (#fed).brighter(10%))
            && background != colo;
    }

    property<bool> test: ligher == Colors.blue.brighter(50%) && r2_col == Colors.red.darker(50%) && conditional == r2.background && conditional != r2_col
        && test_circl.test;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (comment)
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (language_constant))))
        (comment)
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ternary_expression
              (value
                (language_constant))
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature
                      (formal_parameters
                        (formal_parameter
                          (value
                            (value_with_units
                              (number
                                (int_number))
                              (unit_type)))))))))
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature
                      (formal_parameters
                        (formal_parameter
                          (value
                            (value_with_units
                              (number
                                (int_number))
                              (unit_type))))))))))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (function_call
                        (function_identifier)
                        (call_signature
                          (formal_parameters
                            (formal_parameter
                              (value
                                (number
                                  (float_number))))
                            (ERROR
                              (UNEXPECTED 'a'))
                            (formal_parameter
                              (value
                                (language_constant)))
                            (formal_parameter
                              (value
                                (language_constant))))))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (ERROR
                          (int_number))
                        (post_identifier)
                        (post_identifier
                          (function_call
                            (function_identifier)
                            (call_signature
                              (formal_parameters
                                (formal_parameter
                                  (value
                                    (value_with_units
                                      (number
                                        (int_number))
                                      (unit_type))))))))))))))))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED '_'))
          (property_expr
            (var_identifier
              (ERROR
                (int_number))
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ternary_expression
              (ternary_expression
                (value
                  (language_constant))
                (var_identifier
                  (post_identifier))
                (value
                  (language_constant)))
              (var_identifier
                (ERROR
                  (int_number))
                (post_identifier))
              (var_identifier
                (post_identifier)))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (function_call
                  (function_identifier)
                  (call_signature
                    (formal_parameters
                      (formal_parameter
                        (var_identifier))
                      (formal_parameter
                        (value
                          (color)))
                      (ERROR
                        (value
                          (color)))
                      (formal_parameter
                        (value
                          (value_with_units
                            (number
                              (int_number))
                            (unit_type))))
                      (formal_parameter
                        (value
                          (color)))))))
              (property_definition
                (user_type_identifier)
                (var_identifier)
                (property_expr
                  (var_identifier)))
              (property_definition
                (builtin_type_identifier)
                (var_identifier)
                (ERROR
                  (property_expr
                    (ERROR)
                    (mult_binary_expression
                      (value
                        (color))
                      (mult_prec_operator)
                      (var_identifier
                        (post_identifier
                          (function_call
                            (function_identifier)
                            (call_signature
                              (formal_parameters
                                (formal_parameter
                                  (value
                                    (value_with_units
                                      (number
                                        (int_number))
                                      (unit_type)))))))))))
                  (property_expr
                    (mult_binary_expression
                      (function_call
                        (function_identifier)
                        (call_signature
                          (formal_parameters
                            (formal_parameter
                              (var_identifier))
                            (ERROR
                              (expression_body_paren
                                (value
                                  (color)))
                              (UNEXPECTED 'i'))
                            (formal_parameter
                              (expression_body_paren
                                (value
                                  (value_with_units
                                    (number
                                      (int_number))
                                    (unit_type)))))
                            (ERROR
                              (expression_body_paren
                                (value
                                  (color)))
                              (UNEXPECTED 'i')
                              (expression_body_paren
                                (value
                                  (value_with_units
                                    (number
                                      (int_number))
                                    (unit_type)))))
                            (formal_parameter
                              (value
                                (value_with_units
                                  (number
                                    (int_number))
                                  (unit_type))))
                            (ERROR
                              (expression_body_paren
                                (value
                                  (color)))
                              (UNEXPECTED 'i'))
                            (formal_parameter
                              (expression_body_paren
                                (value
                                  (value_with_units
                                    (number
                                      (int_number))
                                    (unit_type))))))))
                      (mult_prec_operator)
                      (var_identifier))))
                (property_expr
                  (var_identifier))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (var_identifier))
            (property_expr
              (mult_binary_expression
                (var_identifier
                  (post_identifier)
                  (post_identifier
                    (function_call
                      (function_identifier)
                      (call_signature
                        (formal_parameters
                          (formal_parameter
                            (value
                              (value_with_units
                                (number
                                  (int_number))
                                (unit_type)))))))))
                (mult_prec_operator)
                (var_identifier)))
            (int_number)
            (UNEXPECTED '_')
            (property_expr
              (mult_binary_expression
                (var_identifier
                  (post_identifier)
                  (post_identifier
                    (function_call
                      (function_identifier)
                      (call_signature
                        (formal_parameters
                          (formal_parameter
                            (value
                              (value_with_units
                                (number
                                  (int_number))
                                (unit_type)))))))))
                (mult_prec_operator)
                (var_identifier)))
            (property_expr
              (mult_binary_expression
                (var_identifier
                  (ERROR
                    (int_number))
                  (post_identifier))
                (mult_prec_operator)
                (var_identifier))))
          (property_expr
            (mult_binary_expression
              (var_identifier)
              (ERROR
                (int_number)
                (UNEXPECTED '_'))
              (mult_prec_operator)
              (var_identifier
                (post_identifier)))))))))

================================================================================
length
================================================================================

TestCase := Rectangle {
    property<physical_length> l1: 12phx;
    property<physical_length> l2: 12px;
    property<physical_length> l3: 100phx + 12px;
    property<physical_length> l4: 120 * 1phx;

    property<length> ll1: 12phx;
    property<length> ll2: 12px;
    property<length> ll3: 100phx + 12px;
    property<length> ll4: 120 * 1phx;

    property<bool> value: l1 == 10phx + 2phx;

    property<length> zero1: 0;
    property<length> zero2: 0 + 1phx - 0 - 1phx;
    property<bool> test_zero: zero2 == 0;

    property <float> ratio: 1px / 1phx;

    property<bool> test: (8phx * 5px * 3ms / 2phx)  == (8px * (3ms / 2phx) * 5px) / ratio
        && l1*l2 - ll1*ll2 == 0cm*0phx && value;

}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (number
                (int_number))))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (add_binary_expression
              (value
                (number
                  (int_number)))
              (ERROR
                (UNEXPECTED 'x'))
              (add_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (value
                (number
                  (int_number)))
              (mult_prec_operator)
              (value
                (number
                  (int_number)))))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (number
                (int_number))))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (add_binary_expression
              (value
                (number
                  (int_number)))
              (ERROR
                (UNEXPECTED 'x'))
              (add_prec_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (mult_binary_expression
              (value
                (number
                  (int_number)))
              (mult_prec_operator)
              (value
                (number
                  (int_number)))))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (var_identifier))
            (int_number))
          (property_expr
            (add_binary_expression
              (value
                (number
                  (int_number)))
              (ERROR
                (UNEXPECTED 'x'))
              (add_prec_operator)
              (value
                (number
                  (int_number)))))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (add_binary_expression
              (add_binary_expression
                (add_binary_expression
                  (value
                    (number
                      (int_number)))
                  (add_prec_operator)
                  (value
                    (number
                      (int_number))))
                (ERROR
                  (UNEXPECTED 'x'))
                (add_prec_operator)
                (value
                  (number
                    (int_number))))
              (add_prec_operator)
              (value
                (number
                  (int_number)))))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (var_identifier))
            (int_number))
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (mult_binary_expression
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type)))
              (mult_prec_operator)
              (value
                (number
                  (int_number)))))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (expression_body_paren
                (mult_binary_expression
                  (mult_binary_expression
                    (mult_binary_expression
                      (value
                        (number
                          (int_number)))
                      (ERROR
                        (UNEXPECTED 'x'))
                      (mult_prec_operator)
                      (value
                        (value_with_units
                          (number
                            (int_number))
                          (unit_type))))
                    (mult_prec_operator)
                    (value
                      (value_with_units
                        (number
                          (int_number))
                        (unit_type))))
                  (mult_prec_operator)
                  (value
                    (number
                      (int_number))))
                (ERROR
                  (UNEXPECTED 'x'))))
            (property_expr
              (add_binary_expression
                (mult_binary_expression
                  (mult_binary_expression
                    (mult_binary_expression
                      (expression_body_paren
                        (mult_binary_expression
                          (mult_binary_expression
                            (value
                              (value_with_units
                                (number
                                  (int_number))
                                (unit_type)))
                            (mult_prec_operator)
                            (expression_body_paren
                              (mult_binary_expression
                                (value
                                  (value_with_units
                                    (number
                                      (int_number))
                                    (unit_type)))
                                (mult_prec_operator)
                                (value
                                  (number
                                    (int_number))))
                              (ERROR
                                (UNEXPECTED 'x'))))
                          (mult_prec_operator)
                          (value
                            (value_with_units
                              (number
                                (int_number))
                              (unit_type)))))
                      (mult_prec_operator)
                      (var_identifier))
                    (mult_prec_operator)
                    (ERROR)
                    (value
                      (number
                        (int_number))))
                  (mult_prec_operator)
                  (ERROR)
                  (value
                    (number
                      (int_number))))
                (add_prec_operator)
                (ERROR)
                (mult_binary_expression
                  (value
                    (number
                      (int_number)))
                  (mult_prec_operator)
                  (var_identifier))))
            (int_number))
          (property_expr
            (mult_binary_expression
              (mult_binary_expression
                (value
                  (number
                    (int_number)))
                (ERROR
                  (UNEXPECTED 'm'))
                (mult_prec_operator)
                (value
                  (number
                    (int_number))))
              (ERROR
                (UNEXPECTED 'x'))
              (mult_prec_operator)
              (var_identifier))))))))

================================================================================
rem
================================================================================

global SomeGlobal := {
    property<relative-font-size> global_rem: 4rem;
}

TestCase := Window {
    default-font-size: 10px;
    property<length> normal: 1rem;
    property<length> double: 2rem;
    property<length> half: 0.5rem;
    property <relative-font-size> four_rem: 4rem;
    property<length> four: four_rem;

    property<physical-length> phys-pixel-size: 1rem;

    property <relative-font-size> px_to_rem: 20px;
    property <relative-font-size> phx_to_rem: 20phx;

    property <bool> cmp_test: normal < 1rem && double > 1rem;

    property<bool> test:(normal == 10px && double == 20px && half == 5px && four_rem == 40px && SomeGlobal.global_rem == 40px && phys-pixel-size == 10phx && px_to_rem == 2rem);
}

--------------------------------------------------------------------------------

(source_file
  (global_definition
    (var_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type))))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (value_with_units
                (number
                  (float_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number))))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (comparison_binary_expression
              (comparison_binary_expression
                (var_identifier)
                (comparison_operator)
                (mult_binary_expression
                  (value
                    (value_with_units
                      (number
                        (int_number))
                      (unit_type)))
                  (mult_prec_operator)
                  (var_identifier)))
              (comparison_operator)
              (value
                (value_with_units
                  (number
                    (int_number))
                  (unit_type))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (expression_body_paren
              (ERROR)
              (mult_binary_expression
                (mult_binary_expression
                  (mult_binary_expression
                    (mult_binary_expression
                      (mult_binary_expression
                        (mult_binary_expression
                          (value
                            (value_with_units
                              (number
                                (int_number))
                              (unit_type)))
                          (mult_prec_operator)
                          (ERROR)
                          (value
                            (value_with_units
                              (number
                                (int_number))
                              (unit_type))))
                        (mult_prec_operator)
                        (ERROR)
                        (value
                          (value_with_units
                            (number
                              (int_number))
                            (unit_type))))
                      (mult_prec_operator)
                      (ERROR)
                      (value
                        (value_with_units
                          (number
                            (int_number))
                          (unit_type))))
                    (mult_prec_operator)
                    (var_identifier
                      (post_identifier)))
                  (ERROR
                    (int_number))
                  (mult_prec_operator)
                  (ERROR)
                  (value
                    (number
                      (int_number))))
                (ERROR
                  (UNEXPECTED 'x'))
                (mult_prec_operator)
                (ERROR)
                (value
                  (value_with_units
                    (number
                      (int_number))
                    (unit_type)))))))))))

================================================================================
array
================================================================================

export struct Player := {
    skill-profile: int,
}
export struct NewGameTeam := {
    players: [Player],
}
export struct NewGameParameters := {
    teams: [NewGameTeam],
}


struct StructWithArrayOfStruct := { prop: [{hello: string, world: int}], xxx: int }

TestCase := Rectangle {
    property <[int]> p1 : [ 12, 13 ];
    property <[float]> p2 : [ 14, 15.5 ];
    property <[string]> p3 : [ ];
    property <[{a: int, b: int}]> p4 : [ { a: 1 }, { a: 42, b: 10 } ];
    property <StructWithArrayOfStruct> p5 : { prop: [{hello: "hello"}, {world: 42.0 }]};

    property <NewGameParameters> p6 : { teams: [{ players: [ { skill-profile: 9 } ] }] } ;
}


--------------------------------------------------------------------------------

(source_file
  (struct_definition
    (visibility_modifier)
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (builtin_type_identifier))))
  (struct_definition
    (visibility_modifier)
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (var_identifier
          (reference_identifier
            (MISSING "parent"))
          (index_operator
            (var_identifier))))))
  (struct_definition
    (visibility_modifier)
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (var_identifier
          (reference_identifier
            (MISSING "parent"))
          (index_operator
            (var_identifier))))))
  (struct_definition
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (ERROR
          (UNEXPECTED 'h'))
        (builtin_type_identifier)
        (var_identifier)
        (builtin_type_identifier))))
  (ERROR
    (UNEXPECTED 'x')
    (UNEXPECTED ')
    (UNEXPECTED 'T')
    (UNEXPECTED 'R'))
  (component_definition
    (builtin_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (property_type_list
            (builtin_type_identifier))
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (ERROR
              (int_number))
            (value
              (number
                (int_number))))
          (ERROR))
        (property_definition
          (property_type_list
            (builtin_type_identifier))
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (ERROR
              (int_number))
            (value
              (number
                (float_number))))
          (ERROR))
        (property_definition
          (property_type_list
            (builtin_type_identifier))
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (list_definition
              (list_definition_body))))
        (ERROR
          (ERROR
            (UNEXPECTED ':')
            (UNEXPECTED ',')
            (UNEXPECTED ':')
            (UNEXPECTED '}')
            (UNEXPECTED '4')
            (int_number))
          (UNEXPECTED ':')
          (int_number)
          (UNEXPECTED ':')
          (int_number)
          (UNEXPECTED ':')
          (int_number))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED ':'))
          (property_expr
            (list_definition
              (list_definition_body
                (struct_field_declaration_list
                  (struct_field_declaration_list_body
                    (var_identifier)
                    (string
                      (string_fragment))))
                (struct_field_declaration_list
                  (struct_field_declaration_list_body
                    (var_identifier)
                    (value
                      (number
                        (float_number))))))))
          (ERROR))
        (property_definition
          (user_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED 'e'))
          (property_expr
            (ERROR
              (var_identifier))
            (list_definition
              (list_definition_body
                (struct_field_declaration_list
                  (struct_field_declaration_list_body
                    (var_identifier)
                    (value
                      (number
                        (int_number))))))))
          (ERROR))))))

================================================================================
object
================================================================================

TestCase := Rectangle {
    property<{a: string, b: int}> foo: {a : "444", b: 12 };
    property<{a: string, b: int}> obj_conversion: { b: 12, a : 444, c: "nothing" };
    property<{a: string, b: int}> obj_conversion2: { a: "hello" };
    property<{a: string, b: int}> obj_cond: true ? { b: 12, a : "ddd" } :  { a: 12, b : 444, c: "nothing" };
    property<{a: int, b: int}> obj_cond_merge : true ? { a: 1 } : { b: 10 };
    property<bool> obj_binop_merge : { foo: 0, x: 1 } == { bar: 0, x: 1 };

    property<string> foo_a : foo.a;
    property<int> foo_b : foo.b;
    property<int> obj_cond_merge_b : obj_cond_merge.b;
    callback change_foo;
    change_foo => {
        foo.a = obj_conversion2.a;
        foo.b += 8 + obj_conversion2.b;
    }

    function return_object() -> { aa: { bb: int } }
    { return { aa: { bb: { cc: 42 }.cc } }; }
    property <bool> test: return_object().aa.bb == 42 && obj_binop_merge;

}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (ERROR
            (UNEXPECTED ':'))
          (builtin_type_identifier)
          (ERROR
            (UNEXPECTED ':')
            (UNEXPECTED '}'))
          (var_identifier)
          (ERROR
            (UNEXPECTED ')
            (property_expr
              (string
                (string_fragment)))
            (UNEXPECTED ':'))
          (property_expr
            (value
              (number
                (int_number))))
          (ERROR))
        (property_definition
          (ERROR
            (UNEXPECTED ':'))
          (builtin_type_identifier)
          (ERROR
            (UNEXPECTED ':')
            (UNEXPECTED '}'))
          (var_identifier)
          (ERROR
            (property_expr
              (ERROR
                (UNEXPECTED ':'))
              (value
                (number
                  (int_number))))
            (UNEXPECTED ')
            (property_expr
              (value
                (number
                  (int_number))))
            (UNEXPECTED ':'))
          (property_expr
            (string
              (string_fragment)))
          (ERROR))
        (property_definition
          (ERROR
            (UNEXPECTED ':'))
          (builtin_type_identifier)
          (ERROR
            (UNEXPECTED ':')
            (UNEXPECTED '}'))
          (var_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED ':'))
          (property_expr
            (string
              (string_fragment)))
          (ERROR))
        (property_definition
          (ERROR
            (UNEXPECTED ':'))
          (builtin_type_identifier)
          (ERROR
            (UNEXPECTED ':')
            (UNEXPECTED '}'))
          (var_identifier)
          (ERROR
            (property_expr
              (ternary_expression
                (value
                  (language_constant))
                (ERROR
                  (UNEXPECTED ':'))
                (value
                  (number
                    (int_number)))
                (ERROR
                  (UNEXPECTED '))
                (string
                  (string_fragment))))
            (UNEXPECTED ':')
            (property_expr
              (value
                (number
                  (int_number))))
            (UNEXPECTED ')
            (property_expr
              (value
                (number
                  (int_number))))
            (UNEXPECTED ':'))
          (property_expr
            (string
              (string_fragment)))
          (ERROR))
        (ERROR
          (UNEXPECTED ':')
          (UNEXPECTED ',')
          (UNEXPECTED ':')
          (UNEXPECTED '}')
          (UNEXPECTED 'b')
          (UNEXPECTED ':')
          (int_number)
          (UNEXPECTED ':')
          (int_number))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (ERROR
                (UNEXPECTED 'o'))
              (value
                (number
                  (int_number))))
            (UNEXPECTED 'x')
            (property_expr
              (value
                (number
                  (int_number))))
            (UNEXPECTED 'a')
            (property_expr
              (value
                (number
                  (int_number))))
            (UNEXPECTED 'x'))
          (property_expr
            (value
              (number
                (int_number))))
          (ERROR))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (callback_definition
          (function_identifier))
        (callback_event
          (function_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier
                  (post_identifier))
                (assignment_prec_operator)
                (var_identifier
                  (ERROR
                    (int_number))
                  (post_identifier)))
              (variable_set_equal
                (var_identifier
                  (post_identifier))
                (assignment_prec_operator)
                (add_binary_expression
                  (value
                    (number
                      (int_number)))
                  (add_prec_operator)
                  (var_identifier
                    (ERROR
                      (int_number))
                    (post_identifier)))))))
        (var_identifier)
        (component_definition
          (user_type_identifier)
          (ERROR
            (var_identifier)
            (assignment_prec_operator))
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (builtin_type_identifier)
                (MISSING ";"))))))))
  (component_definition
    (user_type_identifier
      (MISSING _identifier))
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (ERROR
            (var_identifier)
            (assignment_prec_operator)
            (UNEXPECTED 'b'))
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (int_number)))
                (ERROR
                  (UNEXPECTED 'c'))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (function_call
                (function_identifier)
                (call_signature
                  (formal_parameters))))
            (UNEXPECTED 'a')
            (UNEXPECTED 'b'))
          (property_expr
            (mult_binary_expression
              (value
                (number
                  (int_number)))
              (mult_prec_operator)
              (var_identifier))))))))

================================================================================
structs2
================================================================================

// Test that structs work if they are only referrenced by callbacks

struct Foo1 := { member: int, }
struct Foo2 := { a: Foo1 }
struct Foo3 := { b: int }


struct DeleteMe := { c: color }

TestCase := Rectangle {
    callback cb1(Foo2) -> Foo3;
    cb1(foo) => { return { b: foo.a.member+1 }; }

    property<Foo2> xx;
    pure callback cb2(Foo2, Foo2)->Foo2;
    property<Foo2> xx2: cb2(xx, xx);


    // Based on Issue #1733
    Rectangle {
        property<[DeleteMe]> data;
        for d[i] in data: Rectangle { }
    }
}


--------------------------------------------------------------------------------

(source_file
  (comment)
  (struct_definition
    (user_type_identifier)
    (ERROR
      (int_number))
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (builtin_type_identifier))))
  (struct_definition
    (user_type_identifier)
    (ERROR
      (int_number))
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (ERROR)
        (value
          (number
            (int_number))))))
  (struct_definition
    (user_type_identifier)
    (ERROR
      (int_number))
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (builtin_type_identifier))))
  (struct_definition
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (var_identifier))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (callback_definition
          (function_identifier)
          (ERROR
            (int_number))
          (call_signature
            (formal_parameters
              (ERROR)
              (formal_parameter
                (value
                  (number
                    (int_number))))))
          (user_type_identifier)
          (ERROR
            (int_number)))
        (callback_event
          (function_identifier)
          (ERROR
            (int_number)
            (UNEXPECTED 'o'))
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (add_binary_expression
                        (var_identifier
                          (post_identifier)
                          (post_identifier))
                        (add_prec_operator)
                        (value
                          (number
                            (int_number))))
                      (ERROR)))))
              (property_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (var_identifier))
              (var_identifier)
              (callback_definition
                (function_identifier)
                (ERROR
                  (int_number))
                (call_signature
                  (formal_parameters
                    (ERROR)
                    (formal_parameter
                      (value
                        (number
                          (int_number))))
                    (ERROR)
                    (formal_parameter
                      (value
                        (number
                          (int_number))))))
                (user_type_identifier)
                (ERROR
                  (int_number)))
              (property_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (var_identifier)
                (ERROR
                  (int_number))
                (property_expr
                  (function_call
                    (function_identifier)
                    (ERROR
                      (int_number))
                    (call_signature
                      (formal_parameters
                        (formal_parameter
                          (var_identifier))
                        (formal_parameter
                          (var_identifier)))))))
              (comment)
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (property_definition
                      (property_type_list
                        (user_type_identifier))
                      (var_identifier))
                    (for_loop_definition
                      (var_identifier
                        (index_operator
                          (var_identifier)))
                      (var_identifier)
                      (component_definition
                        (user_type_identifier)
                        (field_declaration_list
                          (field_declaration_list_body)))))))))))
      (MISSING "}"))))

================================================================================
structs
================================================================================

export struct Player := {
    name: string,
    score: int,
    energy_level: float,
}

export struct Unused {
    foo: int,
}

TestCase := Rectangle {
    property<Player> player_1: {name : "Player1", score: 12, energy_level: 80% };
    property<Player> player_2: {name : "Player2", score: 24, energy_level: 40% };

    property<[Player]> players: [player_1, player_2];
    property<[Player]> player_list: [
        {name : "Simon", score: 1, energy_level: 50% },
        {name : "Olivier", score: 10 },
        {name : "NoScore", }
    ];

    property player_2_alias <=> player_2;
    property<int> player_2_score: player_2_alias.score;

    property <bool> test: player_2_score == 24;
}

--------------------------------------------------------------------------------

(source_file
  (struct_definition
    (visibility_modifier)
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (builtin_type_identifier)
        (var_identifier)
        (builtin_type_identifier)
        (var_identifier)
        (builtin_type_identifier))))
  (struct_definition
    (visibility_modifier)
    (user_type_identifier)
    (ERROR
      (UNEXPECTED 'o')
      (UNEXPECTED ',')
      (UNEXPECTED 'T'))
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (ERROR
          (UNEXPECTED 'P')
          (UNEXPECTED 'l')
          (int_number)
          (UNEXPECTED 'n'))
        (string
          (string_fragment))
        (var_identifier)
        (value
          (number
            (int_number)))
        (var_identifier)
        (value
          (value_with_units
            (number
              (int_number))
            (unit_type))))))
  (ERROR
    (UNEXPECTED 'P')
    (UNEXPECTED 'l')
    (int_number)
    (UNEXPECTED 'n')
    (UNEXPECTED 'P')
    (int_number)
    (UNEXPECTED 'c')
    (int_number)
    (UNEXPECTED 'e')
    (int_number)
    (UNEXPECTED 'P')
    (UNEXPECTED 'l')
    (UNEXPECTED 'l')
    (int_number)
    (UNEXPECTED 'l')
    (int_number)
    (UNEXPECTED 'P')
    (UNEXPECTED 'l')
    (UNEXPECTED 'n')
    (UNEXPECTED 'S')
    (UNEXPECTED 'c')
    (int_number)
    (UNEXPECTED 'e')
    (int_number)
    (UNEXPECTED 'n')
    (UNEXPECTED 'O')
    (UNEXPECTED 'c')
    (int_number)
    (UNEXPECTED 'n')
    (UNEXPECTED 'N')
    (UNEXPECTED 'l')
    (int_number)
    (UNEXPECTED '_')
    (UNEXPECTED 'l')
    (int_number)
    (UNEXPECTED '>')
    (UNEXPECTED 'l')
    (int_number)
    (UNEXPECTED '_')
    (UNEXPECTED 'l')
    (int_number)
    (UNEXPECTED '_')
    (UNEXPECTED 'c')
    (builtin_type_identifier)
    (UNEXPECTED 'e')
    (UNEXPECTED 'l')
    (int_number)
    (UNEXPECTED '_')
    (int_number)))

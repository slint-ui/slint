================================================================================
forward
================================================================================

TestCase := Rectangle {
    width: 400phx;
    height: 400phx;

    callback focus_rectangle();
    focus_rectangle => { rectangle.focus(); }

    rectangle := Rectangle {
        width: parent.width;
        height: 200phx;
        forward-focus: input;
    }

    input := TextInput {
        y: 200phx;
        width: parent.width;
        height: 200phx;
    }

    property<bool> input_focused: input.has_focus;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (physical_length_value)))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
initial_focus_through_component
================================================================================

TextComponent := Rectangle {
    property<bool> has_focus: my_text_input.has_focus;
    forward-focus: my_text_input;
    my_text_input := TextInput { }

    callback not_called;
    not_called => {
        if (false) {
            my_text_input.focus();
        }
    }
}

TestCase := Rectangle {
    width: 400phx;
    height: 400phx;
    forward-focus: input2;

    input1 := TextComponent {
    }
    input2 := TextComponent {
    }

    callback not_called;
    not_called => {
      input1.focus();
    }

    property<bool> input1_focused: input1.has_focus;
    property<bool> input2_focused: input2.has_focus;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (if_statement
                (value
                  (value
                    (basic_value
                      (bool_value))))
                (component
                  (type_identifier
                    (MISSING _identifier))
                  (block
                    (block_statement
                      (var_identifier
                        (post_identifier
                          (function_call
                            (function_identifier)
                            (call_signature))))))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
initial_focus_through_layout
================================================================================

TextComponent := GridLayout {
    property<bool> has_focus: my_text_input.has_focus;
    forward-focus: my_text_input;
    Row {
        my_text_input := TextInput { }
    }
}

TestCase := Rectangle {
    width: 400phx;
    height: 400phx;
    forward-focus: input2;

    input1 := TextComponent {
    }
    input2 := TextComponent {
    }

    property<bool> input1_focused: input1.has_focus;
    property<bool> input2_focused: input2.has_focus;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
event_propagation
================================================================================

TestCase := Rectangle {
    width: 400phx;
    height: 400phx;
    forward-focus: input2;

    input1 := TextInput {
        width: parent.width;
        height: 200phx;
        Rectangle {
            FocusScope {
                width: 75%;
                key-pressed(event) => {
                    if (event.text != Key.Shift && event.text != Key.Control) {
                        received += event.text;
                    }
                    accept
                }

                if (false) : Rectangle { FocusScope {} }

                input2 := TextInput {
                    width: 75%;
                    height: 100%;
                }
            }
        }
        Rectangle {
            width: 0%;
            FocusScope {  }
        }
    }

    property<bool> input1_focused: input1.has_focus;
    property<string> input1_text: input1.text;
    property<bool> input2_focused: input2.has_focus;
    property<string> input2_text: input2.text;
    property<string> received;
}

/*
let instance = TestCase::new();

assert!(!instance.get_input1_focused());
assert!(instance.get_input2_focused());

slint_testing::send_keyboard_string_sequence(&instance, "Hello");
assert_eq!(instance.get_input2_text(), "Hello");
assert_eq!(instance.get_input1_text(), "");
assert_eq!(instance.get_received(), "");

slint_testing::send_keyboard_char(&instance, slint::private_unstable_api::re_exports::Key::Control.into(), true);
slint_testing::send_keyboard_string_sequence(&instance, "ß");
assert_eq!(instance.get_input2_text(), "Hello");
assert_eq!(instance.get_input1_text(), "");
assert_eq!(instance.get_received(), "ß");
auto handle = TestCase::create();
const TestCase &instance = *handle;

assert(!instance.get_input1_focused());
assert(instance.get_input2_focused());

slint_testing::send_keyboard_string_sequence(&instance, "Hello");
assert_eq(instance.get_input2_text(), "Hello");
assert_eq(instance.get_input1_text(), "");
assert_eq(instance.get_received(), "");

// Control key
slint_testing::send_keyboard_char(&instance, slint::SharedString(u8"\U00000011"), true);
slint_testing::send_keyboard_string_sequence(&instance, "ß");
assert_eq(instance.get_input2_text(), "Hello");
assert_eq(instance.get_input1_text(), "");
assert_eq(instance.get_received(), "ß");

*/
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (basic_value
                                (percent_value)))))
                        (block_statement
                          (callback_event
                            (function_identifier)
                            (call_signature
                              (var_identifier))
                            (block
                              (block_statement
                                (if_statement
                                  (comparison_binary_expression
                                    (comparison_binary_expression
                                      (var_identifier
                                        (post_identifier))
                                      (comparison_operator)
                                      (mult_binary_expression
                                        (var_identifier
                                          (post_identifier))
                                        (mult_prec_operator)
                                        (var_identifier
                                          (post_identifier))))
                                    (comparison_operator)
                                    (var_identifier
                                      (post_identifier)))
                                  (component
                                    (type_identifier
                                      (MISSING _identifier))
                                    (block
                                      (assignment_expr
                                        (var_identifier)
                                        (assignment_prec_operator)
                                        (var_identifier
                                          (post_identifier)))))))
                              (var_identifier))))
                        (block_statement
                          (if_statement
                            (value
                              (value
                                (basic_value
                                  (bool_value))))
                            (component
                              (type_identifier)
                              (block
                                (block_statement
                                  (component
                                    (type_identifier)
                                    (block)))))))
                        (block_statement
                          (component
                            (var_identifier)
                            (type_identifier)
                            (block
                              (block_statement
                                (assignment_expr
                                  (var_identifier)
                                  (assignment_prec_operator)
                                  (value
                                    (basic_value
                                      (percent_value)))))
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (value
                                  (basic_value
                                    (percent_value)))))))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (percent_value)))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block)))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))))
  (comment))

================================================================================
event_propagation_2
================================================================================

TestCase := Window {
    width: 100phx;
    height: 100phx;
    FocusScope {
        key-pressed(event) => {
            r1 += event.text;
            return event.text == "a" ? accept : reject;
        }

        FocusScope {
            key-pressed(event) => {
                r2 += event.text;
                return event.text == "b" ? accept : reject;
            }
            Rectangle {
                FocusScope {
                    key-pressed(event) => {
                        r3 += event.text;
                        return event.text == "c" ? accept : reject;
                    }

                    if (toggle) : FocusScope {
                        key-pressed(event) => {
                            r4 += event.text;
                            return event.text == "d" ? accept : reject;
                        }
                        FocusScope {
                            key-pressed(event) => {
                                r5 += event.text;
                                return event.text == "e" ? accept : reject;
                            }
                            TouchArea {
                                clicked => {
                                    parent.focus();
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    property<bool> toggle: true;
    property<string> r1;
    property<string> r2;
    property<string> r3;
    property<string> r4;
    property<string> r5;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (callback_event
                (function_identifier)
                (call_signature
                  (var_identifier))
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (post_identifier))))
                  (block_statement
                    (comparison_binary_expression
                      (var_identifier
                        (post_identifier))
                      (comparison_operator)
                      (ternary_expression
                        (value
                          (basic_value
                            (string_value
                              (_string_fragment))))
                        (var_identifier)
                        (var_identifier)))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (call_signature
                        (var_identifier))
                      (block
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (var_identifier
                              (post_identifier))))
                        (block_statement
                          (comparison_binary_expression
                            (var_identifier
                              (post_identifier))
                            (comparison_operator)
                            (ternary_expression
                              (value
                                (basic_value
                                  (string_value
                                    (_string_fragment))))
                              (var_identifier)
                              (var_identifier)))))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (component
                            (type_identifier)
                            (block
                              (block_statement
                                (callback_event
                                  (function_identifier)
                                  (call_signature
                                    (var_identifier))
                                  (block
                                    (block_statement
                                      (assignment_expr
                                        (var_identifier)
                                        (assignment_prec_operator)
                                        (var_identifier
                                          (post_identifier))))
                                    (block_statement
                                      (comparison_binary_expression
                                        (var_identifier
                                          (post_identifier))
                                        (comparison_operator)
                                        (ternary_expression
                                          (value
                                            (basic_value
                                              (string_value
                                                (_string_fragment))))
                                          (var_identifier)
                                          (var_identifier)))))))
                              (block_statement
                                (if_statement
                                  (var_identifier)
                                  (component
                                    (type_identifier)
                                    (block
                                      (block_statement
                                        (callback_event
                                          (function_identifier)
                                          (call_signature
                                            (var_identifier))
                                          (block
                                            (block_statement
                                              (assignment_expr
                                                (var_identifier)
                                                (assignment_prec_operator)
                                                (var_identifier
                                                  (post_identifier))))
                                            (block_statement
                                              (comparison_binary_expression
                                                (var_identifier
                                                  (post_identifier))
                                                (comparison_operator)
                                                (ternary_expression
                                                  (value
                                                    (basic_value
                                                      (string_value
                                                        (_string_fragment))))
                                                  (var_identifier)
                                                  (var_identifier)))))))
                                      (block_statement
                                        (component
                                          (type_identifier)
                                          (block
                                            (block_statement
                                              (callback_event
                                                (function_identifier)
                                                (call_signature
                                                  (var_identifier))
                                                (block
                                                  (block_statement
                                                    (assignment_expr
                                                      (var_identifier)
                                                      (assignment_prec_operator)
                                                      (var_identifier
                                                        (post_identifier))))
                                                  (block_statement
                                                    (comparison_binary_expression
                                                      (var_identifier
                                                        (post_identifier))
                                                      (comparison_operator)
                                                      (ternary_expression
                                                        (value
                                                          (basic_value
                                                            (string_value
                                                              (_string_fragment))))
                                                        (var_identifier)
                                                        (var_identifier)))))))
                                            (block_statement
                                              (component
                                                (type_identifier)
                                                (block
                                                  (block_statement
                                                    (callback_event
                                                      (function_identifier)
                                                      (block
                                                        (block_statement
                                                          (var_identifier
                                                            (reference_identifier)
                                                            (post_identifier
                                                              (function_call
                                                                (function_identifier)
                                                                (call_signature))))))))))))))))))))))))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (basic_value
              (bool_value)))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier))))))

================================================================================
focus_change
================================================================================

TestCase := Rectangle {
    width: 400phx;
    height: 400phx;

    input1 := TextInput {
        width: parent.width;
        height: 200phx;
    }

    input2 := TextInput {
        y: 200phx;
        width: parent.width;
        height: 200phx;
    }

    property<bool> input1_focused: input1.has_focus;
    property<string> input1_text: input1.text;
    property<bool> input2_focused: input2.has_focus;
    property<string> input2_text: input2.text;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (physical_length_value)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (physical_length_value)))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
focus_change_subcompo
================================================================================

// Test that the correct item indices are computed when focusing
// children of sub-components or their roots.

SubComponentWithFocusableChild := Rectangle {
    property <bool> has-focus: input.has-focus;

    callback activate();
    activate => {
        input.focus();
    }

    input := TextInput {
        width: 100%;
        height: 100%;
    }
}

SubComponentWithRootFocusable := TextInput {
    callback activate();
    activate => {
        root.focus();
    }
}

FocusInNestedSubComponent := Rectangle {
    property <bool> has-focus: compo.has-focus;
    callback activate();
    activate => {
        compo.activate();
    }
    compo := SubComponentWithRootFocusable {
    }
}


TestCase := Rectangle {
    width: 400phx;
    height: 400phx;

    callback focus_subcompo1();
    focus_subcompo1 => { input1.activate(); }
    callback focus_subcompo2();
    focus_subcompo2 => { input2.activate(); }
    callback focus_subcompo3();
    focus_subcompo3 => { input3.activate(); }

    input1 := SubComponentWithFocusableChild {
        y: 0phx;
        height: 150phx;
    }

    input2 := SubComponentWithRootFocusable {
        y: 150phx;
        height: 150phx;
    }

    input3 := FocusInNestedSubComponent {
        y: 250px;
        height: 150px;
    }

    property<bool> input1_focused: input1.has_focus;
    property<bool> input2_focused: input2.has_focus;
    property<bool> input3_focused: input3.has_focus;

}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (percent_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (percent_value)))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (reference_identifier)
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (physical_length_value)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (physical_length_value)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (length_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (length_value)))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
focus_change_through_signal
================================================================================

SubElement := Rectangle {
    property text <=> input.text;
    property <bool> has-focus: input.has-focus;
    forward_focus: input;
    input := TextInput {
        width: 100%;
        height: 100%;
    }
}

TestCase := Rectangle {
    width: 400phx;
    height: 400phx;

    callback focus_input1();
    focus_input1 => { input1.focus(); }

    callback focus_input2();
    focus_input2 => { input2.focus(); }

    Rectangle {
        input1 := TextInput {
            width: parent.width;
            height: 200phx;
        }
    }

    input2 := SubElement {
        y: 200phx;
        width: parent.width;
        height: 200phx;
    }

    if (false) : SubElement {  }

    property<bool> input1_focused: input1.has_focus;
    property<string> input1_text: input1.text;
    property<bool> input2_focused: input2.has_focus;
    property<string> input2_text: input2.text;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property_alias
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (percent_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (percent_value)))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (basic_value
                        (physical_length_value))))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (physical_length_value)))))))
      (block_statement
        (if_statement
          (value
            (value
              (basic_value
                (bool_value))))
          (component
            (type_identifier)
            (block))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
initial_focus
================================================================================

TestCase := Rectangle {
    width: 400phx;
    height: 400phx;
    forward-focus: input1;

    input1 := TextInput {
        width: parent.width;
        height: 200phx;
    }
    input2 := TextInput {
        y: 200phx;
        width: parent.width;
        height: 200phx;
    }

    property<bool> input1_focused: input1.has_focus;
    property<string> input1_text: input1.text;
    property<bool> input2_focused: input2.has_focus;
    property<string> input2_text: input2.text;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (physical_length_value)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (physical_length_value)))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
keyboard_focus
================================================================================

import { SpinBox, LineEdit, HorizontalBox, VerticalBox, TabWidget } from "std-widgets.slint";

TestCase := Window {
    preferred-width: 500px;
    preferred-height: 400px;

    property<[{name: string, account: string, score: float}]> model: [
        {
            name: "Olivier",
            account: "ogoffart",
            score: 456,
        },
        {
            name: "Simon",
            account: "tronical",
            score: 789,
        }
    ];

    property<string> result;

    VerticalBox {
        FocusScope {
            key-pressed(event) => {
                if (event.text == "X") {
                    result += "T:";
                    return accept;
                }
                return reject;
            }
        }

        for person[i] in model: HorizontalBox {
            FocusScope {
                key-pressed(event) => {
                    if (event.text == "X") {
                        result += "1." + person.score + ":";
                        return accept;
                    }
                    return reject;
                }
            }
            FocusScope {
                enabled: false;
            }
            FocusScope {
                key-pressed(event) => {
                    if (event.text == "X") {
                        result += "2." + i + ":";
                        return accept;
                    }
                    return reject;
                }
            }
            if (true) : FocusScope {
                enabled: false;
            }
        }
        FocusScope {
            key-pressed(event) => {
                if (event.text == "X") {
                    result += "B:";
                    return accept;
                }
                return reject;
            }
        }
    }
    for xxx in [0, 1] : FocusScope {
        enabled: false;
        key-pressed(event) => {
            result += "disabledA" + xxx;
            accept
        }
        if (true) :  FocusScope {
            enabled: false;
            key-pressed(event) => {
                result += "disabledB" + xxx;
                accept
            }
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (import_statement
    (type_identifier)
    (type_identifier)
    (type_identifier)
    (type_identifier)
    (type_identifier)
    (string_value
      (_string_fragment)))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (property
          (type_list
            (type
              (type_anon_struct
                (var_identifier)
                (type
                  (type_identifier))
                (var_identifier)
                (type
                  (type_identifier))
                (var_identifier)
                (type
                  (type_identifier)))))
          (var_identifier)
          (value
            (value_list
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (basic_value
                      (string_value
                        (_string_fragment))))
                  (var_identifier)
                  (value
                    (basic_value
                      (string_value
                        (_string_fragment))))
                  (var_identifier)
                  (value
                    (basic_value
                      (int_value)))))
              (value
                (anon_struct
                  (var_identifier)
                  (value
                    (basic_value
                      (string_value
                        (_string_fragment))))
                  (var_identifier)
                  (value
                    (basic_value
                      (string_value
                        (_string_fragment))))
                  (var_identifier)
                  (value
                    (basic_value
                      (int_value)))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (call_signature
                        (var_identifier))
                      (block
                        (block_statement
                          (if_statement
                            (comparison_binary_expression
                              (var_identifier
                                (post_identifier))
                              (comparison_operator)
                              (value
                                (basic_value
                                  (string_value
                                    (_string_fragment)))))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (block_statement
                                  (assignment_expr
                                    (var_identifier)
                                    (assignment_prec_operator)
                                    (value
                                      (basic_value
                                        (string_value
                                          (_string_fragment))))))
                                (block_statement
                                  (var_identifier))))))
                        (block_statement
                          (var_identifier))))))))
            (block_statement
              (for_loop
                (var_identifier
                  (index_operator
                    (var_identifier)))
                (for_range
                  (var_identifier))
                (component
                  (type_identifier)
                  (block
                    (block_statement
                      (component
                        (type_identifier)
                        (block
                          (block_statement
                            (callback_event
                              (function_identifier)
                              (call_signature
                                (var_identifier))
                              (block
                                (block_statement
                                  (if_statement
                                    (comparison_binary_expression
                                      (var_identifier
                                        (post_identifier))
                                      (comparison_operator)
                                      (value
                                        (basic_value
                                          (string_value
                                            (_string_fragment)))))
                                    (component
                                      (type_identifier
                                        (MISSING _identifier))
                                      (block
                                        (block_statement
                                          (assignment_expr
                                            (var_identifier)
                                            (assignment_prec_operator)
                                            (add_binary_expression
                                              (add_binary_expression
                                                (value
                                                  (basic_value
                                                    (string_value
                                                      (_string_fragment))))
                                                (add_prec_operator)
                                                (var_identifier
                                                  (post_identifier)))
                                              (add_prec_operator)
                                              (value
                                                (basic_value
                                                  (string_value
                                                    (_string_fragment)))))))
                                        (block_statement
                                          (var_identifier))))))
                                (block_statement
                                  (var_identifier))))))))
                    (block_statement
                      (component
                        (type_identifier)
                        (block
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (basic_value
                                (bool_value)))))))
                    (block_statement
                      (component
                        (type_identifier)
                        (block
                          (block_statement
                            (callback_event
                              (function_identifier)
                              (call_signature
                                (var_identifier))
                              (block
                                (block_statement
                                  (if_statement
                                    (comparison_binary_expression
                                      (var_identifier
                                        (post_identifier))
                                      (comparison_operator)
                                      (value
                                        (basic_value
                                          (string_value
                                            (_string_fragment)))))
                                    (component
                                      (type_identifier
                                        (MISSING _identifier))
                                      (block
                                        (block_statement
                                          (assignment_expr
                                            (var_identifier)
                                            (assignment_prec_operator)
                                            (add_binary_expression
                                              (add_binary_expression
                                                (value
                                                  (basic_value
                                                    (string_value
                                                      (_string_fragment))))
                                                (add_prec_operator)
                                                (var_identifier))
                                              (add_prec_operator)
                                              (value
                                                (basic_value
                                                  (string_value
                                                    (_string_fragment)))))))
                                        (block_statement
                                          (var_identifier))))))
                                (block_statement
                                  (var_identifier))))))))
                    (block_statement
                      (if_statement
                        (value
                          (value
                            (basic_value
                              (bool_value))))
                        (component
                          (type_identifier)
                          (block
                            (assignment_expr
                              (var_identifier)
                              (assignment_prec_operator)
                              (value
                                (basic_value
                                  (bool_value))))))))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (call_signature
                        (var_identifier))
                      (block
                        (block_statement
                          (if_statement
                            (comparison_binary_expression
                              (var_identifier
                                (post_identifier))
                              (comparison_operator)
                              (value
                                (basic_value
                                  (string_value
                                    (_string_fragment)))))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (block_statement
                                  (assignment_expr
                                    (var_identifier)
                                    (assignment_prec_operator)
                                    (value
                                      (basic_value
                                        (string_value
                                          (_string_fragment))))))
                                (block_statement
                                  (var_identifier))))))
                        (block_statement
                          (var_identifier)))))))))))
      (block_statement
        (for_loop
          (var_identifier)
          (for_range
            (value_list
              (value
                (basic_value
                  (int_value)))
              (value
                (basic_value
                  (int_value)))))
          (component
            (type_identifier)
            (block
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (basic_value
                      (bool_value)))))
              (block_statement
                (callback_event
                  (function_identifier)
                  (call_signature
                    (var_identifier))
                  (block
                    (block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (add_binary_expression
                          (value
                            (basic_value
                              (string_value
                                (_string_fragment))))
                          (add_prec_operator)
                          (var_identifier))))
                    (var_identifier))))
              (block_statement
                (if_statement
                  (value
                    (value
                      (basic_value
                        (bool_value))))
                  (component
                    (type_identifier)
                    (block
                      (block_statement
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (basic_value
                              (bool_value)))))
                      (block_statement
                        (callback_event
                          (function_identifier)
                          (call_signature
                            (var_identifier))
                          (block
                            (block_statement
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (add_binary_expression
                                  (value
                                    (basic_value
                                      (string_value
                                        (_string_fragment))))
                                  (add_prec_operator)
                                  (var_identifier))))
                            (var_identifier)))))))))))))))

================================================================================
keyboard_focus2
================================================================================

// cSpell: ignore backtab

import { VerticalBox, ListView } from "std-widgets.slint";

TestCase := Window {
  width: 500px;
  height: 400px;

  property <[string]> features : [ "f" ];
  property <string> result;

  VerticalBox {
    VerticalBox {
      if true: ListView {
        for f in features: FocusScope {
          key-pressed(event) => {
              if (event.text == "X") {
                  result += "1:";
                  return accept;
              }
              return reject;
          }
        }
      }
      if false: Rectangle { }
    }
    FocusScope {
      key-pressed(event) => {
          if (event.text == "X") {
              result += "2:";
              return accept;
          }
          return reject;
      }
    }
  }
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (import_statement
    (type_identifier)
    (type_identifier)
    (string_value
      (_string_fragment)))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (property
          (type_list
            (type
              (type_identifier)))
          (var_identifier)
          (value
            (value_list
              (value
                (basic_value
                  (string_value
                    (_string_fragment))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (if_statement
                      (value
                        (basic_value
                          (bool_value)))
                      (component
                        (type_identifier)
                        (block
                          (block_statement
                            (for_loop
                              (var_identifier)
                              (for_range
                                (var_identifier))
                              (component
                                (type_identifier)
                                (block
                                  (block_statement
                                    (callback_event
                                      (function_identifier)
                                      (call_signature
                                        (var_identifier))
                                      (block
                                        (block_statement
                                          (if_statement
                                            (comparison_binary_expression
                                              (var_identifier
                                                (post_identifier))
                                              (comparison_operator)
                                              (value
                                                (basic_value
                                                  (string_value
                                                    (_string_fragment)))))
                                            (component
                                              (type_identifier
                                                (MISSING _identifier))
                                              (block
                                                (block_statement
                                                  (assignment_expr
                                                    (var_identifier)
                                                    (assignment_prec_operator)
                                                    (value
                                                      (basic_value
                                                        (string_value
                                                          (_string_fragment))))))
                                                (block_statement
                                                  (var_identifier))))))
                                        (block_statement
                                          (var_identifier)))))))))))))
                  (block_statement
                    (if_statement
                      (value
                        (basic_value
                          (bool_value)))
                      (component
                        (type_identifier)
                        (block)))))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (call_signature
                        (var_identifier))
                      (block
                        (block_statement
                          (if_statement
                            (comparison_binary_expression
                              (var_identifier
                                (post_identifier))
                              (comparison_operator)
                              (value
                                (basic_value
                                  (string_value
                                    (_string_fragment)))))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (block_statement
                                  (assignment_expr
                                    (var_identifier)
                                    (assignment_prec_operator)
                                    (value
                                      (basic_value
                                        (string_value
                                          (_string_fragment))))))
                                (block_statement
                                  (var_identifier))))))
                        (block_statement
                          (var_identifier))))))))))))))

================================================================================
materialized
================================================================================

// Test the propagation of maximum and minimum size through nested grid layouts

Btn := Rectangle {
    property <string> text;

    t := Text {
        text: root.text;
        width: 100%; height: 100%;
    }

    accessible-label: text;
    accessible-role: button;
}

Cb := Rectangle {
    property <string> text;
    accessible-label: text;
    t := Text { }
    accessible-description <=> t.text;
    accessible-role: checkbox;
    accessible-checked: true;
}

TestCase := Rectangle {
    width: 300phx;
    height: 300phx;

    vl := VerticalLayout {
        b1 := Btn {
            text: "plus";
        }

        txt := Text {
            text: "automatic text value";
        }


        b2 := Btn {
            text : "minus";
        }

        cb := Cb { text: "hello"; }
    }

    for t in ["abc"] : Text { text: t; accessible-description: t;  }

    property<AccessibleRole> materialized_b1_role: b1.accessible_role;
    property<string> materialized_b2_label: b2.accessible-label;
    property<string> materialized_vl_label: vl.accessible-label;
    property<AccessibleRole> materialized_vl_role: vl.accessible-role;
    property<AccessibleRole> materialized_txt_role: txt.accessible-role;
    property<string> materialized_txt_label: txt.accessible-label;

    property <bool> test:
        materialized_b1_role == AccessibleRole.button && materialized_b2_label == "minus"
        && materialized_vl_label == "" && materialized_vl_role == AccessibleRole.none
        && materialized_txt_label == "automatic text value" && materialized_txt_role == AccessibleRole.text
        && cb.accessible-checked && !b1.accessible-checked;
}


--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))
            (block_statement
              (assignment
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (percent_value))))
            (block_statement
              (assignment
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (percent_value)))))))
      (block_statement
        (assignment
          (var_identifier)
          (assignment_prec_operator)
          (type_identifier)))
      (block_statement
        (assignment
          (var_identifier)
          (assignment_prec_operator)
          (type_identifier)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (assignment
          (var_identifier)
          (assignment_prec_operator)
          (type_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (add_binary_expression
        (add_binary_expression
          (comparison_binary_expression
            (comparison_binary_expression
              (type_identifier)
              (comparison_operator)
              (var_identifier
                (MISSING "*")))
            (comparison_operator)
            (var_identifier
              (post_identifier)))
          (ERROR
            (UNEXPECTED 'c')
            (UNEXPECTED 'b'))
          (add_prec_operator)
          (type_identifier))
        (ERROR
          (UNEXPECTED 'h')
          (UNEXPECTED 'c')
          (UNEXPECTED 'b'))
        (add_prec_operator)
        (type_identifier))
      (ERROR)))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (assignment
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (string_value
                          (_string_fragment))))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (string_value
                          (_string_fragment))))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (string_value
                          (_string_fragment))))))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (string_value
                          (_string_fragment)))))))))))
      (block_statement
        (for_loop
          (var_identifier)
          (for_range
            (value
              (string_value
                (_string_fragment))))
          (component
            (type_identifier)
            (block
              (block_statement
                (assignment
                  (var_identifier)
                  (assignment_prec_operator)
                  (type_identifier)))
              (block_statement
                (assignment
                  (var_identifier)
                  (assignment_prec_operator)
                  (type_identifier)))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (comparison_binary_expression
                (comparison_binary_expression
                  (comparison_binary_expression
                    (comparison_binary_expression
                      (type_identifier)
                      (comparison_operator)
                      (mult_binary_expression
                        (var_identifier
                          (post_identifier))
                        (mult_prec_operator)
                        (type_identifier)))
                    (comparison_operator)
                    (mult_binary_expression
                      (value
                        (string_value
                          (_string_fragment)))
                      (mult_prec_operator)
                      (type_identifier)))
                  (comparison_operator)
                  (mult_binary_expression
                    (value
                      (string_value))
                    (mult_prec_operator)
                    (type_identifier)))
                (comparison_operator)
                (mult_binary_expression
                  (var_identifier
                    (post_identifier))
                  (mult_prec_operator)
                  (type_identifier)))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (string_value
                    (_string_fragment)))
                (mult_prec_operator)
                (type_identifier)))
            (comparison_operator)
            (mult_binary_expression
              (mult_binary_expression
                (var_identifier
                  (post_identifier))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier)))
              (mult_prec_operator)
              (unary_expression
                (unary_prec_operator)
                (var_identifier
                  (post_identifier))))))))))

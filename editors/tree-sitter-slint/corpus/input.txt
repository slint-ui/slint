================================================================================
clip_mouse
================================================================================

MaybeClip := Rectangle {
    width: 10phx;
    height: 10phx;
    property <int> touch;
    Rectangle {
        background: red;
        x: 5phx;
        y: -10phx;
        width: 15phx;
        height: 15phx;
        TouchArea {
            clicked => { touch+=1; }
        }
    }
}

TestCase := Rectangle {
    height: 100phx;
    width: 100phx;
    property <int> touch1 <=> el1.touch;
    property <int> touch2 <=> el2.touch;
    property <bool> el1clip;

    el1 := MaybeClip {
        clip <=> el1clip;
        x: 10phx;
        y: 10phx;
    }

    el2 := MaybeClip {
        clip: true;
        x: 30phx;
        y: 30phx;
    }

    // MaybeClip must be inlined when "clip" is set, but not when it isn't. Test that we can have
    // a combinaison of inlined and non inlined item
    MaybeClip { x: 5000px; }

    test_rect := Rectangle { clip: true; }
    property <bool> test: test_rect.clip;
}

--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (property
        (type
          (type_identifier))
        (var_identifier))
      (component
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (unary_expression
              (unary_prec_operator)
              (value
                (physical_length_value))))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))
          (component
            (type_identifier)
            (block
              (callback_event
                (function_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value)))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (binding_alias
            (var_identifier)
            (var_identifier))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (bool_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (comment)
      (comment)
      (component
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value)))))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (bool_value)))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier))))))

================================================================================
visible_mouse
================================================================================

MaybeVisible := Rectangle {
    width: 10phx;
    height: 10phx;
    property <int> touch;
    Rectangle {
        background: red;
        x: 5phx;
        y: -10phx;
        width: 15phx;
        height: 15phx;
        TouchArea {
            clicked => { touch+=1; }
        }
    }
}

TestCase := Rectangle {
    height: 100phx;
    width: 100phx;
    property <int> touch1 <=> el1.touch;
    property <int> touch2 <=> el2.touch;
    property <bool> el1visible : true;

    el1 := MaybeVisible {
        visible <=> el1visible;
        x: 10phx;
        y: 10phx;
    }

    el2 := MaybeVisible {
        visible: false;
        x: 30phx;
        y: 30phx;
    }

    test_rect := Rectangle { }
    property <bool> test: test_rect.visible && !el2.visible && el1.visible;
}

--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (property
        (type
          (type_identifier))
        (var_identifier))
      (component
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (unary_expression
              (unary_prec_operator)
              (value
                (physical_length_value))))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))
          (component
            (type_identifier)
            (block
              (callback_event
                (function_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (int_value)))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (bool_value)))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (binding_alias
            (var_identifier)
            (var_identifier))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (bool_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (component
        (var_identifier)
        (type_identifier)
        (block))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (mult_binary_expression
          (mult_binary_expression
            (var_identifier
              (post_identifier))
            (mult_prec_operator)
            (unary_expression
              (unary_prec_operator)
              (var_identifier
                (post_identifier))))
          (mult_prec_operator)
          (var_identifier
            (post_identifier)))))))

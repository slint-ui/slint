================================================================================
clip_mouse
================================================================================

MaybeClip := Rectangle {
    width: 10phx;
    height: 10phx;
    property <int> touch;
    Rectangle {
        background: red;
        x: 5phx;
        y: -10phx;
        width: 15phx;
        height: 15phx;
        TouchArea {
            clicked => { touch+=1; }
        }
    }
}

TestCase := Rectangle {
    height: 100phx;
    width: 100phx;
    property <int> touch1 <=> el1.touch;
    property <int> touch2 <=> el2.touch;
    property <bool> el1clip;

    el1 := MaybeClip {
        clip <=> el1clip;
        x: 10phx;
        y: 10phx;
    }

    el2 := MaybeClip {
        clip: true;
        x: 30phx;
        y: 30phx;
    }

    // MaybeClip must be inlined when "clip" is set, but not when it isn't. Test that we can have
    // a combinaison of inlined and non inlined item
    MaybeClip { x: 5000px; }

    test_rect := Rectangle { clip: true; }
    property <bool> test: test_rect.clip;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (unary_expression
                  (unary_prec_operator)
                  (value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (block
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (int_value))))))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (property_alias
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property_alias
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (property_alias
                (var_identifier)
                (var_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (physical_length_value))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (bool_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (physical_length_value))))))
      (comment)
      (comment)
      (block_statement
        (component
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (length_value))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (bool_value))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
visible_mouse
================================================================================

MaybeVisible := Rectangle {
    width: 10phx;
    height: 10phx;
    property <int> touch;
    Rectangle {
        background: red;
        x: 5phx;
        y: -10phx;
        width: 15phx;
        height: 15phx;
        TouchArea {
            clicked => { touch+=1; }
        }
    }
}

TestCase := Rectangle {
    height: 100phx;
    width: 100phx;
    property <int> touch1 <=> el1.touch;
    property <int> touch2 <=> el2.touch;
    property <bool> el1visible : true;

    el1 := MaybeVisible {
        visible <=> el1visible;
        x: 10phx;
        y: 10phx;
    }

    el2 := MaybeVisible {
        visible: false;
        x: 30phx;
        y: 30phx;
    }

    test_rect := Rectangle { }
    property <bool> test: test_rect.visible && !el2.visible && el1.visible;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (type_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (unary_expression
                  (unary_prec_operator)
                  (value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (block
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (int_value))))))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (physical_length_value))))
      (block_statement
        (property_alias
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property_alias
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (bool_value))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (property_alias
                (var_identifier)
                (var_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (physical_length_value))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (bool_value))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (physical_length_value))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (physical_length_value))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (mult_binary_expression
            (mult_binary_expression
              (var_identifier
                (post_identifier))
              (mult_prec_operator)
              (unary_expression
                (unary_prec_operator)
                (var_identifier
                  (post_identifier))))
            (mult_prec_operator)
            (var_identifier
              (post_identifier))))))))

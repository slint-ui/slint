================================================================================
handler
================================================================================

TestCase := Rectangle {
    callback test_callback;
    callback test_callback2;
    callback test_callback3;
    property<int> callback_emission_count;
    test_callback => {
        callback_emission_count += 1;
        // This returns something despite the callback isn't supposed to return anything.
        // Maybe one should produce a warning in the future, but at least we shouldn't
        // result in compilation error in the generated code
        callback_emission_count
    }
    test_callback2 => {  callback_emission_count = 88; root.test_callback3(); }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (int_value)))))
            (comment)
            (comment)
            (comment)
            (var_identifier))))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (int_value)))))
            (block_statement
              (var_identifier
                (reference_identifier)
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature)))))))))))

================================================================================
handler_with_arg
================================================================================

TestCase := Rectangle {
    callback test_callback(int);
    callback test_callback2(string);
    callback test_callback3(int, string);
    property<int> callback_emission_count;
    test_callback => { callback_emission_count += 1; }
    test_callback2(xx) => { callback_emission_count = 88; root.test_callback3(55, xx); }
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier)
            (var_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (int_value)))))))
      (block_statement
        (callback_event
          (function_identifier)
          (call_signature
            (var_identifier))
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (int_value)))))
            (block_statement
              (var_identifier
                (reference_identifier)
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature
                      (value
                        (basic_value
                          (int_value)))
                      (var_identifier))))))))))))

================================================================================
callback_name_conflicts
================================================================================

TestCase := Rectangle {
    width: 100phx;
    height: 100phx;
    property <int> value;
    callback clicked; // this callback shouldn't conflict with the other callback

    TouchArea {
        clicked => { value += 1; }
    }
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)))
      (block_statement
        (callback
          (function_identifier)))
      (comment)
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (basic_value
                        (int_value)))))))))))))

================================================================================
init
================================================================================

// Verify that the init callback is invoked in the correct order

export global InitOrder := {
    property <string> observed-order: "start";
}

Sub1 := Rectangle {
    init => {
        InitOrder.observed-order += "|sub1";
    }
}

Sub2 := Rectangle {
    init => {
        InitOrder.observed-order += "|sub2";
    }
}

SubSub := Rectangle {
    init => {
        InitOrder.observed-order += "|subsub";
    }
}

Sub3 := Rectangle {
    property <string> some-value: "should-not-show-up";
    init => {
        InitOrder.observed-order += some-value;
    }
    SubSub {}
}

Container := Rectangle {
    init => {
        InitOrder.observed-order += "|container";
    }
    @children
}

TestCase := Rectangle {
    width: 300phx;
    height: 300phx;
    init => {
        InitOrder.observed-order += "|root";
    }
    Sub1 {
        init => {
            InitOrder.observed-order += "|sub1-use-site";
        }
    }
    Sub2 {
    }
    Sub3 {
        some-value: "|sub3";
    }

    Container {

    }

    Rectangle {
        init => {
            InitOrder.observed-order += "|element";
        }
    }

    for i in 2: Rectangle {
        init => {
            InitOrder.observed-order += "|repeater";
            InitOrder.observed-order += i;
        }
    }

    property <string> test_global_prop_value: InitOrder.observed-order;

    property <string> expected_static_order: "start|sub1|sub2|subsub|sub3|root|sub1-use-site|container|element";

    property <bool> test: InitOrder.observed-order == expected_static_order;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (global_definition
    (export_modifier)
    (type_identifier)
    (property
      (type_identifier)
      (var_identifier)
      (value
        (basic_value
          (string_value
            (_string_fragment))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (value
                (basic_value
                  (string_value
                    (_string_fragment))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (value
                (basic_value
                  (string_value
                    (_string_fragment))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (value
                (basic_value
                  (string_value
                    (_string_fragment))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (basic_value
              (string_value
                (_string_fragment))))))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (value
                (basic_value
                  (string_value
                    (_string_fragment))))))))
      (var_identifier
        (children_identifier))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (value
                (basic_value
                  (string_value
                    (_string_fragment))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (assignment_expr
                    (var_identifier
                      (post_identifier))
                    (assignment_prec_operator)
                    (value
                      (basic_value
                        (string_value
                          (_string_fragment)))))))))))
      (block_statement
        (component
          (type_identifier)
          (block)))
      (block_statement
        (component
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (string_value
                    (_string_fragment))))))))
      (block_statement
        (component
          (type_identifier)
          (block)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (assignment_expr
                    (var_identifier
                      (post_identifier))
                    (assignment_prec_operator)
                    (value
                      (basic_value
                        (string_value
                          (_string_fragment)))))))))))
      (block_statement
        (for_loop
          (var_identifier)
          (for_range)
          (component
            (type_identifier)
            (block
              (block_statement
                (callback_event
                  (function_identifier)
                  (block
                    (block_statement
                      (assignment_expr
                        (var_identifier
                          (post_identifier))
                        (assignment_prec_operator)
                        (value
                          (basic_value
                            (string_value
                              (_string_fragment))))))
                    (assignment_expr
                      (var_identifier
                        (post_identifier))
                      (assignment_prec_operator)
                      (var_identifier)))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (basic_value
              (string_value
                (_string_fragment))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (comparison_binary_expression
            (var_identifier
              (post_identifier))
            (comparison_operator)
            (var_identifier)))))))

================================================================================
init_layout
================================================================================

// Verify that the init callback is invoked in the correct order

export global InitOrder := {
    property <string> observed-order: "start";
}


TestCase := Rectangle {
    width: 300phx;
    height: 300phx;
    init => {
        InitOrder.observed-order += "|root";
    }


    HorizontalLayout {
        for i in ["hello", "world"]: Rectangle {
            preferred-width: 10px;
            init => {
                InitOrder.observed-order +="|" + i;
            }
        }
    }

    property <string> expected_order: "start|root|hello|world";

    property <bool> test: root.preferred-width == 20px && InitOrder.observed-order == expected_order;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (global_definition
    (export_modifier)
    (type_identifier)
    (property
      (type_identifier)
      (var_identifier)
      (value
        (basic_value
          (string_value
            (_string_fragment))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (value
                (basic_value
                  (string_value
                    (_string_fragment))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (for_loop
                (var_identifier)
                (for_range
                  (value_list
                    (value
                      (basic_value
                        (string_value
                          (_string_fragment))))
                    (value
                      (basic_value
                        (string_value
                          (_string_fragment))))))
                (component
                  (type_identifier)
                  (block
                    (block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (basic_value
                            (length_value)))))
                    (block_statement
                      (callback_event
                        (function_identifier)
                        (block
                          (assignment_expr
                            (var_identifier
                              (post_identifier))
                            (assignment_prec_operator)
                            (add_binary_expression
                              (value
                                (basic_value
                                  (string_value
                                    (_string_fragment))))
                              (add_prec_operator)
                              (var_identifier)))))))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (basic_value
              (string_value
                (_string_fragment))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier
                (reference_identifier)
                (post_identifier))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (basic_value
                    (length_value)))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier))))
            (comparison_operator)
            (var_identifier)))))))

================================================================================
callback_alias
================================================================================

Foo := Rectangle {
    pure callback hallo_alias <=> xxx.hallo;
    callback clicked <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallo(a) => { return a + 88; }
    }

    are := TouchArea { }
}

TestCase := Rectangle {

    pure callback foo1_alias <=> foo1.hallo_alias;
    pure callback foo2_alias <=> foo2.hallo_alias;

    callback foo1_clicked <=> foo1.clicked;

    callback call_foo2(int) -> int;
    call_foo2(a) => { return foo2.hallo_alias(a); }

    foo1 := Foo {
        hallo_alias(a) => { return a + 22; }
    }

    foo2 := Foo {
        clicked => { debug(42) }
    }

    property <bool> test: foo1_alias(100) == 122 && foo2_alias(100) == 188;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback_alias
          (function_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (callback_alias
          (function_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (callback
                (function_identifier)
                (call_signature
                  (var_identifier))
                (type_identifier)))
            (block_statement
              (callback_event
                (function_identifier)
                (call_signature
                  (var_identifier))
                (block
                  (block_statement
                    (add_binary_expression
                      (var_identifier)
                      (add_prec_operator)
                      (value
                        (basic_value
                          (int_value)))))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback_alias
          (function_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (callback_alias
          (function_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (callback_alias
          (function_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))
          (type_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (call_signature
            (var_identifier))
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature
                      (var_identifier)))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (callback_event
                (function_identifier)
                (call_signature
                  (var_identifier))
                (block
                  (block_statement
                    (add_binary_expression
                      (var_identifier)
                      (add_prec_operator)
                      (value
                        (basic_value
                          (int_value)))))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (block_statement
                    (function_call
                      (function_identifier)
                      (call_signature
                        (value
                          (basic_value
                            (int_value))))))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (function_call
                (function_identifier)
                (call_signature
                  (value
                    (basic_value
                      (int_value)))))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (basic_value
                    (int_value)))
                (mult_prec_operator)
                (function_call
                  (function_identifier)
                  (call_signature
                    (value
                      (basic_value
                        (int_value)))))))
            (comparison_operator)
            (value
              (basic_value
                (int_value)))))))))

================================================================================
functions
================================================================================

global G := {
    property <string> hello: "hello";
    function meh(w: string) -> string {
        return hello + " " + w;
    }
}

SubCompo := Rectangle {
    public pure function hello() -> color { red }
}

export global PubGlob := {
    public function beh(a: int, b: int) -> int { a + b + 10 }
}

TestCase := Rectangle {

    property <int> c: 100000;
    private property <int> one: 1 + Math.round((x / 1px) - (y / 1px));

    function foo() {}
    function the_function(a: int, b: int) -> int { foo(); a + b + c + one }

    if true : Rectangle {
        background: the_function(1, 2) > 3 ? blue: sc.hello();
    }

    sc := SubCompo {

    }

    public function pub(a: int, b: int) -> int { a + b + c }

    public function set_c(p: int) { c = p }


    property <bool> test: the_function(4500, 20) == 104521 && G.meh("world") == "hello world" && sc.hello() == Colors.red;
}

--------------------------------------------------------------------------------

(source_file
  (global_definition
    (ERROR
      (type_identifier)
      (property
        (type_identifier)
        (var_identifier)
        (value
          (basic_value
            (string_value
              (_string_fragment)))))
      (UNEXPECTED 'e')
      (UNEXPECTED 'w'))
    (type_identifier)
    (ERROR
      (var_identifier)
      (ERROR
        (UNEXPECTED 'h')
        (UNEXPECTED 'w'))))
  (ERROR
    (UNEXPECTED 'S')
    (UNEXPECTED 'R')
    (type_identifier)
    (UNEXPECTED 'u')
    (type_identifier)
    (UNEXPECTED 'd'))
  (global_definition
    (export_modifier)
    (type_identifier)
    (ERROR
      (var_identifier)
      (ERROR
        (UNEXPECTED 'u')
        (UNEXPECTED ':')
        (UNEXPECTED ':'))
      (UNEXPECTED ')
      (UNEXPECTED ')))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (basic_value
              (int_value)))))
      (block_statement
        (property
          (visibility_modifier)
          (type_identifier)
          (var_identifier)
          (add_binary_expression
            (value
              (basic_value
                (int_value)))
            (add_prec_operator)
            (var_identifier
              (post_identifier
                (function_call
                  (function_identifier)
                  (call_signature
                    (add_binary_expression
                      (mult_binary_expression
                        (var_identifier)
                        (mult_prec_operator)
                        (value
                          (basic_value
                            (length_value))))
                      (add_prec_operator)
                      (mult_binary_expression
                        (var_identifier)
                        (mult_prec_operator)
                        (value
                          (basic_value
                            (length_value))))))))))))
      (block_statement
        (function_call
          (function_identifier)
          (ERROR)
          (call_signature)))
      (ERROR
        (value
          (anon_struct))
        (UNEXPECTED 'h')
        (var_identifier)
        (assignment_expr
          (var_identifier)
          (ERROR
            (UNEXPECTED ':'))
          (assignment_prec_operator)
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (add_binary_expression
              (add_binary_expression
                (add_binary_expression
                  (function_call
                    (function_identifier)
                    (call_signature))
                  (ERROR
                    (UNEXPECTED '))
                  (add_prec_operator)
                  (var_identifier))
                (add_prec_operator)
                (var_identifier))
              (add_prec_operator)
              (var_identifier)))))
      (block_statement
        (if_statement
          (value
            (basic_value
              (bool_value)))
          (component
            (type_identifier)
            (block
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (comparison_binary_expression
                  (function_call
                    (function_identifier)
                    (call_signature
                      (value
                        (basic_value
                          (int_value)))
                      (value
                        (basic_value
                          (int_value)))))
                  (comparison_operator)
                  (ternary_expression
                    (value
                      (basic_value
                        (int_value)))
                    (var_identifier)
                    (var_identifier
                      (post_identifier
                        (function_call
                          (function_identifier)
                          (call_signature)))))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (function_call
          (function_identifier)
          (ERROR
            (UNEXPECTED '('))
          (call_signature
            (var_identifier)
            (ERROR)
            (var_identifier)
            (ERROR))))
      (ERROR)
      (block_statement
        (component
          (type_identifier)
          (block
            (add_binary_expression
              (add_binary_expression
                (var_identifier)
                (add_prec_operator)
                (var_identifier))
              (add_prec_operator)
              (var_identifier)))))
      (block_statement
        (function_call
          (function_identifier)
          (ERROR
            (UNEXPECTED 't'))
          (call_signature
            (var_identifier)
            (ERROR))))
      (ERROR
        (value
          (anon_struct
            (ERROR
              (UNEXPECTED ')))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (comparison_binary_expression
                (function_call
                  (function_identifier)
                  (call_signature
                    (value
                      (basic_value
                        (int_value)))
                    (value
                      (basic_value
                        (int_value)))))
                (comparison_operator)
                (mult_binary_expression
                  (value
                    (basic_value
                      (int_value)))
                  (mult_prec_operator)
                  (var_identifier
                    (post_identifier
                      (function_call
                        (function_identifier)
                        (call_signature
                          (value
                            (basic_value
                              (string_value
                                (_string_fragment))))))))))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (basic_value
                    (string_value
                      (_string_fragment))))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier
                    (function_call
                      (function_identifier)
                      (call_signature))))))
            (comparison_operator)
            (var_identifier
              (post_identifier))))))))

================================================================================
return_value
================================================================================

TestCase := Rectangle {
    pure callback test_func(int) -> int;
    pure callback test_func2(string, int) -> string;
    test_func2(str, val) => { str + "=" + (val + some_value) }

    property <int> test_prop: 4 + test_func(2);
    property <string> test_prop2: test_func2("hello", 42);
    property <int> some_value: 8;

    callback dummy() -> int;
    dummy => { 4.4 }
    callback returns_void;
    returns_void => { test_func2("haha", 8) }

    property <bool> test: test_prop == 4 && test_prop2 == "hello=50";
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))
          (type_identifier)))
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier)
            (var_identifier))
          (type_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (call_signature
            (var_identifier)
            (var_identifier))
          (block
            (add_binary_expression
              (add_binary_expression
                (var_identifier)
                (add_prec_operator)
                (value
                  (basic_value
                    (string_value
                      (_string_fragment)))))
              (add_prec_operator)
              (add_binary_expression
                (var_identifier)
                (add_prec_operator)
                (var_identifier))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (add_binary_expression
            (value
              (basic_value
                (int_value)))
            (add_prec_operator)
            (function_call
              (function_identifier)
              (call_signature
                (value
                  (basic_value
                    (int_value))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (function_call
            (function_identifier)
            (call_signature
              (value
                (basic_value
                  (string_value
                    (_string_fragment))))
              (value
                (basic_value
                  (int_value)))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (basic_value
              (int_value)))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature)
          (type_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (value
              (basic_value
                (float_value))))))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (function_call
                (function_identifier)
                (call_signature
                  (value
                    (basic_value
                      (string_value
                        (_string_fragment))))
                  (value
                    (basic_value
                      (int_value)))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier)
              (comparison_operator)
              (mult_binary_expression
                (value
                  (basic_value
                    (int_value)))
                (mult_prec_operator)
                (var_identifier)))
            (comparison_operator)
            (value
              (basic_value
                (string_value
                  (_string_fragment))))))))))

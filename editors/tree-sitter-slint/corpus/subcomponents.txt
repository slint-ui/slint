================================================================================
nested_repeater
================================================================================

// Verify that we can instantiate sub-components in nested repeaters
// and succeed in generating code that determines the root correctly,
// to access global singletons.

Label := Text {

}

SubCompo := Rectangle {
    for x in 1: Rectangle {
        for y in 1: Label {
            for z in 1: Label {
            }
        }
    }
}

TestCase := Rectangle {
    width: 300phx;
    height: 300phx;
    SubCompo {}
}
--------------------------------------------------------------------------------

(document
  (comment)
  (comment)
  (comment)
  (component_definition
    (type_identifier
      (user_type_identifier))
    (type_identifier
      (user_type_identifier))
    (block))
  (component_definition
    (type_identifier
      (user_type_identifier))
    (type_identifier
      (user_type_identifier))
    (block
      (for_loop
        (var_identifier)
        (for_range)
        (component
          (type_identifier
            (user_type_identifier))
          (block
            (for_loop
              (var_identifier)
              (for_range)
              (component
                (type_identifier
                  (user_type_identifier))
                (block
                  (for_loop
                    (var_identifier)
                    (for_range)
                    (component
                      (type_identifier
                        (user_type_identifier))
                      (block)))))))))))
  (component_definition
    (type_identifier
      (user_type_identifier))
    (type_identifier
      (user_type_identifier))
    (block
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (component
        (type_identifier
          (user_type_identifier))
        (block)))))

================================================================================
repeaters
================================================================================

// Verify that two repeaters (if and for) are placed correctly in the item tree
// and matched in the dyn_visit closure.
// The two repeaters ended up being swapped and sub-component's repeater was
// visisted when the Text's child's repeater should have been, resulting in
// wrong rendering order. This is tested by clicking into the left half and
// verifying that it did not hit the sub-component's repeater.

SubCompo := Rectangle {
    property <bool> clicked: false;
    for x in 1: Text {
        text: "I should appear in the right half";
        ta := TouchArea {
            clicked => {
                root.clicked = true;
            }
        }
    }
}

TestCase := Rectangle {
    width: 300phx;
    height: 300phx;
    property clicked <=> c.clicked;
    Text {
        if (false): TouchArea {
        }
    }
    c := SubCompo {
        x: 200px;
    }
}

--------------------------------------------------------------------------------

(document
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (component_definition
    (type_identifier
      (user_type_identifier))
    (type_identifier
      (user_type_identifier))
    (block
      (property
        (type
          (type_identifier
            (user_type_identifier)))
        (var_identifier)
        (value
          (bool_value)))
      (for_loop
        (var_identifier)
        (for_range)
        (component
          (type_identifier
            (user_type_identifier))
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (string_value)))
            (component
              (var_identifier)
              (type_identifier
                (user_type_identifier))
              (block
                (callback_event
                  (function_identifier)
                  (block
                    (assignment_expr
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))
                      (assignment_prec_operator)
                      (value
                        (bool_value))))))))))))
  (component_definition
    (type_identifier
      (user_type_identifier))
    (type_identifier
      (user_type_identifier))
    (block
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (physical_length_value)))
      (property
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (component
        (type_identifier
          (user_type_identifier))
        (block
          (if_statement
            (value
              (value
                (bool_value)))
            (component
              (type_identifier
                (user_type_identifier))
              (block)))))
      (component
        (var_identifier)
        (type_identifier
          (user_type_identifier))
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (length_value))))))))

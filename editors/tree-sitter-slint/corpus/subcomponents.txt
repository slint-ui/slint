================================================================================
nested_repeater
================================================================================

// Verify that we can instantiate sub-components in nested repeaters
// and succeed in generating code that determines the root correctly,
// to access global singletons.

Label := Text {

}

SubCompo := Rectangle {
    for x in 1: Rectangle {
        for y in 1: Label {
            for z in 1: Label {
            }
        }
    }
}

TestCase := Rectangle {
    width: 300phx;
    height: 300phx;
    SubCompo {}
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (for_loop
          (var_identifier)
          (for_range)
          (component
            (type_identifier)
            (block
              (block_statement
                (for_loop
                  (var_identifier)
                  (for_range)
                  (component
                    (type_identifier)
                    (block
                      (block_statement
                        (for_loop
                          (var_identifier)
                          (for_range)
                          (component
                            (type_identifier)
                            (block))))))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (component
          (type_identifier)
          (block))))))

================================================================================
repeaters
================================================================================

// Verify that two repeaters (if and for) are placed correctly in the item tree
// and matched in the dyn_visit closure.
// The two repeaters ended up being swapped and sub-component's repeater was
// visisted when the Text's child's repeater should have been, resulting in
// wrong rendering order. This is tested by clicking into the left half and
// verifying that it did not hit the sub-component's repeater.

SubCompo := Rectangle {
    property <bool> clicked: false;
    for x in 1: Text {
        text: "I should appear in the right half";
        ta := TouchArea {
            clicked => {
                root.clicked = true;
            }
        }
    }
}

TestCase := Rectangle {
    width: 300phx;
    height: 300phx;
    property clicked <=> c.clicked;
    Text {
        if (false): TouchArea {
        }
    }
    c := SubCompo {
        x: 200px;
    }
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (basic_value
              (bool_value)))))
      (block_statement
        (for_loop
          (var_identifier)
          (for_range)
          (component
            (type_identifier)
            (block
              (block_statement
                (assignment_expr
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (basic_value
                      (string_value
                        (_string_fragment))))))
              (block_statement
                (component
                  (var_identifier)
                  (type_identifier)
                  (block
                    (block_statement
                      (callback_event
                        (function_identifier)
                        (block
                          (assignment_expr
                            (var_identifier
                              (reference_identifier)
                              (post_identifier))
                            (assignment_prec_operator)
                            (value
                              (basic_value
                                (bool_value))))))))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (property_alias
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (if_statement
                (value
                  (value
                    (basic_value
                      (bool_value))))
                (component
                  (type_identifier)
                  (block)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (length_value))))))))))

================================================================================
cast
================================================================================

TestCase := Rectangle {
    property<bool> condition;
    property<color> extra_color;
    background: condition ? root.extra_color : red;
    property<string> s1 : condition ? "abc" : 123;
    property<string> s2 : condition ? 123 : "abc";

    property <bool> test: s1 == "123" && s2 == "abc";
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (ternary_expression
            (var_identifier)
            (var_identifier
              (reference_identifier)
              (post_identifier))
            (var_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (ternary_expression
            (var_identifier)
            (value
              (string_value))
            (value
              (int_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (ternary_expression
            (var_identifier)
            (value
              (int_value))
            (value
              (string_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier)
              (comparison_operator)
              (mult_binary_expression
                (value
                  (string_value))
                (mult_prec_operator)
                (var_identifier)))
            (comparison_operator)
            (value
              (string_value))))))))

================================================================================
expr
================================================================================

TestCase := Rectangle {
    property<bool> condition;
    property<int> test_value: condition ? 1 : 2;
    property<bool> condition2;
    property<int> test_value2: condition ? condition2 ? 1 : 2 : condition2 ? 3 : 4;

    property<length> test_value3: false ? 0 : 12phx;
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (ternary_expression
            (var_identifier)
            (value
              (int_value))
            (value
              (int_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (ternary_expression
            (ternary_expression
              (var_identifier)
              (ternary_expression
                (var_identifier)
                (value
                  (int_value))
                (value
                  (int_value)))
              (var_identifier))
            (value
              (int_value))
            (value
              (int_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (ternary_expression
            (value
              (bool_value))
            (value
              (int_value))
            (value
              (physical_length_value))))))))

================================================================================
stm
================================================================================

TestCase := Rectangle {
    property<int> value;
    property<int> result : 3;
    callback action;
    action => {
        if (value == 5) {
            result += 1;
            result += 1;
        }

        if (value != 8) {

        } else {
            result += 33;
        }
    }

    callback xxx;
    xxx => {
        if (false) {
            action();
        }

        if (true) {
            result -=1;
        } else {
            action();
        }
    }

    callback elseif(int) -> int;
    elseif(v) => {
        if (v == 1) {
            41
        } else if (v == 2) {
            42
        } else {
            43
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (if_statement
                (comparison_binary_expression
                  (var_identifier)
                  (comparison_operator)
                  (value
                    (int_value)))
                (component
                  (type_identifier
                    (MISSING _identifier))
                  (block
                    (block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (int_value))))
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value)))))))
            (block_statement
              (if_statement
                (comparison_binary_expression
                  (var_identifier)
                  (comparison_operator)
                  (value
                    (int_value)))
                (component
                  (type_identifier
                    (MISSING _identifier))
                  (block))
                (component
                  (type_identifier
                    (MISSING _identifier))
                  (block
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value))))))))))
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (if_statement
                (value
                  (value
                    (bool_value)))
                (component
                  (type_identifier
                    (MISSING _identifier))
                  (block
                    (function_call
                      (function_identifier)
                      (call_signature))))))
            (block_statement
              (if_statement
                (value
                  (value
                    (bool_value)))
                (component
                  (type_identifier
                    (MISSING _identifier))
                  (block
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (int_value)))))
                (component
                  (type_identifier
                    (MISSING _identifier))
                  (block
                    (function_call
                      (function_identifier)
                      (call_signature)))))))))
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))
          (type_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (call_signature
            (var_identifier))
          (block
            (block_statement
              (if_statement
                (comparison_binary_expression
                  (var_identifier)
                  (comparison_operator)
                  (value
                    (int_value)))
                (component
                  (type_identifier
                    (MISSING _identifier))
                  (block
                    (value
                      (int_value))))
                (if_statement
                  (comparison_binary_expression
                    (var_identifier)
                    (comparison_operator)
                    (value
                      (int_value)))
                  (component
                    (type_identifier
                      (MISSING _identifier))
                    (block
                      (value
                        (int_value))))
                  (component
                    (type_identifier
                      (MISSING _identifier))
                    (block
                      (value
                        (int_value)))))))))))))

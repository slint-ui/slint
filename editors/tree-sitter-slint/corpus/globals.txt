================================================================================
global_alias
================================================================================

//include_path: ../../helper_components

global MyGlobal := {
    property <int> hello: 42;
}

export { MyGlobal }
export { MyGlobal as GlobalAlias }

TestCase := Rectangle {
    property <bool> test_global_prop_value: MyGlobal.hello == 100;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (global_definition
    (type_identifier)
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value)))))
  (export_statement
    (type_identifier))
  (export_statement
    (type_identifier)
    (type_identifier))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier
              (post_identifier))
            (comparison_operator)
            (value
              (basic_value
                (int_value)))))))))

================================================================================
global_binding
================================================================================

global Glob := {
    property <int> a_alias <=> a;
    property <int> a: 3;
    property <int> b: a + 3;

}

TestCase := Rectangle {
    callback set_a(int);
    set_a(a) => { Glob.a_alias = a; }
    property <int> value1: Glob.b;
    property <bool> test: value1 == 3+3;
}

--------------------------------------------------------------------------------

(source_file
  (global_definition
    (type_identifier)
    (property_alias
      (type
        (type_identifier))
      (var_identifier)
      (var_identifier))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value))))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (add_binary_expression
        (var_identifier)
        (add_prec_operator)
        (value
          (basic_value
            (int_value))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))))
      (block_statement
        (callback_event
          (function_identifier)
          (call_signature
            (var_identifier))
          (block
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier)
            (comparison_operator)
            (add_binary_expression
              (value
                (basic_value
                  (int_value)))
              (add_prec_operator)
              (value
                (basic_value
                  (int_value))))))))))

================================================================================
global_binding_const
================================================================================

// This tests that constant property from global are properly initialized

global Glob := {
    property <int> a: 3;
    property <int> b: a + 3;
}

global Glob2 := {
    property <int> a: other;
    property <int> other: 5;
}

TestCase := Rectangle {
    r := Rectangle {
        property <int> value1: Glob.b;
        property <int> value2: true ? Glob2.a : 88;
    }
    property <bool> test: r.value1 + r.value2 == 3+3 +5;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (global_definition
    (type_identifier)
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value))))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (add_binary_expression
        (var_identifier)
        (add_prec_operator)
        (value
          (basic_value
            (int_value))))))
  (global_definition
    (type_identifier)
    (property
      (type
        (type_identifier))
      (var_identifier)
      (var_identifier))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (property
                (type
                  (type_identifier))
                (var_identifier)
                (var_identifier
                  (post_identifier))))
            (block_statement
              (property
                (type
                  (type_identifier))
                (var_identifier)
                (ternary_expression
                  (value
                    (basic_value
                      (bool_value)))
                  (var_identifier
                    (post_identifier))
                  (value
                    (basic_value
                      (int_value)))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (add_binary_expression
              (var_identifier
                (post_identifier))
              (add_prec_operator)
              (var_identifier
                (post_identifier)))
            (comparison_operator)
            (add_binary_expression
              (add_binary_expression
                (value
                  (basic_value
                    (int_value)))
                (add_prec_operator)
                (value
                  (basic_value
                    (int_value))))
              (add_prec_operator)
              (value
                (basic_value
                  (int_value))))))))))

================================================================================
global_depends_on_global
================================================================================

global Numbers := {
    property <int> three: 3;
    property <int> ten: three * Numbers.three + 1;
}

export global A := {
    property <int> a_alias <=> a;
    property <int> a: 3;
    property <int> b: a + three;
    property <int> three: Numbers.three;
}

export global B := {
   // property <int> a_alias <=> A.a_alias;
    property <int> c: {
        debug(A.b, Numbers.ten);
        A.b + Numbers.ten;
    }
}

TestCase := Rectangle {
    callback set_a(int);
    set_a(a) => {
        A.a_alias = a;
    }
    property <int> value1: B.c;
    property <bool> test: value1 == 3 + 13;
}

--------------------------------------------------------------------------------

(source_file
  (global_definition
    (type_identifier)
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value))))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (add_binary_expression
        (mult_binary_expression
          (var_identifier)
          (mult_prec_operator)
          (var_identifier
            (post_identifier)))
        (add_prec_operator)
        (value
          (basic_value
            (int_value))))))
  (global_definition
    (export_modifier)
    (type_identifier)
    (property_alias
      (type
        (type_identifier))
      (var_identifier)
      (var_identifier))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value))))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (add_binary_expression
        (var_identifier)
        (add_prec_operator)
        (var_identifier)))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (var_identifier
        (post_identifier))))
  (global_definition
    (export_modifier)
    (type_identifier)
    (comment)
    (property
      (type
        (type_identifier))
      (var_identifier)
      (block
        (block_statement
          (function_call
            (function_identifier)
            (call_signature
              (var_identifier
                (post_identifier))
              (var_identifier
                (post_identifier)))))
        (add_binary_expression
          (var_identifier
            (post_identifier))
          (add_prec_operator)
          (var_identifier
            (post_identifier))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)
          (call_signature
            (var_identifier))))
      (block_statement
        (callback_event
          (function_identifier)
          (call_signature
            (var_identifier))
          (block
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier)
            (comparison_operator)
            (add_binary_expression
              (value
                (basic_value
                  (int_value)))
              (add_prec_operator)
              (value
                (basic_value
                  (int_value))))))))))

================================================================================
alias_to_global
================================================================================

import { StyleMetrics } from "std-widgets.slint";

global Glop := {
    property <int> hello: 42;
    property <int> second: 88;
    property <int> third: 102;
}

global DualBindingGlop := {
    property third <=> Glop.third;
}

Widget := Rectangle {
    property second <=> Glop.second;
}

TestCase := Rectangle {
    // This is meant to test an alias to a native global.
    // Unfortunately, this is only a native global with the Qt backend and not with the Test backend
    property <length> alias_to_native <=> StyleMetrics.text_cursor_width;
    property <int> alias_to_global <=> Glop.hello;
    property <bool> test: alias_to_native == StyleMetrics.text_cursor_width && alias_to_global == 42 && indirect == 88;
    property <int> indirect <=> widget.second;
    property <int> direct: Glop.second;
    property <int> dual <=> DualBindingGlop.third;

    widget := Widget { }
}

--------------------------------------------------------------------------------

(source_file
  (import_statement
    (type_identifier)
    (string_value))
  (global_definition
    (type_identifier)
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value))))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value))))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value)))))
  (global_definition
    (type_identifier)
    (property_alias
      (var_identifier)
      (var_identifier
        (post_identifier))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property_alias
          (var_identifier)
          (var_identifier
            (post_identifier))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (comment)
      (comment)
      (block_statement
        (property_alias
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property_alias
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (comparison_binary_expression
                (var_identifier)
                (comparison_operator)
                (mult_binary_expression
                  (var_identifier
                    (post_identifier))
                  (mult_prec_operator)
                  (var_identifier)))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (basic_value
                    (int_value)))
                (mult_prec_operator)
                (var_identifier)))
            (comparison_operator)
            (value
              (basic_value
                (int_value))))))
      (block_statement
        (property_alias
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property_alias
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block))))))

================================================================================
global_accessor_api
================================================================================

//include_path: ../../helper_components

import { StyleMetrics } from "std-widgets.slint";
import { ExportedGlobal as ReexportedGlobal } from "export_globals.slint";

struct MyStruct := { x:int, y: int, }

global InternalGlobal := {
    property <int> hello: 42;
    property <MyStruct> my_struct;
    pure callback sum(int, int)->int;
}

export { InternalGlobal as PublicGlobal }
export { ReexportedGlobal }

TestCase := Rectangle {
    property <bool> test_global_prop_value: InternalGlobal.hello == 100;
    property <int> test_call_callback: InternalGlobal.sum(6, 4);
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (import_statement
    (type_identifier)
    (string_value))
  (import_statement
    (type_identifier)
    (type_identifier)
    (string_value))
  (struct_definition
    (type_identifier)
    (type_anon_struct
      (var_identifier)
      (type
        (type_identifier))
      (var_identifier)
      (type
        (type_identifier))))
  (global_definition
    (type_identifier)
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value))))
    (property
      (type
        (type_identifier))
      (var_identifier))
    (callback
      (function_identifier)
      (call_signature
        (var_identifier)
        (var_identifier))
      (type_identifier)))
  (export_statement
    (type_identifier)
    (type_identifier))
  (export_statement
    (type_identifier))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier
              (post_identifier))
            (comparison_operator)
            (value
              (basic_value
                (int_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier
              (function_call
                (function_identifier)
                (call_signature
                  (value
                    (basic_value
                      (int_value)))
                  (value
                    (basic_value
                      (int_value))))))))))))

================================================================================
global_callback
================================================================================

global Glo := {
    property <int> hello: 42;
    pure callback sum(int, int) -> int;
    pure callback mul(int, int) -> int;
    pure callback calculate_profit() -> int;
    calculate_profit() => { return 1000; }
}

ExtraComp := Rectangle {
    property<int> five: Glo.sum(3, 2);
    property<int> six: Glo.mul(3, 2);
}


TestCase := Window {
    pure callback sum <=> Glo.sum;
    pure callback mul <=> Glo.mul;

    x := ExtraComp {}
    property<int> five: x.five;
    property<int> six: x.six;

    property<int> profit: Glo.calculate-profit();

    //mul(α, β) => { return α * β; }
    property<bool> test: five == 0 && profit == 1000; // because the callback is not set

}

--------------------------------------------------------------------------------

(source_file
  (global_definition
    (type_identifier)
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (int_value))))
    (callback
      (function_identifier)
      (call_signature
        (var_identifier)
        (var_identifier))
      (type_identifier))
    (callback
      (function_identifier)
      (call_signature
        (var_identifier)
        (var_identifier))
      (type_identifier))
    (callback
      (function_identifier)
      (call_signature)
      (type_identifier))
    (ERROR
      (var_identifier)
      (ERROR)))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier
              (function_call
                (function_identifier)
                (call_signature
                  (value
                    (basic_value
                      (int_value)))
                  (value
                    (basic_value
                      (int_value)))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier
              (function_call
                (function_identifier)
                (call_signature
                  (value
                    (basic_value
                      (int_value)))
                  (value
                    (basic_value
                      (int_value)))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback_alias
          (function_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (callback_alias
          (function_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier
              (function_call
                (function_identifier)
                (call_signature))))))
      (comment)
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier)
              (comparison_operator)
              (mult_binary_expression
                (value
                  (basic_value
                    (int_value)))
                (mult_prec_operator)
                (var_identifier)))
            (comparison_operator)
            (value
              (basic_value
                (int_value))))))
      (comment))))

================================================================================
issue_2064_two_way_default_value
================================================================================

export global MyGlobal {
    in-out property <bool> foo: false;
    in-out property <bool> foo2;
}

export component TestCase inherits Window {
    width: 600px;
    height: 400px;

    in-out property <bool> test: MyGlobal.foo == false && MyGlobal.foo2 == false;

    r := Rectangle {
         // This two-way binding causes MyGlobal.foo to be true
        visible <=> MyGlobal.foo;
    }

    r2 := Rectangle {
        // This two-way binding causes MyGlobal.foo to be true
       visible <=> MyGlobal.foo2;
    }

}

--------------------------------------------------------------------------------

(source_file
  (global_definition
    (export_modifier)
    (type_identifier)
    (property
      (visibility_modifier)
      (type
        (type_identifier))
      (var_identifier)
      (value
        (basic_value
          (bool_value))))
    (property
      (visibility_modifier)
      (type
        (type_identifier))
      (var_identifier)))
  (component_definition
    (export_modifier)
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (property
          (visibility_modifier)
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier
                (post_identifier))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (basic_value
                    (bool_value)))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier))))
            (comparison_operator)
            (value
              (basic_value
                (bool_value))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (comment)
            (block_statement
              (property_alias
                (var_identifier)
                (var_identifier
                  (post_identifier)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (comment)
            (block_statement
              (property_alias
                (var_identifier)
                (var_identifier
                  (post_identifier))))))))))

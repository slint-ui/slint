================================================================================
global_lookup
================================================================================

global MyGlobal := {
    property<int> bar: 5;
    property<int> foo: 3;
    callback glob_callback;
}

Foo := Rectangle {
    property<int> foo_prop: MyGlobal.foo;
    for ha in 3: Rectangle {
        x: (ha + MyGlobal.bar) * 1px;
    }
}

TestCase := Rectangle {

    callback invoke_glob;
    invoke_glob => {
        MyGlobal.glob_callback();
    }
    Foo {}
    foo := Foo {}
    Foo {}
    property<int> p1: 10 * MyGlobal.bar + 1;
    property<int> p2: foo.foo_prop;

}
--------------------------------------------------------------------------------

(source_file
  (global_definition
    (type_identifier)
    (ERROR
      (property
        (type_identifier)
        (var_identifier)
        (value
          (int_value)))
      (property
        (type_identifier)
        (var_identifier)
        (value
          (int_value))))
    (callback
      (function_identifier)))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (for_loop
          (var_identifier)
          (for_range)
          (component
            (type_identifier)
            (block
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (mult_binary_expression
                  (add_binary_expression
                    (type_identifier)
                    (add_prec_operator)
                    (var_identifier
                      (post_identifier)))
                  (mult_prec_operator)
                  (value
                    (length_value))))))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (callback
          (function_identifier)))
      (block_statement
        (callback_event
          (function_identifier)
          (block
            (block_statement
              (var_identifier
                (post_identifier
                  (function_call
                    (function_identifier)
                    (call_signature))))))))
      (block_statement
        (component
          (type_identifier)
          (block)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block)))
      (block_statement
        (component
          (type_identifier)
          (block)))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (add_binary_expression
            (mult_binary_expression
              (value
                (int_value))
              (mult_prec_operator)
              (var_identifier
                (post_identifier)))
            (add_prec_operator)
            (value
              (int_value)))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
id_lookup
================================================================================

 TestCase := Rectangle {

    property<int> bar: 5;
    property<int> foo: 3;
    foo := Rectangle {
        property<int> bar: 7;
        property<int> foo: 9;
        property<int> inner: bar * 10 + self.bar * 100 + parent.bar * 1000;
    }

    property<int> p1: foo.inner;
    property<int> p2: self.foo *10 + foo.foo * 100 + bar *1000;
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (value
            (int_value))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (property
                (type_identifier)
                (var_identifier)
                (value
                  (int_value))))
            (block_statement
              (property
                (type_identifier)
                (var_identifier)
                (value
                  (int_value))))
            (block_statement
              (property
                (type_identifier)
                (var_identifier)
                (add_binary_expression
                  (add_binary_expression
                    (mult_binary_expression
                      (type_identifier)
                      (mult_prec_operator)
                      (value
                        (int_value)))
                    (add_prec_operator)
                    (mult_binary_expression
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))
                      (mult_prec_operator)
                      (value
                        (int_value))))
                  (add_prec_operator)
                  (mult_binary_expression
                    (var_identifier
                      (reference_identifier)
                      (post_identifier))
                    (mult_prec_operator)
                    (value
                      (int_value)))))))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type_identifier)
          (var_identifier)
          (add_binary_expression
            (add_binary_expression
              (mult_binary_expression
                (var_identifier
                  (reference_identifier)
                  (post_identifier))
                (mult_prec_operator)
                (value
                  (int_value)))
              (add_prec_operator)
              (mult_binary_expression
                (var_identifier
                  (post_identifier))
                (mult_prec_operator)
                (value
                  (int_value))))
            (add_prec_operator)
            (mult_binary_expression
              (type_identifier)
              (mult_prec_operator)
              (value
                (int_value)))))))))

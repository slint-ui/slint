================================================================================
global_lookup
================================================================================

global MyGlobal := {
    property<int> bar: 5;
    property<int> foo: 3;
    callback glob_callback;
}

Foo := Rectangle {
    property<int> foo_prop: MyGlobal.foo;
    for ha in 3: Rectangle {
        x: (ha + MyGlobal.bar) * 1px;
    }
}

TestCase := Rectangle {

    callback invoke_glob;
    invoke_glob => {
        MyGlobal.glob_callback();
    }
    Foo {}
    foo := Foo {}
    Foo {}
    property<int> p1: 10 * MyGlobal.bar + 1;
    property<int> p2: foo.foo_prop;

}
--------------------------------------------------------------------------------

(source_file
  (global_definition
    (var_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (callback_definition
          (function_identifier)))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (ERROR
          (var_identifier)
          (int_number)
          (UNEXPECTED 'R'))
        (component_definition
          (builtin_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (mult_binary_expression
                  (expression_body_paren
                    (add_binary_expression
                      (var_identifier)
                      (add_prec_operator)
                      (var_identifier
                        (post_identifier))))
                  (mult_prec_operator)
                  (value
                    (value_with_units
                      (number
                        (int_number))
                      (unit_type)))))))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (callback_definition
          (function_identifier))
        (callback_event
          (function_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier
                  (post_identifier
                    (function_call
                      (function_identifier)
                      (call_signature
                        (formal_parameters)))))))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (add_binary_expression
              (mult_binary_expression
                (value
                  (number
                    (int_number)))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier)))
              (add_prec_operator)
              (value
                (number
                  (int_number))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (var_identifier
              (post_identifier))))))))

================================================================================
id_lookup
================================================================================

 TestCase := Rectangle {

    property<int> bar: 5;
    property<int> foo: 3;
    foo := Rectangle {
        property<int> bar: 7;
        property<int> foo: 9;
        property<int> inner: bar * 10 + self.bar * 100 + parent.bar * 1000;
    }

    property<int> p1: foo.inner;
    property<int> p2: self.foo *10 + foo.foo * 100 + bar *1000;
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (property_definition
                (builtin_type_identifier)
                (var_identifier)
                (property_expr
                  (value
                    (number
                      (int_number)))))
              (property_definition
                (builtin_type_identifier)
                (var_identifier)
                (property_expr
                  (value
                    (number
                      (int_number)))))
              (property_definition
                (builtin_type_identifier)
                (var_identifier)
                (property_expr
                  (add_binary_expression
                    (add_binary_expression
                      (mult_binary_expression
                        (var_identifier)
                        (mult_prec_operator)
                        (value
                          (number
                            (int_number))))
                      (add_prec_operator)
                      (mult_binary_expression
                        (var_identifier
                          (post_identifier))
                        (mult_prec_operator)
                        (value
                          (number
                            (int_number)))))
                    (add_prec_operator)
                    (mult_binary_expression
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))
                      (mult_prec_operator)
                      (value
                        (number
                          (int_number))))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number))
          (property_expr
            (add_binary_expression
              (add_binary_expression
                (mult_binary_expression
                  (var_identifier
                    (post_identifier))
                  (mult_prec_operator)
                  (value
                    (number
                      (int_number))))
                (add_prec_operator)
                (mult_binary_expression
                  (var_identifier
                    (post_identifier))
                  (mult_prec_operator)
                  (value
                    (number
                      (int_number)))))
              (add_prec_operator)
              (mult_binary_expression
                (var_identifier)
                (mult_prec_operator)
                (value
                  (number
                    (int_number)))))))))))

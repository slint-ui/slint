================================================================================
dashes
================================================================================

 Test-Case := Rectangle {

    property<length> property-x1: xxx-foo.border-width;
    property<length> property-x2: xxx_foo.border_width;

    xxx-foo := Rectangle {
        border-width: 42phx;
    }

    property<int> hello-42: 42;
    property<int> hello--world: -hello-42 - 2; // -42 - 2 = -44
    property<int> this--has-6-slashes--: 42-hello--world; // 42 - -44  = 86

}
--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (physical_length_value)))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (add_binary_expression
          (unary_expression
            (unary_prec_operator)
            (var_identifier))
          (add_prec_operator)
          (value
            (int_value))))
      (comment)
      (property
        (type
          (type_identifier))
        (var_identifier)
        (add_binary_expression
          (value
            (int_value))
          (add_prec_operator)
          (var_identifier)))
      (comment))))

================================================================================
animation_from_click
================================================================================

TestCase := Rectangle {
    width: 120px;
    height: 120px;

    property <int> hello: a.hello;
    property <int> binding_dep: a.binding_dep;
    property <int> unset_property;
    animate unset_property {
        duration: 1200ms;
    }

    a := TouchArea {
        property<int> hello: 40;
        animate hello {
            duration: 1200ms;
        }
        property<bool> condition: true;
        property<int> binding_dep: condition ? 100 : 150;
        animate binding_dep {
            duration: 1200ms;
        }
        clicked => {
            debug("CLICKED") ;
            self.hello = 60;
            self.condition = false;
            unset_property = 100;
            debug("DONE");
        }
    }
}

--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (length_value)))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (length_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier))
      (animate_statement
        (var_identifier)
        (animate_body
          (value
            (duration_value))))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (property
            (type
              (type_identifier))
            (var_identifier)
            (value
              (int_value)))
          (animate_statement
            (var_identifier)
            (animate_body
              (value
                (duration_value))))
          (property
            (type
              (type_identifier))
            (var_identifier)
            (value
              (bool_value)))
          (property
            (type
              (type_identifier))
            (var_identifier)
            (ternary_expression
              (var_identifier)
              (value
                (int_value))
              (value
                (int_value))))
          (animate_statement
            (var_identifier)
            (animate_body
              (value
                (duration_value))))
          (callback_event
            (function_identifier)
            (block
              (function_call
                (function_identifier)
                (call_signature
                  (value
                    (string_value))))
              (assignment_expr
                (var_identifier
                  (reference_identifier)
                  (post_identifier))
                (assignment_prec_operator)
                (value
                  (int_value)))
              (assignment_expr
                (var_identifier
                  (reference_identifier)
                  (post_identifier))
                (assignment_prec_operator)
                (value
                  (bool_value)))
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (int_value)))
              (function_call
                (function_identifier)
                (call_signature
                  (value
                    (string_value)))))))))))

================================================================================
animation_merging
================================================================================

AnimatedObject := Rectangle {
    property <int> animated_prop;
    animate animated_prop { duration: aa_duration; }
    property <duration> aa_duration: 1s;
}

NotAnimatedObject := Rectangle {
    property <int> value;
    property <int> animated_prop: value;
}

TestCase := Rectangle {
    property <int> value : 1000;
    property <int> o1_val: o1.animated_prop;
    property <int> o2_val: o2.animated_prop;
    property <int> o3_val: o3.animated_prop;
    property <int> o4_val: o4.animated_prop;
    o1 := AnimatedObject {
        animated_prop: value;
    }
    o2 := AnimatedObject {
        aa_duration: 2s;
        animated_prop: value;
    }
    o3 := AnimatedObject {
        animate animated_prop { duration: 3s; }
        animated_prop: value;
    }
    o4 := NotAnimatedObject {
        value: root.value;
        animate animated_prop { duration: 4s; }
    }
}


--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier))
      (animate_statement
        (var_identifier)
        (animate_body
          (var_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (duration_value)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (duration_value)))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (animate_statement
            (var_identifier)
            (animate_body
              (value
                (duration_value))))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier
              (reference_identifier)
              (post_identifier)))
          (animate_statement
            (var_identifier)
            (animate_body
              (value
                (duration_value)))))))))

================================================================================
delayed_transitions
================================================================================

 TestCase := Rectangle {
    property<int> top_level: 4;
    property<int> active_index: 0;
    property<int> some_prop: 5;
    property<int> other_prop: 5000;
    text1 := Text {
        property<int> foo: 85 + top_level;
    }

    states [
        xxx when active_index == 1 : {
            text1.foo: 3 + 2 * top_level;
            some_prop: 2000;
            other_prop: 0;
        }
    ]

    transitions [
        in xxx: {
            animate some_prop { delay: 5000ms; duration: 100ms; }
            animate other_prop { delay: 100ms; duration: 1000ms; }
        }
        out xxx: {
            animate text1.foo { delay: 200ms; duration: 300ms; }
        }
    ]

    property<int> text1_foo: text1.foo;

}


--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (property
            (type
              (type_identifier))
            (var_identifier)
            (add_binary_expression
              (value
                (int_value))
              (add_prec_operator)
              (var_identifier)))))
      (states_definition
        (var_identifier)
        (comparison_binary_expression
          (var_identifier)
          (comparison_operator)
          (value
            (int_value)))
        (assignment_expr
          (var_identifier
            (post_identifier))
          (assignment_prec_operator)
          (add_binary_expression
            (value
              (int_value))
            (add_prec_operator)
            (mult_binary_expression
              (value
                (int_value))
              (mult_prec_operator)
              (var_identifier))))
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (int_value)))
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (int_value))))
      (transitions_definition
        (in_out_transition
          (var_identifier)
          (animate_statement
            (var_identifier)
            (animate_body
              (value
                (duration_value))
              (value
                (duration_value))))
          (animate_statement
            (var_identifier)
            (animate_body
              (value
                (duration_value))
              (value
                (duration_value)))))
        (in_out_transition
          (var_identifier)
          (animate_statement
            (var_identifier
              (post_identifier))
            (animate_body
              (value
                (duration_value))
              (value
                (duration_value))))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier))))))

================================================================================
issue1237_states_visible
================================================================================

TestCase := Window {
   width: 100px;
   height: 100px;
   property<int> niceness: 33;
   greeting := TouchArea {
       clicked => { root.niceness += 1; }
       t:= Text {
           text: "Hello world";
       }

       states [
            rude when root.niceness <= 0: {visible: false;}
            mannered when root.niceness > 100: {t.text: "Hello, dearest world"; t.font-size: 32px;}
       ]
   }

   property <bool> test: greeting.visible;
}


--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (length_value)))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (length_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (callback_event
            (function_identifier)
            (block
              (assignment_expr
                (var_identifier
                  (reference_identifier)
                  (post_identifier))
                (assignment_prec_operator)
                (value
                  (int_value)))))
          (component
            (var_identifier)
            (type_identifier)
            (block
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (string_value)))))
          (states_definition
            (var_identifier)
            (comparison_binary_expression
              (var_identifier
                (reference_identifier)
                (post_identifier))
              (comparison_operator)
              (value
                (int_value)))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (bool_value)))
            (var_identifier)
            (comparison_binary_expression
              (var_identifier
                (reference_identifier)
                (post_identifier))
              (comparison_operator)
              (value
                (int_value)))
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (value
                (string_value)))
            (assignment_expr
              (var_identifier
                (post_identifier))
              (assignment_prec_operator)
              (value
                (length_value))))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier))))))

================================================================================
property_animation
================================================================================

TestCase := Rectangle {
    property <int> xx : 1000;

    animate x {
        duration: xx * 1ms;
        easing: ease;
    }

    property<int> hello: 40;
    animate hello {
        duration: 1200ms;
    }

    property<bool> condition: true;
    property<int> binding_dep: condition ? 100 : 150;
    animate binding_dep {
        duration: 1200ms;
    }

}

--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (animate_statement
        (var_identifier)
        (animate_body
          (mult_binary_expression
            (var_identifier)
            (mult_prec_operator)
            (value
              (duration_value)))
          (var_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (animate_statement
        (var_identifier)
        (animate_body
          (value
            (duration_value))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (bool_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (ternary_expression
          (var_identifier)
          (value
            (int_value))
          (value
            (int_value))))
      (animate_statement
        (var_identifier)
        (animate_body
          (value
            (duration_value)))))))

================================================================================
states
================================================================================


SubSubComp := Rectangle {
    property <bool> active;
    property <int> value: 10;
    states [
        active when active : {
            value: 150;
        }
    ]
}

SubComp := SubSubComp {
    states [
        foobar when active : {
            r.background: red;
        }
    ]

    r := Rectangle {}
}

TestCase := Rectangle {
    property<int> top_level: 4;
    property<int> active_index: 0;
    property<int> some_prop: 5;
    text1 := Text {
        text: "hello";
        property<int> foo: 85 + top_level;
    }

    states [
        xxx when active_index == 1 : {
            text1.text: "world";
            text1.foo: 3 + 2 * top_level;
            some_prop: 8;
        }
        yyy when active_index == 2 : {
            text1.foo: 9;
        }
    ]

    property<int> text1_foo: text1.foo;

    for xx in [1, 2] : Rectangle {
        states [
            foo when xx == 1 : {
                height: top_level * 1phx;
            }
        ]

    }

    sc := SubComp {
        active: active_index == 1;
    }
    property <int> subcomp: sc.value;

}


--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (states_definition
        (var_identifier)
        (var_identifier)
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (int_value))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (states_definition
        (var_identifier)
        (var_identifier)
        (assignment_expr
          (var_identifier
            (post_identifier))
          (assignment_prec_operator)
          (var_identifier)))
      (component
        (var_identifier)
        (type_identifier)
        (block))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (string_value)))
          (property
            (type
              (type_identifier))
            (var_identifier)
            (add_binary_expression
              (value
                (int_value))
              (add_prec_operator)
              (var_identifier)))))
      (states_definition
        (var_identifier)
        (comparison_binary_expression
          (var_identifier)
          (comparison_operator)
          (value
            (int_value)))
        (assignment_expr
          (var_identifier
            (post_identifier))
          (assignment_prec_operator)
          (value
            (string_value)))
        (assignment_expr
          (var_identifier
            (post_identifier))
          (assignment_prec_operator)
          (add_binary_expression
            (value
              (int_value))
            (add_prec_operator)
            (mult_binary_expression
              (value
                (int_value))
              (mult_prec_operator)
              (var_identifier))))
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (int_value)))
        (var_identifier)
        (comparison_binary_expression
          (var_identifier)
          (comparison_operator)
          (value
            (int_value)))
        (assignment_expr
          (var_identifier
            (post_identifier))
          (assignment_prec_operator)
          (value
            (int_value))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (for_loop
        (var_identifier)
        (for_range
          (value_list
            (value
              (int_value))
            (value
              (int_value))))
        (component
          (type_identifier)
          (block
            (states_definition
              (var_identifier)
              (comparison_binary_expression
                (var_identifier)
                (comparison_operator)
                (value
                  (int_value)))
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (mult_binary_expression
                  (var_identifier)
                  (mult_prec_operator)
                  (value
                    (physical_length_value))))))))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (comparison_binary_expression
              (var_identifier)
              (comparison_operator)
              (value
                (int_value))))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier))))))

================================================================================
states_with_animation
================================================================================

 TestCase := Rectangle {
    property<int> active_index: 0;
    property<int> some_prop: 5;
    text1 := Text {
        property<int> foo; // this one is not initialized
        animate foo { duration: 100ms; }
    }

    states [
        xxx when active_index == 1 : {
            text1.foo: 3000;
            some_prop: 2000;
        }
    ]

    animate some_prop { duration: 100ms; }


    property<int> text1_foo: text1.foo;

}


--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (property
            (type
              (type_identifier))
            (var_identifier))
          (comment)
          (animate_statement
            (var_identifier)
            (animate_body
              (value
                (duration_value))))))
      (states_definition
        (var_identifier)
        (comparison_binary_expression
          (var_identifier)
          (comparison_operator)
          (value
            (int_value)))
        (assignment_expr
          (var_identifier
            (post_identifier))
          (assignment_prec_operator)
          (value
            (int_value)))
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (int_value))))
      (animate_statement
        (var_identifier)
        (animate_body
          (value
            (duration_value))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier))))))

================================================================================
transitions
================================================================================

 TestCase := Rectangle {
    property<int> top_level: 4;
    property<int> active_index: 0;
    property<int> some_prop: 5;
    text1 := Text {
        property<int> foo: 85 + top_level;
    }

    states [
        xxx when active_index == 1 : {
            text1.foo: 3 + 2 * top_level;
            some_prop: 2000;
        }
    ]

    transitions [
        in xxx: {
            animate some_prop { duration: 100ms; }
        }
        out xxx: {
            animate text1.foo { duration: 300ms; }
        }
    ]

    property<int> text1_foo: text1.foo;

}


--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (property
            (type
              (type_identifier))
            (var_identifier)
            (add_binary_expression
              (value
                (int_value))
              (add_prec_operator)
              (var_identifier)))))
      (states_definition
        (var_identifier)
        (comparison_binary_expression
          (var_identifier)
          (comparison_operator)
          (value
            (int_value)))
        (assignment_expr
          (var_identifier
            (post_identifier))
          (assignment_prec_operator)
          (add_binary_expression
            (value
              (int_value))
            (add_prec_operator)
            (mult_binary_expression
              (value
                (int_value))
              (mult_prec_operator)
              (var_identifier))))
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (int_value))))
      (transitions_definition
        (in_out_transition
          (var_identifier)
          (animate_statement
            (var_identifier)
            (animate_body
              (value
                (duration_value)))))
        (in_out_transition
          (var_identifier)
          (animate_statement
            (var_identifier
              (post_identifier))
            (animate_body
              (value
                (duration_value))))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier))))))

================================================================================
transitions2
================================================================================

TestCase := Rectangle {
    property<int> top_level: 4;
    property<int> active_index: 0;
    property<int> some_prop: 5;
    text1 := Text {
        property<int> foo: 85 + top_level;
    }

    states [
        xxx when active_index == 1 : {
            text1.foo: 3 + 2 * top_level;
            some_prop: 2000;
            in {
                animate some_prop { duration: 100ms; }
            }
            out {
                animate text1.foo { duration: 300ms; }
            }
        }
    ]

    property<int> text1_foo: text1.foo;

}




--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (property
            (type
              (type_identifier))
            (var_identifier)
            (add_binary_expression
              (value
                (int_value))
              (add_prec_operator)
              (var_identifier)))))
      (states_definition
        (var_identifier)
        (comparison_binary_expression
          (var_identifier)
          (comparison_operator)
          (value
            (int_value)))
        (assignment_expr
          (var_identifier
            (post_identifier))
          (assignment_prec_operator)
          (add_binary_expression
            (value
              (int_value))
            (add_prec_operator)
            (mult_binary_expression
              (value
                (int_value))
              (mult_prec_operator)
              (var_identifier))))
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (int_value)))
        (in_out_transition
          (animate_statement
            (var_identifier)
            (animate_body
              (value
                (duration_value)))))
        (in_out_transition
          (animate_statement
            (var_identifier
              (post_identifier))
            (animate_body
              (value
                (duration_value))))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier))))))

================================================================================
access_ellided_prop
================================================================================

// issue #177

export TestCase := Window {
    r := Rectangle {
       background: blue;
    }
    property <bool> test: r.border-radius == 0;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (language_constant))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier)))
          (ERROR
            (int_number)))))))

================================================================================
access_moved_propdecl
================================================================================

// Test case that accesses a declared property ("property<bool> pressed") from within a binding for "text".
// The property will be moved to the root as part of the move declarations pass and therefore the named reference
// to "gallery_button.pressed" needs to be fixed up.
App := Rectangle {
    gallery_button := Rectangle {
        property<string> text: gallery_button.pressed ? "Button pressed" : "Button not pressed";
        property<bool> pressed: touch_area.pressed;

        touch_area := TouchArea { }
    }
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (comment)
  (comment)
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (property_definition
                (builtin_type_identifier)
                (var_identifier)
                (property_expr
                  (ternary_expression
                    (var_identifier
                      (post_identifier))
                    (string
                      (string_fragment))
                    (string
                      (string_fragment)))))
              (property_definition
                (builtin_type_identifier)
                (var_identifier)
                (property_expr
                  (var_identifier
                    (post_identifier))))
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body))))))))))

================================================================================
empty_listview
================================================================================

import { ListView } from "std-widgets.slint";

export Test := Window {
    VerticalLayout {
        ListView {}
    }
}
--------------------------------------------------------------------------------

(source_file
  (import_statement
    (user_type_identifier)
    (string
      (string_fragment)))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body))))))))))

================================================================================
issue173_uninitialized_globals
================================================================================

// This is a test for a crash withthe interpreter when evaluating properties

global Settings := {
    property <bool> test;
    property <color> some_color;
    property <string> some_string;
    property <int> count;
    property <{aa: bool, bb: int, cc: string}> object;
}

export Demo := Window {
    width: 300px;
    height: 300px;

    title: Settings.some_string;

    r:= Rectangle {
        background: Settings.test ? Settings.some_color : Settings.some_color;
    }

    for foo in Settings.count: Rectangle {}

    property <bool> obj: !Settings.object.aa && Settings.object.bb == 0 && Settings.object.cc == "";

    property <bool> test: title == "" && r.background == Settings.some_color && Settings.count == 0 && obj;

}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (global_definition
    (var_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (property_definition
          (user_type_identifier)
          (var_identifier))
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (property_definition
          (ERROR
            (UNEXPECTED 'a')
            (builtin_type_identifier)
            (UNEXPECTED 'b')
            (UNEXPECTED ',')
            (UNEXPECTED 'c'))
          (builtin_type_identifier)
          (ERROR)
          (var_identifier)))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier
            (post_identifier)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (ternary_expression
                  (var_identifier
                    (post_identifier))
                  (var_identifier
                    (post_identifier))
                  (var_identifier
                    (post_identifier)))))))
        (for_loop_definition
          (var_identifier)
          (var_identifier
            (post_identifier))
          (component_definition
            (user_type_identifier)
            (field_declaration_list
              (field_declaration_list_body))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (mult_binary_expression
              (mult_binary_expression
                (unary_expression
                  (unary_prec_operator)
                  (var_identifier
                    (post_identifier)
                    (post_identifier)))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier)
                  (post_identifier)))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (var_identifier
                (post_identifier)
                (post_identifier))))
          (ERROR))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ERROR)
            (mult_binary_expression
              (mult_binary_expression
                (mult_binary_expression
                  (string)
                  (mult_prec_operator)
                  (var_identifier
                    (post_identifier)
                    (ERROR
                      (UNEXPECTED 'S')
                      (UNEXPECTED 's'))
                    (post_identifier)))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier)))
              (ERROR
                (int_number))
              (mult_prec_operator)
              (var_identifier))))))))

================================================================================
issue_1009_const_alias
================================================================================

Button := Text { }

PanelButton := HorizontalLayout {
    property<string> button-text <=> button.text;
    button := Button { }
}

TestCase := Window {
    property <bool> test: pb.preferred-height == control.preferred-height;
    pb := PanelButton {  button-text: "button1";  }
    control := Text { text: "button1"; }
}


--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body)))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (ERROR)
          (var_identifier
            (post_identifier)))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier)
              (ERROR
                (UNEXPECTED 'o'))
              (post_identifier))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (string
                  (string_fragment))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (string
                  (string_fragment))))))))))

================================================================================
layout_if_in_component
================================================================================

export Btn := Rectangle {
    min-height: max(32px, l.min-height);
    l := HorizontalLayout {
        if (false): button_in_image := Image {
            width: 24px;
        }
        text := Text {  }
    }
}

export TestCase := Window {
    x := HorizontalLayout {
        btn := Btn {}
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (function_call
            (function_identifier)
            (call_signature
              (formal_parameters
                (formal_parameter
                  (value
                    (value_with_units
                      (number
                        (int_number))
                      (unit_type))))
                (formal_parameter
                  (var_identifier
                    (post_identifier)))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (if_statement_definition
                (expression_body_paren
                  (value
                    (language_constant)))
                (component_definition
                  (user_type_identifier)
                  (user_type_identifier)
                  (field_declaration_list
                    (field_declaration_list_body
                      (variable_set_equal
                        (var_identifier)
                        (assignment_prec_operator)
                        (value
                          (value_with_units
                            (number
                              (int_number))
                            (unit_type))))))))
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body)))))))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body))))))))))

================================================================================
optimized_item_shadow
================================================================================

export D := Rectangle {
    for xy in 1 : Rectangle {
        drop-shadow-color: #333;
        HorizontalLayout {
            VerticalLayout {
                Rectangle { }
            }
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (ERROR
          (var_identifier)
          (int_number)
          (UNEXPECTED 'R'))
        (component_definition
          (builtin_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (color)))
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (component_definition
                      (user_type_identifier)
                      (field_declaration_list
                        (field_declaration_list_body
                          (component_definition
                            (user_type_identifier)
                            (field_declaration_list
                              (field_declaration_list_body))))))))))))))))

================================================================================
shadow_fixed_width
================================================================================

export D := Window {
    VerticalLayout {
        for ab in 1 : Rectangle {
            width: 100%;
            drop-shadow-offset-x: 1px;
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (ERROR
                (var_identifier)
                (int_number)
                (UNEXPECTED 'R'))
              (component_definition
                (builtin_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (value_with_units
                          (number
                            (int_number))
                          (unit_type))))
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (value_with_units
                          (number
                            (int_number))
                          (unit_type))))))))))))))

================================================================================
alias_in_if
================================================================================

App := Rectangle {
    property <string> hello: "ooo";
    if (hello != "") : Text { text <=> hello; }

    property<bool> test1: hello == "ooo";

    // Another crash:
    property <string> directory: "hello";
    vl := VerticalLayout {
        if true: pp:= Rectangle {
            property <string> text <=> root.directory;
            HorizontalLayout {
                inner := Text {
                    text: pp.text;
                }
            }
        }
    }
    ref := Text { text: "hello"; }
    property<bool> test2: vl.preferred-width == ref.preferred-width;

    property<bool> test: test1 && test2;
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (string
              (string_fragment))))
        (if_statement_definition
          (expression_body_paren
            (ERROR)
            (string))
          (component_definition
            (user_type_identifier)
            (field_declaration_list
              (field_declaration_list_body
                (callback_call
                  (var_identifier)
                  (ERROR
                    (UNEXPECTED 'h')))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (property_expr
              (var_identifier)))
          (property_expr
            (string
              (string_fragment))))
        (comment)
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (string
              (string_fragment))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (if_statement_definition
                (value
                  (language_constant))
                (component_definition
                  (user_type_identifier)
                  (user_type_identifier)
                  (field_declaration_list
                    (field_declaration_list_body
                      (property_definition
                        (builtin_type_identifier)
                        (ERROR)
                        (var_identifier
                          (reference_identifier)
                          (post_identifier)))
                      (component_definition
                        (user_type_identifier)
                        (field_declaration_list
                          (field_declaration_list_body
                            (component_definition
                              (user_type_identifier)
                              (user_type_identifier)
                              (field_declaration_list
                                (field_declaration_list_body
                                  (variable_set_equal
                                    (var_identifier)
                                    (assignment_prec_operator)
                                    (var_identifier
                                      (post_identifier))))))))))))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (string
                  (string_fragment))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (int_number)
            (function_identifier))
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (ERROR)
            (mult_binary_expression
              (value
                (number
                  (int_number)))
              (mult_prec_operator)
              (ERROR)
              (value
                (number
                  (int_number))))))))))

================================================================================
issue1113_popup_in_repeater
================================================================================

App := Window {
    for menu-item in [{children: ["hello"]}] : VerticalLayout {
        Rectangle {
            popup := PopupWindow {
                Rectangle {
                    for child in menu-item.children : Rectangle {
                    }
                }
            }
       }
    }

    if true : Rectangle {
        Rectangle {
            TouchArea {
                clicked => {
                    popup2.show();
                }
            }
            popup2 := PopupWindow { }
        }
    }

    // Issue #1132
    for menu-item in [0] : TouchArea {
        clicked => { popup3.show(); }
        if true: TouchArea {
            clicked => { popup3.show(); }
        }
        popup3 := PopupWindow { }
    }

}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (ERROR
      (var_identifier)
      (UNEXPECTED 'h')
      (UNEXPECTED 'V'))
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (component_definition
                      (user_type_identifier)
                      (field_declaration_list
                        (field_declaration_list_body
                          (for_loop_definition
                            (var_identifier)
                            (var_identifier
                              (post_identifier))
                            (component_definition
                              (user_type_identifier)
                              (field_declaration_list
                                (field_declaration_list_body))))))))))))))))
  (ERROR
    (user_type_identifier)
    (UNEXPECTED 'R'))
  (component_definition
    (builtin_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (callback_event
                      (function_identifier)
                      (field_declaration_list
                        (field_declaration_list_body
                          (callback_call
                            (var_identifier
                              (ERROR
                                (int_number))
                              (post_identifier
                                (function_call
                                  (function_identifier)
                                  (call_signature
                                    (formal_parameters))))))))))))
              (component_definition
                (user_type_identifier)
                (ERROR
                  (int_number))
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body)))))))))
  (comment)
  (component_definition
    (user_type_identifier)
    (ERROR
      (UNEXPECTED 'e')
      (UNEXPECTED 't')
      (int_number)
      (UNEXPECTED 'T'))
    (field_declaration_list
      (field_declaration_list_body
        (callback_event
          (function_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier
                  (ERROR
                    (int_number))
                  (post_identifier
                    (function_call
                      (function_identifier)
                      (call_signature
                        (formal_parameters)))))))))
        (if_statement_definition
          (value
            (language_constant))
          (component_definition
            (user_type_identifier)
            (field_declaration_list
              (field_declaration_list_body
                (callback_event
                  (function_identifier)
                  (field_declaration_list
                    (field_declaration_list_body
                      (callback_call
                        (var_identifier
                          (ERROR
                            (int_number))
                          (post_identifier
                            (function_call
                              (function_identifier)
                              (call_signature
                                (formal_parameters)))))))))))))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body))))))
  (ERROR))

================================================================================
issue1267_opacity_in_layout
================================================================================

MainWindow := Window {
    VerticalLayout {
        Rectangle {
            opacity: 0.5;
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (float_number))))))))))))))

================================================================================
issue1271_set_in_if
================================================================================

TestCase := Window {
    property <int> t_: 8;
    property <int> t_old: -1;
    background: {
         if (t_ == 8) { t_old = t_; t_=1; }
         t_ == 1 ?  white : black
    }

    property <bool> test: background == Colors.white && t_ == 1 && t_old == 8;
}




--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (unary_expression
              (unary_prec_operator)
              (value
                (number
                  (int_number))))))
        (var_identifier)
        (ERROR
          (assignment_prec_operator))
        (if_statement_definition
          (expression_body_paren
            (ERROR)
            (value
              (number
                (int_number))))
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier))
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (number
                    (int_number)))))))
        (var_identifier)
        (ERROR
          (assignment_prec_operator)
          (assignment_prec_operator)
          (ternary_expression
            (value
              (number
                (int_number)))
            (var_identifier)
            (value
              (language_constant))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (ERROR
            (property_expr
              (var_identifier))
            (property_expr
              (mult_binary_expression
                (var_identifier
                  (post_identifier))
                (mult_prec_operator)
                (var_identifier)))
            (property_expr
              (mult_binary_expression
                (value
                  (number
                    (int_number)))
                (mult_prec_operator)
                (var_identifier))))
          (property_expr
            (value
              (number
                (int_number)))))))))

================================================================================
issue1327_inlined_state_property
================================================================================

// based on https://github.com/slint-ui/slint/issues/1327#issuecomment-1151244049

export RipplCircle := Rectangle {
    property <length> radius: 0;
    property <length> mx: 0;
    property <length> my: 0;
    property <float> fwidth: 0;
    property <float> fheight: 0;
    property <bool> running: false;
    width: radius * 2;
    height: radius * 2;
    x: mx - width / 2;
    y: my - height / 2;
    background: rgba(0,0,0, 0.5);
    border-radius: width / 2;

    property <float> counter: 0;
    animate counter { duration: 800ms; }

    states [
        ripple when counter > 0 && counter < 0.1 : {
            radius: 100px;
            opacity: 0.;
            running: true;
        }
    ]

    transitions [
        in ripple: {
            animate radius { duration: 800ms; }
            animate opacity { duration: 800ms; }
        }
    ]
}

export InkEffect := Rectangle {

    preferred-width: 200px;
    preferred-height: 200px;
    background: white;
    clip: true;

    circle1 := RipplCircle {}
    // un commenting the next line causes macro proc panick
    circle2 := RipplCircle { background: green; }


    tch := TouchArea {
        width: parent.width;
        height: parent.height;
        pointer-event(ev) => {
            if (ev.kind == PointerEventKind.down && ev.button == PointerEventButton.left) {
                if (!circle1.running) {
                    circle1.mx = mouse-x;
                    circle1.my = mouse-y;
                    circle1.fwidth = parent.width / 1px;
                    circle1.fheight = parent.height / 1px;
                    circle1.counter = circle1.counter == 0 ? 0.1 : 0;
                }
            }
        }

    }
}
--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (language_constant))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (mult_binary_expression
            (var_identifier)
            (mult_prec_operator)
            (value
              (number
                (int_number)))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (mult_binary_expression
            (var_identifier)
            (mult_prec_operator)
            (value
              (number
                (int_number)))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (add_binary_expression
            (var_identifier)
            (add_prec_operator)
            (mult_binary_expression
              (var_identifier)
              (mult_prec_operator)
              (value
                (number
                  (int_number))))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (add_binary_expression
            (var_identifier)
            (add_prec_operator)
            (mult_binary_expression
              (var_identifier)
              (mult_prec_operator)
              (value
                (number
                  (int_number))))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (function_call
            (function_identifier)
            (call_signature
              (formal_parameters
                (formal_parameter
                  (value
                    (number
                      (int_number))))
                (formal_parameter
                  (value
                    (number
                      (int_number))))
                (formal_parameter
                  (value
                    (number
                      (int_number))))
                (formal_parameter
                  (value
                    (number
                      (float_number))))))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (mult_binary_expression
            (var_identifier)
            (mult_prec_operator)
            (value
              (number
                (int_number)))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (value
              (number
                (int_number)))))
        (animate_statement
          (var_identifier)
          (animate_declaration_list
            (builtin_type_identifier)
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))
        (states_definition
          (states_list_definition
            (state_identifier)
            (comparison_binary_expression
              (comparison_binary_expression
                (var_identifier)
                (comparison_operator)
                (mult_binary_expression
                  (value
                    (number
                      (int_number)))
                  (mult_prec_operator)
                  (var_identifier)))
              (comparison_operator)
              (value
                (number
                  (float_number))))
            (field_declaration_list
              (field_declaration_list_body
                (variable_set_equal
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (value_with_units
                      (number
                        (int_number))
                      (unit_type))))
                (variable_set_equal
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (number
                      (int_number)))
                  (ERROR))
                (variable_set_equal
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (language_constant)))))))
        (transitions_definition
          (transitions_list_definition
            (var_identifier)
            (field_declaration_list
              (field_declaration_list_body
                (animate_statement
                  (var_identifier)
                  (animate_declaration_list
                    (builtin_type_identifier)
                    (value
                      (value_with_units
                        (number
                          (int_number))
                        (unit_type)))))
                (animate_statement
                  (var_identifier)
                  (animate_declaration_list
                    (builtin_type_identifier)
                    (value
                      (value_with_units
                        (number
                          (int_number))
                        (unit_type))))))))))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (var_identifier))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (language_constant)))
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))
        (comment)
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (language_constant))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier)))
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier)))
              (var_identifier)
              (ERROR
                (assignment_prec_operator
                  (MISSING ":"))
                (expression_body_paren
                  (var_identifier)))
              (if_statement_definition
                (expression_body_paren
                  (mult_binary_expression
                    (var_identifier
                      (post_identifier))
                    (ERROR
                      (UNEXPECTED 'P')
                      (UNEXPECTED 'e')
                      (UNEXPECTED '.')
                      (UNEXPECTED 'o'))
                    (mult_prec_operator)
                    (var_identifier
                      (post_identifier)
                      (ERROR
                        (UNEXPECTED 'P')
                        (UNEXPECTED 'e'))
                      (post_identifier))))
                (field_declaration_list
                  (field_declaration_list_body
                    (if_statement_definition
                      (expression_body_paren
                        (unary_expression
                          (unary_prec_operator)
                          (var_identifier
                            (ERROR
                              (int_number))
                            (post_identifier))))
                      (field_declaration_list
                        (field_declaration_list_body
                          (variable_set_equal
                            (var_identifier
                              (ERROR
                                (int_number))
                              (post_identifier))
                            (assignment_prec_operator)
                            (var_identifier))
                          (variable_set_equal
                            (var_identifier
                              (ERROR
                                (int_number))
                              (post_identifier))
                            (assignment_prec_operator)
                            (var_identifier))
                          (variable_set_equal
                            (var_identifier
                              (ERROR
                                (int_number))
                              (post_identifier))
                            (assignment_prec_operator)
                            (mult_binary_expression
                              (var_identifier
                                (reference_identifier)
                                (post_identifier))
                              (mult_prec_operator)
                              (value
                                (value_with_units
                                  (number
                                    (int_number))
                                  (unit_type)))))
                          (variable_set_equal
                            (var_identifier
                              (ERROR
                                (int_number))
                              (post_identifier))
                            (assignment_prec_operator)
                            (mult_binary_expression
                              (var_identifier
                                (reference_identifier)
                                (post_identifier))
                              (mult_prec_operator)
                              (value
                                (value_with_units
                                  (number
                                    (int_number))
                                  (unit_type)))))
                          (variable_set_equal
                            (var_identifier
                              (ERROR
                                (int_number))
                              (post_identifier))
                            (assignment_prec_operator)
                            (ternary_expression
                              (var_identifier
                                (ERROR
                                  (int_number))
                                (post_identifier))
                              (ERROR
                                (int_number))
                              (value
                                (number
                                  (float_number)))
                              (value
                                (number
                                  (int_number)))))))))))))))))
  (ERROR))

================================================================================
issue1659_combobox_in_tab
================================================================================

import { TabWidget } from "std-widgets.slint";

export ComboBox := Rectangle {
    min-height: max(32px, l.min-height);
    l := HorizontalLayout { Text {} }
}

export Broken := TabWidget  {
    t1 := Tab {
        vl := VerticalLayout {
            cb := ComboBox { }
        }
    }
}
export AppWindow := Window {
    hl := HorizontalLayout {
        broken := Broken {}
    }
}
--------------------------------------------------------------------------------

(source_file
  (import_statement
    (user_type_identifier)
    (string
      (string_fragment)))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (function_call
            (function_identifier)
            (call_signature
              (formal_parameters
                (formal_parameter
                  (value
                    (value_with_units
                      (number
                        (int_number))
                      (unit_type))))
                (formal_parameter
                  (var_identifier
                    (post_identifier)))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body)))))))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (ERROR
            (int_number))
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (component_definition
                      (user_type_identifier)
                      (user_type_identifier)
                      (field_declaration_list
                        (field_declaration_list_body))))))))))))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body))))))))))

================================================================================
issue_1233_listview_const_shadow
================================================================================

import { ListView } from "std-widgets.slint";

App := Window {
    width: 100px;
    height: 600px;

    ListView {
        for item in [
            {}, {},
        ] : Rectangle {
            drop-shadow-blur: 5px;
            HorizontalLayout {
                Image {
                    source: @image-url("../../../logo/slint-logo-square-light-128x128.png");
                }
            }
        }
    }
}


--------------------------------------------------------------------------------

(source_file
  (import_statement
    (user_type_identifier)
    (string
      (string_fragment)))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (ERROR
                (var_identifier)
                (UNEXPECTED 'R'))
              (component_definition
                (builtin_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (value_with_units
                          (number
                            (int_number))
                          (unit_type))))
                    (component_definition
                      (user_type_identifier)
                      (field_declaration_list
                        (field_declaration_list_body
                          (component_definition
                            (user_type_identifier)
                            (field_declaration_list
                              (field_declaration_list_body
                                (variable_set_equal
                                  (var_identifier)
                                  (assignment_prec_operator)
                                  (function_call
                                    (function_identifier)
                                    (call_signature
                                      (formal_parameters
                                        (formal_parameter
                                          (string
                                            (string_fragment)))))))))))))))))))))))

================================================================================
issue_422_enclosing_component
================================================================================

// issue #422

export TestCase := Window {
    width: 100phx;
    height: 100phx;

    property<bool> combo_has_focus;

    if (true): combo := FocusScope {
        if (true): TouchArea {
            clicked => {
                combo.focus();
                root.combo_has_focus = combo.has-focus;
            }
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (number
              (int_number)))
          (ERROR
            (UNEXPECTED 'x')))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (number
              (int_number)))
          (ERROR
            (UNEXPECTED 'x')))
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (if_statement_definition
          (expression_body_paren
            (value
              (language_constant)))
          (component_definition
            (user_type_identifier)
            (user_type_identifier)
            (field_declaration_list
              (field_declaration_list_body
                (if_statement_definition
                  (expression_body_paren
                    (value
                      (language_constant)))
                  (component_definition
                    (user_type_identifier)
                    (field_declaration_list
                      (field_declaration_list_body
                        (callback_event
                          (function_identifier)
                          (field_declaration_list
                            (field_declaration_list_body
                              (callback_call
                                (var_identifier
                                  (post_identifier
                                    (function_call
                                      (function_identifier)
                                      (call_signature
                                        (formal_parameters))))))
                              (variable_set_equal
                                (var_identifier
                                  (reference_identifier)
                                  (post_identifier))
                                (assignment_prec_operator)
                                (var_identifier
                                  (post_identifier))))))))))))))))))

================================================================================
issue_983_listview_const_width
================================================================================

import { ListView } from "std-widgets.slint";

FileLine := Rectangle {
    property <string> filename;
    HorizontalLayout {
        t_filename := Text {
            text: root.filename;
        }
    }
}

export struct FileItem := {
    filename: string,
}

MainWindow := Window {
    property <[FileItem]> file-model: [ ];
    height: 500px;
    width: 500px;

    vb := VerticalLayout {
        list-view := ListView {
            for file in file-model:  FileLine {
                filename: file.filename;
            }
        }
    }


}


--------------------------------------------------------------------------------

(source_file
  (import_statement
    (user_type_identifier)
    (string
      (string_fragment)))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (reference_identifier)
                        (post_identifier))))))))))))
  (struct_definition
    (visibility_modifier)
    (user_type_identifier)
    (struct_field_declaration_list
      (struct_field_declaration_list_body
        (var_identifier)
        (builtin_type_identifier))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (property_type_list
            (user_type_identifier))
          (var_identifier)
          (property_expr
            (list_definition
              (list_definition_body))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (for_loop_definition
                      (var_identifier)
                      (var_identifier)
                      (component_definition
                        (user_type_identifier)
                        (field_declaration_list
                          (field_declaration_list_body
                            (variable_set_equal
                              (var_identifier)
                              (assignment_prec_operator)
                              (var_identifier
                                (post_identifier)))))))))))))))))

================================================================================
layout_deleted_item
================================================================================

// issue #177

export TestCase := Window {
    width: 100px;
    height: 100px;

    callback clicked;
    clicked => { debug("Hello"); model= []; }
    property <bool> hover: under.has-hover;
    property<[int]> model: [1];
    VerticalLayout {
        under := TouchArea {
            HorizontalLayout {
                for value in model: TouchArea {
                    horizontal-stretch: 5;
                    vertical-stretch: 5;
                    clicked => { root.clicked(); }
                    Rectangle { background: blue; }
                }
            }
        }
        Rectangle {
            horizontal-stretch: 0;
            vertical-stretch: 0;
            background: yellow;
        }
    }


}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (callback_definition
          (function_identifier))
        (callback_event
          (function_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (variable_set_equal
                (var_identifier)
                (assignment_prec_operator
                  (MISSING ":"))
                (expression_body_paren
                  (string
                    (string_fragment))))
              (callback_call
                (var_identifier)
                (ERROR
                  (assignment_prec_operator))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))
        (property_definition
          (property_type_list
            (builtin_type_identifier))
          (var_identifier)
          (property_expr
            (list_definition
              (list_definition_body)
              (ERROR
                (int_number)))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (component_definition
                      (user_type_identifier)
                      (field_declaration_list
                        (field_declaration_list_body
                          (for_loop_definition
                            (var_identifier)
                            (var_identifier)
                            (component_definition
                              (user_type_identifier)
                              (field_declaration_list
                                (field_declaration_list_body
                                  (variable_set_equal
                                    (var_identifier)
                                    (assignment_prec_operator)
                                    (value
                                      (number
                                        (int_number))))
                                  (variable_set_equal
                                    (var_identifier)
                                    (assignment_prec_operator)
                                    (value
                                      (number
                                        (int_number))))
                                  (callback_event
                                    (function_identifier)
                                    (field_declaration_list
                                      (field_declaration_list_body
                                        (callback_call
                                          (var_identifier
                                            (reference_identifier)
                                            (post_identifier
                                              (function_call
                                                (function_identifier)
                                                (call_signature
                                                  (formal_parameters)))))))))
                                  (component_definition
                                    (user_type_identifier)
                                    (field_declaration_list
                                      (field_declaration_list_body
                                        (variable_set_equal
                                          (var_identifier)
                                          (assignment_prec_operator)
                                          (value
                                            (language_constant))))))))))))))))
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (int_number))))
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (int_number))))
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (language_constant)))))))))))))

================================================================================
subsubcomponent
================================================================================

SubSubCompo := Rectangle { }
SubCompo := SubSubCompo {}

export TestCase := Window {
    SubCompo {}
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body)))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body)))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))))))

================================================================================
subsubcomponent2
================================================================================

// Test for issue #781

global Glop := {
    property <int> r;
}

SubSubCompo := Rectangle {
    property <int> val;
    TouchArea {
        clicked => { Glop.r = val; }
    }
}
SubCompo := SubSubCompo { }

export TestCase := Window {
    width: 300px;
    height: 300px;
    HorizontalLayout {
        SubCompo { val: 88; }
        SubCompo { val: 99; }
    }

    property <int> result: Glop.r;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (global_definition
    (var_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier)))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (property_definition
          (builtin_type_identifier)
          (var_identifier))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_event
                (function_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier
                        (post_identifier))
                      (assignment_prec_operator)
                      (var_identifier)))))))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body)))
  (component_definition
    (visibility_modifier)
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (variable_set_equal
          (var_identifier)
          (assignment_prec_operator)
          (value
            (value_with_units
              (number
                (int_number))
              (unit_type))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (int_number)))))))
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (int_number))))))))))
        (property_definition
          (builtin_type_identifier)
          (var_identifier)
          (property_expr
            (var_identifier
              (post_identifier))))))))

================================================================================
optimized_popup_parent
================================================================================

Foo := Rectangle {
    public function show() { x.show(); }
    x := PopupWindow {  }
}

Bar := Rectangle {

    TouchArea {
        clicked => { x.show();  f.show(); }
    }

    Rectangle {
        Rectangle {
            Rectangle {
                x := PopupWindow {}
            }
        }
    }

    f := Foo {}
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (var_identifier)
        (var_identifier)
        (component_definition
          (user_type_identifier)
          (ERROR)
          (field_declaration_list
            (field_declaration_list_body
              (callback_call
                (var_identifier
                  (post_identifier
                    (function_call
                      (function_identifier)
                      (call_signature
                        (formal_parameters)))))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body))))))
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (callback_event
                (function_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (callback_call
                      (var_identifier
                        (post_identifier
                          (function_call
                            (function_identifier)
                            (call_signature
                              (formal_parameters))))))
                    (callback_call
                      (var_identifier
                        (post_identifier
                          (function_call
                            (function_identifier)
                            (call_signature
                              (formal_parameters))))))))))))
        (component_definition
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (component_definition
                (user_type_identifier)
                (field_declaration_list
                  (field_declaration_list_body
                    (component_definition
                      (user_type_identifier)
                      (field_declaration_list
                        (field_declaration_list_body
                          (component_definition
                            (user_type_identifier)
                            (user_type_identifier)
                            (field_declaration_list
                              (field_declaration_list_body))))))))))))
        (component_definition
          (user_type_identifier)
          (user_type_identifier)
          (field_declaration_list
            (field_declaration_list_body)))))))

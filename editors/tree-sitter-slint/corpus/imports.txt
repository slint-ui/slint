================================================================================
duplicated_name
================================================================================

//include_path: ../../helper_components
import { ColorButton } from "test_button.slint";
import { TestButton as TheRealTestButton  } from "re_export.slint";

// ColorButton uses TestButtonImpl
TestButtonImpl := Rectangle {
    property <int> abc: 12;
}

// Testbutton is another name for TestButtonImpl
TestButton := Rectangle {
    property <string> abc: "hello";
}

TestCase := Rectangle {
    ColorButton { button_color: red; }
    TestButtonImpl { abc: 4; }
    TestButton { abc: "world"; }
    TheRealTestButton{ button-text: "yo"; }
}
--------------------------------------------------------------------------------

(document
  (comment)
  (import_statement
    (type_identifier)
    (string_value))
  (import_statement
    (type_identifier)
    (type_identifier)
    (string_value))
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (int_value)))))
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (string_value)))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (component
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (var_identifier))))
      (component
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (int_value)))))
      (component
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (string_value)))))
      (component
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (string_value))))))))

================================================================================
exported_component
================================================================================

export ExportedA := Rectangle {}
NotExported := ExportedA {
    ExportedA {}
}
ExportedB := NotExported {
}
export { ExportedB }
--------------------------------------------------------------------------------

(document
  (component_definition
    (type_identifier)
    (type_identifier)
    (block))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (component
        (type_identifier)
        (block))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block))
  (export_statement
    (type_identifier)))

================================================================================
external_globals
================================================================================

//include_path: ../../helper_components
import { UseGlobal } from "export_globals.slint";
TestCase := Rectangle {
    ug := UseGlobal {}
    property<int> p1: ug.used42;
    property<int> p2: ug.used44;
}
--------------------------------------------------------------------------------

(document
  (comment)
  (import_statement
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (component
        (var_identifier)
        (type_identifier)
        (block))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier))))))

================================================================================
external_globals_nameclash
================================================================================

//include_path: ../../helper_components
import { UseGlobal, ExportedGlobal as FromExport } from "export_globals.slint";

global NotExported := {
    property<int> abc: 1000;
    property<string> prop: "_";
}

global ExportedGlobal := {
    property<int> abc: 1001;
}

TestCase := Rectangle {
    ug := UseGlobal {}
    property<int> p1: ug.used42;
    property<int> p2: ug.used44;
    property<int> p3: NotExported.abc + ExportedGlobal.abc;

    property <bool> test: p1 == 42 && p2 == 44 && p3 == 2001 ;//&& NotExported.prop == "_";
}
--------------------------------------------------------------------------------

(document
  (comment)
  (import_statement
    (type_identifier)
    (type_identifier)
    (type_identifier)
    (string_value))
  (global_definition
    (type_identifier)
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (int_value)))
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (string_value))))
  (global_definition
    (type_identifier)
    (property
      (type
        (type_identifier))
      (var_identifier)
      (value
        (int_value))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (component
        (var_identifier)
        (type_identifier)
        (block))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (add_binary_expression
          (var_identifier
            (post_identifier))
          (add_prec_operator)
          (var_identifier
            (post_identifier))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (comparison_binary_expression
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier)
              (comparison_operator)
              (mult_binary_expression
                (value
                  (int_value))
                (mult_prec_operator)
                (var_identifier)))
            (comparison_operator)
            (mult_binary_expression
              (value
                (int_value))
              (mult_prec_operator)
              (var_identifier)))
          (comparison_operator)
          (value
            (int_value))))
      (comment))))

================================================================================
external_structs
================================================================================

//include_path: ../../helper_components
import { UseStruct , ExportedStruct } from "export_structs.slint";
TestCase := Rectangle {
    property <ExportedStruct> exp: { d: 3001, e: {a: 2001} };
    u := UseStruct {
        exp: { d: 3002, e: {a: 2002} };
        nexp: { b: 3003, c: {a: 2003} };
    }
    property<int> p1: u.nexp.c.a;
}
--------------------------------------------------------------------------------

(document
  (comment)
  (import_statement
    (type_identifier)
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (property
        (type
          (type_identifier))
        (var_identifier)
        (value
          (anon_struct
            (var_identifier)
            (value
              (int_value))
            (var_identifier)
            (value
              (anon_struct
                (var_identifier)
                (value
                  (int_value)))))))
      (component
        (var_identifier)
        (type_identifier)
        (block
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (anon_struct
                (var_identifier)
                (value
                  (int_value))
                (var_identifier)
                (value
                  (anon_struct
                    (var_identifier)
                    (value
                      (int_value)))))))
          (assignment_expr
            (var_identifier)
            (assignment_prec_operator)
            (value
              (anon_struct
                (var_identifier)
                (value
                  (int_value))
                (var_identifier)
                (value
                  (anon_struct
                    (var_identifier)
                    (value
                      (int_value)))))))))
      (property
        (type
          (type_identifier))
        (var_identifier)
        (var_identifier
          (post_identifier)
          (post_identifier)
          (post_identifier))))))

================================================================================
external_type
================================================================================

//include_path: ../../helper_components
import { TestButton as RealButton } from "test_button.slint";
import { ColorButton } from "../helper_components/test_button.slint";
import { Button } from "std-widgets.slint";
import { TestButton as ReExportedButton } from "re_export.slint";
import { Main_Window } from "main_window.slint";
TestCase := Rectangle {
    RealButton {} // aliased from external file
    ColorButton {} // from external file
    ReExportedButton {} // from external file re-exported
    Button {} // from standard library
}
--------------------------------------------------------------------------------

(document
  (comment)
  (import_statement
    (type_identifier)
    (type_identifier)
    (string_value))
  (import_statement
    (type_identifier)
    (string_value))
  (import_statement
    (type_identifier)
    (string_value))
  (import_statement
    (type_identifier)
    (type_identifier)
    (string_value))
  (import_statement
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (component
        (type_identifier)
        (block))
      (comment)
      (component
        (type_identifier)
        (block))
      (comment)
      (component
        (type_identifier)
        (block))
      (comment)
      (component
        (type_identifier)
        (block))
      (comment))))

================================================================================
just_import
================================================================================

//include_path: ../../helper_components
import { MainWindow } from "main_window.slint";

--------------------------------------------------------------------------------

(document
  (comment)
  (import_statement
    (type_identifier)
    (string_value)))

================================================================================
import_multi
================================================================================

import { ExportedA } from "./exported_component.slint";
import { ExportedB } from "./exported_component.slint";

TestCase := Rectangle {
    ExportedA {}
    ExportedB {}
}
--------------------------------------------------------------------------------

(document
  (import_statement
    (type_identifier)
    (string_value))
  (import_statement
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (component
        (type_identifier)
        (block))
      (component
        (type_identifier)
        (block)))))

================================================================================
reexport
================================================================================

//include_path: ../../helper_components
import { TestButton, ColorButton } from "re_export_all.slint";
TestCase := Rectangle {
    TestButton {}
    ColorButton {}
}
--------------------------------------------------------------------------------

(document
  (comment)
  (import_statement
    (type_identifier)
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (component
        (type_identifier)
        (block))
      (component
        (type_identifier)
        (block)))))

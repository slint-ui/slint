================================================================================
dialog
================================================================================

import { StandardButton, Button, GridBox } from "std-widgets.slint";

TestCase := Dialog {
    Rectangle {
        background: red;
        preferred-width: 600px;
        preferred-height: 600px;
    }

    StandardButton { kind: help; }
    StandardButton { kind: ok; }
    StandardButton { kind: cancel; }
    StandardButton { kind: apply; }
    StandardButton { kind: reset; }
    StandardButton { kind: yes; }
    Button {
        text: "Action";
        dialog-button-role: action;
    }
}

--------------------------------------------------------------------------------

(source_file
  (import_statement
    (type_identifier)
    (type_identifier)
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (length_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (length_value)))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (string_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier))))))))

================================================================================
path
================================================================================

TestCase := Path {
    property<float> my_x: 100;
    property<float> my_y: 200;

    LineTo {
        x: root.my_x;
        y: root.my_y;
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (basic_value
              (int_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (basic_value
              (int_value)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier
                  (reference_identifier)
                  (post_identifier))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier
                (reference_identifier)
                (post_identifier)))))))))

================================================================================
flickable
================================================================================

TestCase := Window {
    width: 500phx;
    height: 500phx;
    no-frame: false;

    f := Flickable {
        x: 10phx;
        y: 10phx;
        width: parent.width - 20phx;
        height: parent.height - 20phx;
        viewport_width: 2100phx;
        viewport_height: 2100phx;
        inner_ta := TouchArea {
            x: 150phx;
            y: 150phx;
            width: 50phx;
            height: 50phx;
            Rectangle {
                background: parent.pressed ? blue : parent.has_hover ? green : red;
            }
            clicked => {
                root.clicked = mouse_x/1phx * 100000 + mouse_y/1phx;
            }
        }

    }

    property<length> offset_x: -f.viewport_x;
    property<length> offset_y: -f.viewport_y;
    property<bool> inner_ta_pressed: inner_ta.pressed;
    property<bool> inner_ta_has_hover: inner_ta.has_hover;
    property<int> clicked;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (bool_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (add_binary_expression
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))
                  (add_prec_operator)
                  (value
                    (basic_value
                      (physical_length_value))))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (add_binary_expression
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))
                  (add_prec_operator)
                  (value
                    (basic_value
                      (physical_length_value))))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (ternary_expression
                            (ternary_expression
                              (var_identifier
                                (reference_identifier)
                                (post_identifier))
                              (var_identifier)
                              (var_identifier
                                (reference_identifier)
                                (post_identifier)))
                            (var_identifier)
                            (var_identifier))))))
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (block
                        (assignment_expr
                          (var_identifier
                            (reference_identifier)
                            (post_identifier))
                          (assignment_prec_operator)
                          (add_binary_expression
                            (mult_binary_expression
                              (mult_binary_expression
                                (var_identifier)
                                (mult_prec_operator)
                                (value
                                  (basic_value
                                    (physical_length_value))))
                              (mult_prec_operator)
                              (value
                                (basic_value
                                  (int_value))))
                            (add_prec_operator)
                            (mult_binary_expression
                              (var_identifier)
                              (mult_prec_operator)
                              (value
                                (basic_value
                                  (physical_length_value)))))))))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (unary_expression
            (unary_prec_operator)
            (var_identifier
              (post_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (unary_expression
            (unary_prec_operator)
            (var_identifier
              (post_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier))))))

================================================================================
flickable2
================================================================================

InheritFlickable := Flickable {}

TestCase := Window {
    width: 500phx;
    height: 500phx;

    Flickable {
        r1 := Rectangle {
            property<bool> ok: height == root.height && width == root.width;
        }
    }

    InheritFlickable {
        width: 123phx;
        viewport_height: 456phx;
        r2 := Rectangle {
            property<bool> ok: height == 456phx && width == 123phx;
        }
    }

    f3 := InheritFlickable {
        VerticalLayout {
            spacing: 0phx;
            padding: 0phx;
            r3 := Rectangle {
                property<bool> ok: height == root.height/2 && width == 888phx && f3.viewport_width == 888phx && f3.min-width == 0phx;
            }
            Rectangle {
                min-width: 888phx;
            }
        }
    }

    f4 := Flickable {
         HorizontalLayout {
            spacing: 0phx;
            padding: 0phx;
            r4 := Rectangle {
                property<bool> ok: f4.max-height == 6000phx && r4.height == root.height;
            }
            Rectangle {
                max-height: 6000phx;
            }
        }
    }

    Flickable { for i in 5: Rectangle {} }

    property<bool> all_ok: r1.ok && r2.ok && r3.ok && r4.ok;
    property<bool> test: all_ok;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (property
                      (type
                        (type_identifier))
                      (var_identifier)
                      (comparison_binary_expression
                        (comparison_binary_expression
                          (var_identifier)
                          (comparison_operator)
                          (mult_binary_expression
                            (var_identifier
                              (reference_identifier)
                              (post_identifier))
                            (mult_prec_operator)
                            (var_identifier)))
                        (comparison_operator)
                        (var_identifier
                          (reference_identifier)
                          (post_identifier)))))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (property
                      (type
                        (type_identifier))
                      (var_identifier)
                      (comparison_binary_expression
                        (comparison_binary_expression
                          (var_identifier)
                          (comparison_operator)
                          (mult_binary_expression
                            (value
                              (basic_value
                                (physical_length_value)))
                            (mult_prec_operator)
                            (var_identifier)))
                        (comparison_operator)
                        (value
                          (basic_value
                            (physical_length_value))))))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (component
                      (var_identifier)
                      (type_identifier)
                      (block
                        (block_statement
                          (property
                            (type
                              (type_identifier))
                            (var_identifier)
                            (comparison_binary_expression
                              (comparison_binary_expression
                                (comparison_binary_expression
                                  (comparison_binary_expression
                                    (var_identifier)
                                    (comparison_operator)
                                    (mult_binary_expression
                                      (mult_binary_expression
                                        (var_identifier
                                          (reference_identifier)
                                          (post_identifier))
                                        (mult_prec_operator)
                                        (value
                                          (basic_value
                                            (int_value))))
                                      (mult_prec_operator)
                                      (var_identifier)))
                                  (comparison_operator)
                                  (mult_binary_expression
                                    (value
                                      (basic_value
                                        (physical_length_value)))
                                    (mult_prec_operator)
                                    (var_identifier
                                      (post_identifier))))
                                (comparison_operator)
                                (mult_binary_expression
                                  (value
                                    (basic_value
                                      (physical_length_value)))
                                  (mult_prec_operator)
                                  (var_identifier
                                    (post_identifier))))
                              (comparison_operator)
                              (value
                                (basic_value
                                  (physical_length_value)))))))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (basic_value
                              (physical_length_value)))))))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (component
                      (var_identifier)
                      (type_identifier)
                      (block
                        (block_statement
                          (property
                            (type
                              (type_identifier))
                            (var_identifier)
                            (comparison_binary_expression
                              (comparison_binary_expression
                                (var_identifier
                                  (post_identifier))
                                (comparison_operator)
                                (mult_binary_expression
                                  (value
                                    (basic_value
                                      (physical_length_value)))
                                  (mult_prec_operator)
                                  (var_identifier
                                    (post_identifier))))
                              (comparison_operator)
                              (var_identifier
                                (reference_identifier)
                                (post_identifier))))))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (basic_value
                              (physical_length_value)))))))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (for_loop
                (var_identifier)
                (for_range)
                (component
                  (type_identifier)
                  (block)))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (mult_binary_expression
            (mult_binary_expression
              (mult_binary_expression
                (var_identifier
                  (post_identifier))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier)))
              (mult_prec_operator)
              (var_identifier
                (post_identifier)))
            (mult_prec_operator)
            (var_identifier
              (post_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier))))))

================================================================================
flickable3
================================================================================

TestCase := Window {
  width: 500phx;
  height: 500phx;

  f1 := Flickable {
    x: 0phx;
    width: 250phx;
    viewport-height: 800phx;

    t1 := TouchArea {
      height: 50phx;
    }
  }

  Flickable {
    x: 250phx;
    width: 250phx;
    viewport-width: 800phx;

    t2 := TouchArea {
      width: 50phx;
    }
  }

  property<bool> t1-has-hover: t1.has-hover;
  property<bool> t2-has-hover: t2.has-hover;

  property f1_pos <=> f1.viewport_y;
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (basic_value
                        (physical_length_value))))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (basic_value
                        (physical_length_value))))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property_alias
          (var_identifier)
          (var_identifier
            (post_identifier)))))))

================================================================================
flickable_in_flickable
================================================================================

TestCase := Window {
    width: 500px;
    height: 500px;
    no-frame: false;

    outer := Flickable {
        x: 10px;
        y: 10px;
        width: parent.width - 20px;
        height: parent.height - 20px;
        viewport_width: width;
        viewport_height: 980px;

        inner := Flickable {
            viewport_width: 1500px;
            Rectangle {
                background: @radial-gradient(circle, yellow, blue, red, green);
            }
        }
    }

    property<length> outer_y: - outer.viewport-y;
    property<length> inner_x: - inner.viewport-x;

    property <bool> test: outer.viewport-x == 0 && inner.viewport-y == 0;

}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (bool_value)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (add_binary_expression
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))
                  (add_prec_operator)
                  (value
                    (basic_value
                      (length_value))))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (add_binary_expression
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))
                  (add_prec_operator)
                  (value
                    (basic_value
                      (length_value))))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (length_value)))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (length_value)))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (function_call
                            (function_identifier)
                            (call_signature
                              (var_identifier)
                              (var_identifier)
                              (var_identifier)
                              (var_identifier)
                              (var_identifier)))))))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (unary_expression
            (unary_prec_operator)
            (var_identifier
              (post_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (unary_expression
            (unary_prec_operator)
            (var_identifier
              (post_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (var_identifier
                (post_identifier))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (basic_value
                    (int_value)))
                (mult_prec_operator)
                (var_identifier
                  (post_identifier))))
            (comparison_operator)
            (value
              (basic_value
                (int_value)))))))))

================================================================================
listview
================================================================================

import { ListView  } from "std-widgets.slint";

TestCase := Window {
    width: 400px;
    height: 540px;

    property <string> value;

    listview := ListView {
        for data in [
            { text: "Blue", color: #0000ff, bg: #eeeeee},
            { text: "Red", color: #ff0000, bg: #eeeeee},
            { text: "Green", color: #00ff00, bg: #eeeeee},
            { text: "Yellow", color: #ffff00, bg: #222222 },
            { text: "Black", color: #000000, bg: #eeeeee },
            { text: "White", color: #ffffff, bg: #222222 },
            { text: "Magenta", color: #ff00ff, bg: #eeeeee },
            { text: "Cyan", color: #00ffff, bg: #222222 },
        ] : delegate := Rectangle {
            background: @linear-gradient(90deg, data.bg,data.bg.brighter(0.5));
            HorizontalLayout {
                text_Name := Text {
                    height: 100px;
                    text: data.text;
                    color: data.color;
                    font_size: 20px ;
                }
            }
            TouchArea { clicked => { value = data.text; } }
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (import_statement
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (for_loop
                (var_identifier)
                (for_range
                  (value_list
                    (value
                      (anon_struct
                        (var_identifier)
                        (value
                          (basic_value
                            (string_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))))
                    (value
                      (anon_struct
                        (var_identifier)
                        (value
                          (basic_value
                            (string_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))))
                    (value
                      (anon_struct
                        (var_identifier)
                        (value
                          (basic_value
                            (string_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))))
                    (value
                      (anon_struct
                        (var_identifier)
                        (value
                          (basic_value
                            (string_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))))
                    (value
                      (anon_struct
                        (var_identifier)
                        (value
                          (basic_value
                            (string_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))))
                    (value
                      (anon_struct
                        (var_identifier)
                        (value
                          (basic_value
                            (string_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))))
                    (value
                      (anon_struct
                        (var_identifier)
                        (value
                          (basic_value
                            (string_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))))
                    (value
                      (anon_struct
                        (var_identifier)
                        (value
                          (basic_value
                            (string_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))
                        (var_identifier)
                        (value
                          (basic_value
                            (color_value)))))))
                (component
                  (var_identifier)
                  (type_identifier)
                  (block
                    (block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (function_call
                          (function_identifier)
                          (call_signature
                            (value
                              (basic_value
                                (angle_value)))
                            (var_identifier
                              (post_identifier))
                            (var_identifier
                              (post_identifier)
                              (post_identifier
                                (function_call
                                  (function_identifier)
                                  (call_signature
                                    (value
                                      (basic_value
                                        (float_value)))))))))))
                    (block_statement
                      (component
                        (type_identifier)
                        (block
                          (block_statement
                            (component
                              (var_identifier)
                              (type_identifier)
                              (block
                                (block_statement
                                  (assignment_expr
                                    (var_identifier)
                                    (assignment_prec_operator)
                                    (value
                                      (basic_value
                                        (length_value)))))
                                (block_statement
                                  (assignment_expr
                                    (var_identifier)
                                    (assignment_prec_operator)
                                    (var_identifier
                                      (post_identifier))))
                                (block_statement
                                  (assignment_expr
                                    (var_identifier)
                                    (assignment_prec_operator)
                                    (var_identifier
                                      (post_identifier))))
                                (assignment_expr
                                  (var_identifier)
                                  (assignment_prec_operator)
                                  (value
                                    (basic_value
                                      (length_value))))))))))
                    (block_statement
                      (component
                        (type_identifier)
                        (block
                          (block_statement
                            (callback_event
                              (function_identifier)
                              (block
                                (assignment_expr
                                  (var_identifier)
                                  (assignment_prec_operator)
                                  (var_identifier
                                    (post_identifier)))))))))))))))))))

================================================================================
listview_click_open
================================================================================

import { ListView } from "std-widgets.slint";

Item := Text {
    property <int> index;
    text: "I'm item #" + index;
    Rectangle {
        border-width: 1px;
        border-color: red;
    }
}

export TestCase := Window {
    width:  300phx;
    height: 300phx;

    property <int> last_clicked: -1;

    property <length> item-height: 25phx;
    property <length> listview-y <=> lv.viewport_y;

    lv := ListView {
        for i in 200: r := Item {
            index: i;
            height: item-height;
            property <bool> open;
            HorizontalLayout {
                TouchArea {
                    clicked => {
                        if (open) {
                            r.height = item-height;
                            open = false;
                        } else {
                            lv.viewport_y = -r.y;
                            r.height = lv.visible-height;
                            open = true;
                        }
                    }
                }
                TouchArea {
                    clicked => {
                        last-clicked = i;
                    }
                }
            }
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (import_statement
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (add_binary_expression
            (value
              (basic_value
                (string_value)))
            (add_prec_operator)
            (var_identifier))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (length_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))))
  (export_statement)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (unary_expression
            (unary_prec_operator)
            (value
              (basic_value
                (int_value))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (value
            (basic_value
              (physical_length_value)))))
      (block_statement
        (property_alias
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (for_loop
                (var_identifier)
                (for_range)
                (component
                  (var_identifier)
                  (type_identifier)
                  (block
                    (block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (var_identifier)))
                    (block_statement
                      (assignment_expr
                        (var_identifier)
                        (assignment_prec_operator)
                        (var_identifier)))
                    (block_statement
                      (property
                        (type
                          (type_identifier))
                        (var_identifier)))
                    (block_statement
                      (component
                        (type_identifier)
                        (block
                          (block_statement
                            (component
                              (type_identifier)
                              (block
                                (block_statement
                                  (callback_event
                                    (function_identifier)
                                    (block
                                      (block_statement
                                        (if_statement
                                          (var_identifier)
                                          (component
                                            (type_identifier
                                              (MISSING _identifier))
                                            (block
                                              (block_statement
                                                (assignment_expr
                                                  (var_identifier
                                                    (post_identifier))
                                                  (assignment_prec_operator)
                                                  (var_identifier)))
                                              (assignment_expr
                                                (var_identifier)
                                                (assignment_prec_operator)
                                                (value
                                                  (basic_value
                                                    (bool_value))))))
                                          (component
                                            (type_identifier
                                              (MISSING _identifier))
                                            (block
                                              (block_statement
                                                (assignment_expr
                                                  (var_identifier
                                                    (post_identifier))
                                                  (assignment_prec_operator)
                                                  (unary_expression
                                                    (unary_prec_operator)
                                                    (var_identifier
                                                      (post_identifier)))))
                                              (block_statement
                                                (assignment_expr
                                                  (var_identifier
                                                    (post_identifier))
                                                  (assignment_prec_operator)
                                                  (var_identifier
                                                    (post_identifier))))
                                              (assignment_expr
                                                (var_identifier)
                                                (assignment_prec_operator)
                                                (value
                                                  (basic_value
                                                    (bool_value))))))))))))))
                          (block_statement
                            (component
                              (type_identifier)
                              (block
                                (block_statement
                                  (callback_event
                                    (function_identifier)
                                    (block
                                      (assignment_expr
                                        (var_identifier)
                                        (assignment_prec_operator)
                                        (var_identifier)))))))))))))))))))))

================================================================================
togglebutton
================================================================================

import { Button } from "std-widgets.slint";

TestCase := Rectangle {
    property <bool> checked <=> tb.checked;

    tb := Button {
        width: 100px;
        height: 100px;

        checkable: true;
        checked: true;
    }
}

--------------------------------------------------------------------------------

(source_file
  (import_statement
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property_alias
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (bool_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (bool_value))))))))))

================================================================================
image
================================================================================

//include_path: ../../../examples/printerdemo/ui/images/

TestCase := Rectangle {
    img := Image {
        source: @image-url("cat.jpg");
    }

    img2 := Image {
        source: @image-url("cat.jpg");
        source-clip-x: 20;
    }

    property <length> img_width: img.width;
    property <length> img_height: img.height;
    property <bool> test: img2.source-clip-height * 1px == img2.height && img2.source-clip-width * 1px == img2.width &&
         img2.width/1px == img2.source.width - 20;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (function_call
                (function_identifier)
                (call_signature
                  (value
                    (basic_value
                      (string_value)))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (function_call
                  (function_identifier)
                  (call_signature
                    (value
                      (basic_value
                        (string_value)))))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (int_value)))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (comparison_binary_expression
                (mult_binary_expression
                  (var_identifier
                    (post_identifier))
                  (mult_prec_operator)
                  (value
                    (basic_value
                      (length_value))))
                (comparison_operator)
                (mult_binary_expression
                  (mult_binary_expression
                    (var_identifier
                      (post_identifier))
                    (mult_prec_operator)
                    (var_identifier
                      (post_identifier)))
                  (mult_prec_operator)
                  (value
                    (basic_value
                      (length_value)))))
              (comparison_operator)
              (mult_binary_expression
                (mult_binary_expression
                  (var_identifier
                    (post_identifier))
                  (mult_prec_operator)
                  (var_identifier
                    (post_identifier)))
                (mult_prec_operator)
                (value
                  (basic_value
                    (length_value)))))
            (comparison_operator)
            (add_binary_expression
              (var_identifier
                (post_identifier)
                (post_identifier))
              (add_prec_operator)
              (value
                (basic_value
                  (int_value))))))))))

================================================================================
image_geometry
================================================================================

//include_path: ../../../examples/printerdemo/ui/images/

FixedWidthtImage := Image {
    source: @image-url("cat.jpg");
    width: 500phx;
}

TestCase := Rectangle {
    fixed_image := Image {
        width: 50phx;
        height: 50phx;
    }
    fixed_image_contain := Image {
        width: 50phx;
        height: 50phx;
        image-fit: contain;
    }

    VerticalLayout {
        image_in_layout := Image {
        }
        image_in_layout_with_explicit_fit := Image {
            image-fit: fill;
        }
    }

    image_with_missing_height := FixedWidthtImage {
        property <bool> expected_height_ok: self.height == 750phx;
    }

    image_with_missing_width := Image {
        source: @image-url("cat.jpg");
        height: 600phx;
        property <bool> expected_width_ok: self.width == 400phx;
    }

    image_with_missing_width_clipped := Image {
        source: @image-url("cat.jpg");
        height: 600phx;
        source-clip-width: 20;
        source-clip-height: 20;
        property <bool> expected_width_ok: self.width == 600phx;
    }

    property <bool> fixed_image_default_image_fit_ok: fixed_image.image-fit == ImageFit.fill;
    property <bool> fixed_image_image_fit_override_ok: fixed_image_contain.image-fit == ImageFit.contain;
    property <bool> image_in_layout_fit_ok: image_in_layout.image-fit == ImageFit.contain;
    property <bool> image_in_layout_custom_fit_ok: image_in_layout_with_explicit_fit.image-fit == ImageFit.fill;
    property <bool> image_with_missing_height_ok <=> image_with_missing_height.expected_height_ok;
    property <bool> image_with_missing_width_ok <=> image_with_missing_width.expected_width_ok;
    property <bool> image_with_missing_width_clipped_ok <=> image_with_missing_width.expected_width_ok;

    property <bool> test: fixed_image_default_image_fit_ok && fixed_image_image_fit_override_ok && image_in_layout_fit_ok && image_in_layout_custom_fit_ok && image_with_missing_height_ok && image_with_missing_width_ok && image_with_missing_width_clipped_ok;
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (function_call
            (function_identifier)
            (call_signature
              (value
                (basic_value
                  (string_value)))))))
      (assignment_expr
        (var_identifier)
        (assignment_prec_operator)
        (value
          (basic_value
            (physical_length_value))))))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (value
                (basic_value
                  (physical_length_value)))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block)))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (property
                (type
                  (type_identifier))
                (var_identifier)
                (comparison_binary_expression
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))
                  (comparison_operator)
                  (value
                    (basic_value
                      (physical_length_value)))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (function_call
                  (function_identifier)
                  (call_signature
                    (value
                      (basic_value
                        (string_value)))))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (property
                (type
                  (type_identifier))
                (var_identifier)
                (comparison_binary_expression
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))
                  (comparison_operator)
                  (value
                    (basic_value
                      (physical_length_value)))))))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (function_call
                  (function_identifier)
                  (call_signature
                    (value
                      (basic_value
                        (string_value)))))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (int_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (int_value)))))
            (block_statement
              (property
                (type
                  (type_identifier))
                (var_identifier)
                (comparison_binary_expression
                  (var_identifier
                    (reference_identifier)
                    (post_identifier))
                  (comparison_operator)
                  (value
                    (basic_value
                      (physical_length_value)))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier
              (post_identifier))
            (comparison_operator)
            (var_identifier
              (post_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier
              (post_identifier))
            (comparison_operator)
            (var_identifier
              (post_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier
              (post_identifier))
            (comparison_operator)
            (var_identifier
              (post_identifier)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (var_identifier
              (post_identifier))
            (comparison_operator)
            (var_identifier
              (post_identifier)))))
      (block_statement
        (property_alias
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property_alias
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property_alias
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (mult_binary_expression
            (mult_binary_expression
              (mult_binary_expression
                (mult_binary_expression
                  (mult_binary_expression
                    (mult_binary_expression
                      (var_identifier)
                      (mult_prec_operator)
                      (var_identifier))
                    (mult_prec_operator)
                    (var_identifier))
                  (mult_prec_operator)
                  (var_identifier))
                (mult_prec_operator)
                (var_identifier))
              (mult_prec_operator)
              (var_identifier))
            (mult_prec_operator)
            (var_identifier)))))))

================================================================================
path_fit
================================================================================

TestCase := Rectangle {

    Text {
        text: "The path should fit into the red rectangle";
        color: black;
    }

    fit_rect := Rectangle {
        x: 0phx;
        y: 100phx;
        background: red;
        width: 700phx;
        height: 500phx;

        Path {
            x: 0phx;
            y: 0phx;
            width: fit_rect.width;
            height: fit_rect.height;
            commands: "M 100 300 Q 150 50 1100 400 Q 1450 500 750 500 Q 1000 600 950 600 C 325 575 350 450 150 550 Q 0 600 100 800 C 250 850 300 600 550 850 C 800 850 850 650 2000 700 ";
            stroke: black;
            stroke_width: 2px;
        }
    }
}
--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (string_value)))))
            (assignment_expr
              (var_identifier)
              (assignment_prec_operator)
              (var_identifier)))))
      (block_statement
        (component
          (var_identifier)
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier)))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (post_identifier))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier
                        (post_identifier))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (string_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (var_identifier)))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (basic_value
                        (length_value)))))))))))))

================================================================================
tabwidget
================================================================================

import { TabWidget } from "std-widgets.slint";

TestCase := Window {
    preferred_height: 500px;
    preferred_width: 500px;

    property <int> current_tab: tw.current-index;

    VerticalLayout {
        padding: 20px;
        tw := TabWidget {
            current-index: 1;
            Tab {
                title: "Hello";
                Rectangle {
                    background: #8555;
                }

            }
            Tab {
                title: "World";
                Text { text: "This is the second widget"; }
            }
            Tab {
                title: "Third";
                Rectangle {
                    background: pink;
                }
                min_height: 200px;
            }
        }
    }

    property <bool> test: tw.vertical_stretch == 1 && tw.horizontal_stretch == 1 && tw.min_height > 200px && current-tab == 1;
}
--------------------------------------------------------------------------------

(source_file
  (import_statement
    (type_identifier)
    (string_value))
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (assignment_expr
          (var_identifier)
          (assignment_prec_operator)
          (value
            (basic_value
              (length_value)))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (var_identifier
            (post_identifier))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (length_value)))))
            (block_statement
              (component
                (var_identifier)
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (int_value)))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (basic_value
                                (string_value)))))
                        (block_statement
                          (component
                            (type_identifier)
                            (block
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (value
                                  (basic_value
                                    (color_value))))))))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (basic_value
                                (string_value)))))
                        (block_statement
                          (component
                            (type_identifier)
                            (block
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (value
                                  (basic_value
                                    (string_value))))))))))
                  (block_statement
                    (component
                      (type_identifier)
                      (block
                        (block_statement
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (basic_value
                                (string_value)))))
                        (block_statement
                          (component
                            (type_identifier)
                            (block
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (var_identifier)))))
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (basic_value
                              (length_value)))))))))))))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)
          (comparison_binary_expression
            (comparison_binary_expression
              (comparison_binary_expression
                (comparison_binary_expression
                  (var_identifier
                    (post_identifier))
                  (comparison_operator)
                  (mult_binary_expression
                    (value
                      (basic_value
                        (int_value)))
                    (mult_prec_operator)
                    (var_identifier
                      (post_identifier))))
                (comparison_operator)
                (mult_binary_expression
                  (value
                    (basic_value
                      (int_value)))
                  (mult_prec_operator)
                  (var_identifier
                    (post_identifier))))
              (comparison_operator)
              (mult_binary_expression
                (value
                  (basic_value
                    (length_value)))
                (mult_prec_operator)
                (var_identifier)))
            (comparison_operator)
            (value
              (basic_value
                (int_value)))))))))

================================================================================
toucharea
================================================================================

TestCase := Rectangle {
    property <int> touch1;
    property <int> touch2;
    property <int> touch3;

    property <string> pointer-event-test;

    TouchArea {
        x: 100phx;
        y: 100phx;
        width: 10phx;
        height: 10phx;
        clicked => { touch1+=1; }
        mouse-cursor: move;
        TouchArea {
            y: 2phx;
            height: 2phx;
            x: 3phx;
            width: 4phx;
            clicked => { touch3+=1; }
            mouse-cursor: default;
        }
    }
    TouchArea {
        x: 100phx;
        y: 100phx;
        width: 5phx;
        height: 5phx;
        mouse-cursor: pointer;
        clicked => {
            pointer-event-test += "click";
            touch2+=1;
        }
        pointer-event(e) => {
            if (e.kind == PointerEventKind.cancel) {
                pointer-event-test += "cancel";
            } else if (e.kind == PointerEventKind.up) {
                pointer-event-test += "up";
            } else if (e.kind == PointerEventKind.down) {
                pointer-event-test += "down";
            } else {
                pointer-event-test += "err";
            }
            if (e.button == PointerEventButton.right) {
                pointer-event-test += "right";
            } else if (e.button == PointerEventButton.left) {
                pointer-event-test += "left";
            } else if (e.button == PointerEventButton.middle) {
                pointer-event-test += "middle";
            } else if (e.button == PointerEventButton.other) {
                pointer-event-test += "other";
            } else {
                pointer-event-test += "???";
            }
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (type_identifier)
    (type_identifier)
    (block
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (property
          (type
            (type_identifier))
          (var_identifier)))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (basic_value
                        (int_value)))))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier)))
            (block_statement
              (component
                (type_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (physical_length_value)))))
                  (block_statement
                    (callback_event
                      (function_identifier)
                      (block
                        (assignment_expr
                          (var_identifier)
                          (assignment_prec_operator)
                          (value
                            (basic_value
                              (int_value)))))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (var_identifier))))))))
      (block_statement
        (component
          (type_identifier)
          (block
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (value
                  (basic_value
                    (physical_length_value)))))
            (block_statement
              (assignment_expr
                (var_identifier)
                (assignment_prec_operator)
                (var_identifier)))
            (block_statement
              (callback_event
                (function_identifier)
                (block
                  (block_statement
                    (assignment_expr
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (basic_value
                          (string_value)))))
                  (assignment_expr
                    (var_identifier)
                    (assignment_prec_operator)
                    (value
                      (basic_value
                        (int_value)))))))
            (block_statement
              (callback_event
                (function_identifier)
                (call_signature
                  (var_identifier))
                (block
                  (block_statement
                    (if_statement
                      (comparison_binary_expression
                        (var_identifier
                          (post_identifier))
                        (comparison_operator)
                        (var_identifier
                          (post_identifier)))
                      (component
                        (type_identifier
                          (MISSING _identifier))
                        (block
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (basic_value
                                (string_value))))))
                      (if_statement
                        (comparison_binary_expression
                          (var_identifier
                            (post_identifier))
                          (comparison_operator)
                          (var_identifier
                            (post_identifier)))
                        (component
                          (type_identifier
                            (MISSING _identifier))
                          (block
                            (assignment_expr
                              (var_identifier)
                              (assignment_prec_operator)
                              (value
                                (basic_value
                                  (string_value))))))
                        (if_statement
                          (comparison_binary_expression
                            (var_identifier
                              (post_identifier))
                            (comparison_operator)
                            (var_identifier
                              (post_identifier)))
                          (component
                            (type_identifier
                              (MISSING _identifier))
                            (block
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (value
                                  (basic_value
                                    (string_value))))))
                          (component
                            (type_identifier
                              (MISSING _identifier))
                            (block
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (value
                                  (basic_value
                                    (string_value))))))))))
                  (block_statement
                    (if_statement
                      (comparison_binary_expression
                        (var_identifier
                          (post_identifier))
                        (comparison_operator)
                        (var_identifier
                          (post_identifier)))
                      (component
                        (type_identifier
                          (MISSING _identifier))
                        (block
                          (assignment_expr
                            (var_identifier)
                            (assignment_prec_operator)
                            (value
                              (basic_value
                                (string_value))))))
                      (if_statement
                        (comparison_binary_expression
                          (var_identifier
                            (post_identifier))
                          (comparison_operator)
                          (var_identifier
                            (post_identifier)))
                        (component
                          (type_identifier
                            (MISSING _identifier))
                          (block
                            (assignment_expr
                              (var_identifier)
                              (assignment_prec_operator)
                              (value
                                (basic_value
                                  (string_value))))))
                        (if_statement
                          (comparison_binary_expression
                            (var_identifier
                              (post_identifier))
                            (comparison_operator)
                            (var_identifier
                              (post_identifier)))
                          (component
                            (type_identifier
                              (MISSING _identifier))
                            (block
                              (assignment_expr
                                (var_identifier)
                                (assignment_prec_operator)
                                (value
                                  (basic_value
                                    (string_value))))))
                          (if_statement
                            (comparison_binary_expression
                              (var_identifier
                                (post_identifier))
                              (comparison_operator)
                              (var_identifier
                                (post_identifier)))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (assignment_expr
                                  (var_identifier)
                                  (assignment_prec_operator)
                                  (value
                                    (basic_value
                                      (string_value))))))
                            (component
                              (type_identifier
                                (MISSING _identifier))
                              (block
                                (assignment_expr
                                  (var_identifier)
                                  (assignment_prec_operator)
                                  (value
                                    (basic_value
                                      (string_value))))))))))))))))))))

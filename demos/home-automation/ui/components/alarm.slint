// Copyright © SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT
import { Animation, Measurements, Colors, Style, Palette } from "../common.slint";
import { Control} from "control.slint";
import { AppState } from "../appState.slint";
import { HaText } from "general/haText.slint";
import { LineEdit } from "std-widgets.slint";
import { InnerShadowRectangle } from "general/innerShadowRectangle.slint";

export component ArmButton inherits Rectangle {
    callback clicked <=> ta.clicked;
    in property <int> label;
    in property <bool> enabled;
    background: ta.pressed ? Palette.control-alternate-background.transparentize(0.5) : Palette.control-alternate-background;
    border-radius: 5px;
    width: 65px;
    height: 47px;
    HaText {
        font-size: root.label == -2 ? Style.H1-font-size * 0.6 : Style.H2-font-size;
        text: root.label == -2 ? "⌫" : root.label;
        color: Palette.control-alternate-foreground;
        visible: root.label != -1;
    }

    ta := TouchArea {
        enabled: root.label != -1 && root.enabled;
    }
}

export component Alarm inherits Control {
    property <int> current-page: AppState.current-page;
    property <bool> unlocked: false;
    property <bool> is-active: false;
    property <string> passcode;
    property <string> indirect-passcode: passcode == "-1" ? "" : passcode;
    show-label: false;

    hidden-text := HaText {
        font-size: Style.H1-font-size;
        text: root.indirect-passcode;
        opacity: 0;
        changed width => {
            if self.width > 130px {
                root.passcode = -1;
            }
        }
    }

    content := Rectangle {
        TouchArea {
            clicked => {
                AppState.showFullScreen(root.index);
                if root.full-screen {
                    root.full-screen = false;
                }
            }
        }

        tile := InnerShadowRectangle {
            inner-color: Palette.glow-color.transparentize(0.5);
            inner-shadow-color: Palette.control-background;
            VerticalLayout {
                visible: !root.full-screen;
                alignment: center;
                spacing: 80px;
                HaText {
                    text: "Home Alarm \nOff";
                    horizontal-alignment: center;
                    font-size: Style.H2-font-size;
                    color: Palette.hvac-knob-foreground;
                    font-weight: 300;
                    x: parent.width / 2 - self.width / 2;
                }

                Rectangle {
                    height: 25px;
                    Rectangle {
                        width: 70%;
                        border-radius: self.height / 2;
                        background: Palette.alternate-background;

                        HaText {
                            text: "Arm Alarm";
                            color: Palette.foreground;
                            font-size: 1rem;
                        }
                    }
                }
            }

            pad := Rectangle {
                width: 200px;
                states [
                    isVisible when root.full-screen: {
                        opacity: 1;
                        in {
                            animate opacity {
                                duration: 300ms;
                                easing: ease-in-out-sine;
                            }
                        }
                    }
                    notVisible when !root.full-screen: {
                        opacity: 0;
                        in {
                            animate opacity {
                                duration: 300ms;
                                easing: ease-in-out-sine;
                            }
                        }
                    }
                ]
                x: parent.width / 2 - self.width / 2;
                Rectangle {
                    y: parent.height * 0.2;
                    width: 65px * 3 + 2 * 5px;
                    height: (95px * 5) + (4 * 10px);
                    container := Rectangle {
                        y: 0;
                        border-radius: 10px;
                        width: 100%;
                        height: 48px;
                        background: Palette.alternate-background;
                        le := LineEdit {
                            font-size: Style.H1-font-size;
                            text: root.indirect-passcode;
                            input-type: password;
                            width: 145px;
                        }

                        mask := Rectangle {
                            width: le.width + (9px * 2);
                            height: container.height - 1px;
                            x: le.x - 9px;
                            y: container.y + 1px;
                            border-width: 9px;
                            border-color: Palette.lineedit-background;
                        }

                        Rectangle {
                            width: (container.width - mask.width) / 2;
                            height: container.height;
                            x: container.x;
                            y: container.y;
                            border-radius: 5px;
                            background: Palette.lineedit-background;
                        }

                        Rectangle {
                            width: (container.width - mask.width) / 2;
                            height: container.height;
                            x: mask.x + mask.width;
                            y: container.y;
                            border-radius: 5px;
                            background: Palette.lineedit-background;
                        }
                        // Cover the text input to stop it from receiving touch events
                        TouchArea { }
                    }

                    TouchArea {
                        enabled: root.full-screen;
                    }

                    for row-model[r] in [
                        [1, 2, 3],
                        [4, 5, 6],
                        [7, 8, 9],
                        [-1, 0, -2],
                    ]: Rectangle {
                        y: (r * 52px) + 52px;
                        width: 100%;
                        height: 85px;

                        HorizontalLayout {
                            spacing: 5px;
                            for num[c] in row-model: ArmButton {
                                label: num;
                                enabled: root.full-screen;
                                clicked => {
                                    if num >= 0 && root.passcode == -1 {
                                        root.passcode = num;
                                    } else if num >= 0 {
                                        root.passcode += num;
                                    } else if num == -2 {
                                        root.passcode = -1;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        HaText {
            visible: root.full-screen;
            text: "Enter Code";
            horizontal-alignment: center;
            font-size: Style.H2-font-size;
            color: Palette.hvac-knob-foreground;
            font-weight: 300;
            x: parent.width / 2 - self.width / 2;
            y: 50px;
        }

        x: 0;
        VerticalLayout {
            alignment: end;
            spacing: 2px;
            padding: 2px;

            controls := Rectangle {
                border-radius: 10px;
                width: 95%;
                height: self.preferred-height;
                background: Palette.music-gradient.transparentize(0.2);
                animate height {
                    duration: 1000ms;
                    easing: ease-in-out-sine;
                }
                HorizontalLayout {
                    alignment: space-around;
                    padding-top: 8px;
                    padding-bottom: 8px;
                }
            }
        }
    }

    closeButton := Image {
        opacity: root.full-screen ? 1 : 0;
        animate opacity {
            duration: Animation.full-screen-duration;
            easing: ease-in-out-sine;
        }
        source: @image-url("../images/reduce.svg");
        colorize: white;
        x: root.width - self.width - self.y;
        y: 15px;
        width: 30px;
        height: 30px;
        TouchArea {
            enabled: closeButton.opacity > 0.1;
            clicked => {
                root.full-screen = false;
                AppState.showFullScreen(-1);
            }
        }
    }
}

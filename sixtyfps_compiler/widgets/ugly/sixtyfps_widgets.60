/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2021 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2021 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */

global Palette := {
    property<color> window-background: #ecedeb;
    property<color> text-color: #090909;
    property<color> text-color-disabled: lightgray;
    property<color> text-color-secondary: #111;
    property<color> button-background: #aaa;
    property<color> button-background-disabled: #aaa;
    property<color> button-hover: #8c8c8c;
    property<color> button-pressed: #575757;
    property<color> highlight-background: #2b60ae;
    property<color> placeholder-text: #ccc;
    property<color> border-color: #d0d3cf;
    property<color> base-background-color: white;
    property<color> checkbox-unchecked-indicator: #aaa;
}

export global StyleMetrics := {
    property<length> layout-spacing: 5px;
    property<length> layout-padding: 5px;
    property<length> text-cursor-width: 2px;
    property<color> window-background: #ecedeb; //FIXME: Palette.window-background  does not compile (cannot access globals from other globals #175)
    property<color> default-text-color: #090909;
}

export Button := Rectangle {
    callback clicked;
    property<string> text;
    property<length> font-size;
    property<bool> pressed: self.enabled && touch-area.pressed;
    property<bool> enabled <=> touch-area.enabled;
    property<image> icon;

    border-width: 1px;
    border-radius: 2px;
    border-color: Palette.text-color;
    background: !self.enabled ? Palette.button-background-disabled: self.pressed ? Palette.button-pressed : (touch-area.has-hover ? Palette.button-hover : Palette.button-background);
    animate background { duration: 100ms; }
    horizontal-stretch: 0;
    vertical-stretch: 0;


    HorizontalLayout {
        padding-top: root.border-radius + 8px;
        padding-bottom: root.border-radius + 8px;
        padding-left: root.border-radius + 16px;
        padding-right: root.border-radius + 16px;
        spacing: StyleMetrics.layout-spacing;

        if (icon.width > 0 && icon.height > 0): Image {
            source <=> icon;
            // Avoid that the icon makes the button grow. This isn't quite a perfect approximation,
            // as the glyphs are typically a bit smaller than the font size. 12px is the default
            // in the GL backend.
            width: root.font-size > 0 ? root.font-size : 12px;
        }

        Text {
            text: root.text;
            font-size: root.font-size;
            horizontal-alignment: center;
            vertical-alignment: center;
            color: root.enabled ? Palette.text-color : Palette.text-color-disabled;
        }
    }

    touch-area := TouchArea {
        width: root.width;
        height: root.height;
        clicked => {
            root.clicked();
        }
    }
}

export CheckBox := Rectangle {
    callback toggled;
    property <string> text;
    property <bool> checked;
    property<bool> enabled <=> touch-area.enabled;
    height: 20px;
    horizontal-stretch: 0;
    vertical-stretch: 0;

    HorizontalLayout {
        spacing: 8px;
        // the check box iteself
        indicator := Rectangle {
            width: 40px;
            border-width: 1px;
            border-radius: root.height / 2;
            border-color: root.enabled ? (root.checked ? Palette.highlight-background : black) : Palette.text-color-disabled;
            background: root.checked ? (root.enabled ? Palette.highlight-background : Palette.text-color-disabled) : white;
            animate background { duration: 100ms; }

            bubble := Rectangle {
                width: root.height - 8px;
                height: bubble.width;
                border-radius: bubble.height / 2;
                y: 4px;
                x: 4px + a * (indicator.width - bubble.width - 8px);
                property <float> a: root.checked ? 1 : 0;
                background: root.checked ? white : (root.enabled ? Palette.button-background : Palette.text-color-disabled);
                animate a, background { duration: 200ms; easing: ease;}
            }
        }

        Text {
            min-width: max(100px, preferred-width);
            text: root.text;
            vertical-alignment: center;
            color: root.enabled ? Palette.text-color : Palette.text-color-disabled;
        }

    }

    touch-area := TouchArea {
        width: root.width;
        height: root.height;
        clicked => {
            if (root.enabled) {
                root.checked = !root.checked;
                root.toggled();
            }
        }
    }

}

SpinBoxButton := Rectangle {
    callback clicked;
    property<string> text;
    property <length> font-size;
    property<bool> enabled <=> touch.enabled;
    border-width: 1px;
    border-radius: 2px;
    border-color: black;
    background: !enabled ? Palette.button-background-disabled : touch.pressed ? Palette.button-pressed : (touch.has-hover ? Palette.button-hover : Palette.button-background);
    animate background { duration: 100ms; }
    touch := TouchArea {
        clicked => {
            root.clicked();
        }
    }
    Text {
        x: enabled && touch.pressed ? 1px : 0px;
        y: enabled && touch.pressed ? 1px : 0px;
        width: parent.width;
        height: parent.height;
        vertical-alignment: center;
        horizontal-alignment: center;
        text: root.text;
        font-size: root.font-size;
        color: root.enabled ? Palette.text-color : Palette.text-color-disabled;
    }
}

export SpinBox := Rectangle {
    callback toggled;
    property <string> text;
    property <bool> checked;
    property <int> value;
    property <int> minimum;
    property <int> maximum: 100;
    property <length> font-size;
    property<bool> enabled: true;

    background: white;

    max-height: 32px;
    min-height: 32px;
    min-width: 120px;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    SpinBoxButton {
        text: "-";
        font-size: root.font-size;
        clicked => {
            if (root.value > root.minimum) {
                root.value -= 1;
            }
        }
        width: parent.height;
        height: parent.height;
        enabled <=> root.enabled;
    }

    plus-button := SpinBoxButton {
        width: parent.height;
        height: parent.height;
        enabled <=> root.enabled;
        x: parent.width - self.width;
        font-size: root.font-size;
        text: "+";
        clicked => {
            if (root.value < root.maximum) {
                root.value += 1;
            }
        }
    }

    Text {
        text: root.value;
        font-size: root.font-size;
        x: parent.height + 15px;
        width: plus-button.x - self.x - 15px;
        height: parent.height;
        horizontal-alignment: center;
        vertical-alignment: center;
        color: root.enabled ? Palette.text-color : Palette.text-color-disabled;
    }
}

export Slider := Rectangle {
    property<float> maximum: 100;
    property<float> minimum: 0;
    property<float> value;
    property<bool> enabled <=> touch-area.enabled;
    callback changed(float);

    max-height: 32px;
    min-height: 32px;
    min-width: 120px;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    slider-filled := Rectangle {
        width: parent.width;
        y: parent.height / 3;
        height: parent.height / 3;
        border-width: 1px;
        border-radius: 2px;
        border-color: black;
        background: root.enabled ? Palette.highlight-background : Palette.text-color-disabled;
    }

    slider-empty := Rectangle {
        y: slider-filled.y;
        x: handle.x;
        width: parent.width - self.x;
        height: slider-filled.height;
        border-width: slider-filled.border-width;
        border-radius: slider-filled.border-radius;
        border-color: slider-filled.border-color;
        background: root.enabled ? Palette.button-background : white;
    }

    handle := Rectangle {
        width: parent.height / 3;
        height: parent.height;
        border-width: 1px;
        border-radius: 3px;
        border-color: black;
        background: (touch-area.pressed && enabled) ? Palette.button-pressed : white;
        animate background { duration: 100ms; }
        x: (root.width - handle.width) * (new-value - minimum)/(maximum - minimum);
        property<float> new-value-tmp : (touch-area.pressed && enabled)
            ? root.value + (touch-area.mouse-x - touch-area.pressed-x) * (maximum - minimum) / (root.width - handle.width)
            : root.value;
        property<float> new-value : new-value-tmp < root.minimum ? root.minimum
            : new-value-tmp > root.maximum ? root.maximum : new-value-tmp;
    }
    touch-area := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            if (enabled) {
                root.value = handle.new-value;
                root.changed(root.value);
            }
        }
    }
}

export GroupBox := GridLayout {
    property <string> title <=> label.text;
    property<bool> enabled: true;

    spacing: 5px;
    Row {
        label := Text {
            vertical-stretch: 0;
            color: root.enabled ? Palette.text-color : Palette.text-color-disabled;
        }
    }
    Row {
        Rectangle {
            border-width: 1px;
            border-color: Palette.border-color;
            border-radius: 2px;
            background: white;

            GridLayout {
                padding: 10px;
                @children
            }
        }
    }
}

export TabWidgetImpl := Rectangle {
    property <length> content-x: 0;
    property <length> content-y: tabbar-preferred-height;
    property <length> content-height: height - tabbar-preferred-height;
    property <length> content-width: width;
    property <length> tabbar-x: 0;
    property <length> tabbar-y: 0;
    property <length> tabbar-height: tabbar-preferred-height;
    property <length> tabbar-width: width;

    property <length> tabbar-preferred-height;
    property <length> tabbar-preferred-width;
    property <length> content-min-height;
    property <length> content-min-width;
    property <int> current-index;

    border-width: 1px;
    border-color: Palette.border-color;
    border-radius: 2px;

    preferred-width: content-min-width;
    min-width: content-min-width;
    preferred-height: content-min-height + tabbar-preferred-height;
    min-height: content-min-height + tabbar-preferred-height;

}
export TabImpl := Rectangle {
    property<string> title <=> t.text;
    //property<image> icon;
    property<bool> enabled : true;
    property<bool> pressed;
    property<int> current;
    property<int> tab-index;
    property<int> num-tabs;
    preferred-height: t.preferred-height + 8px;
    preferred-width: t.preferred-width + 12px;

    border-width: 1px;
    border-radius: 2px;
    border-color: black;
    background: !enabled ? Palette.button-background-disabled : (touch.pressed || current == tab-index) ? Palette.button-pressed : (touch.has-hover ? Palette.button-hover : Palette.button-background);
    animate background { duration: 100ms; }
    touch := TouchArea {
        clicked => {
            current = tab-index;
        }
    }
    t:= Text {
        x: enabled && (touch.pressed || current == tab-index) ? 1px : 0px;
        y: enabled && (touch.pressed || current == tab-index) ? 1px : 0px;
        width: parent.width;
        height: parent.height;
        vertical-alignment: center;
        horizontal-alignment: center;
        color: root.enabled ? Palette.text-color : Palette.text-color-disabled;
    }
}

export TabWidget := TabWidget {}

export TabBarImpl := HorizontalLayout {
    alignment: start;
}

export LineEdit := Rectangle {
    property <string> text;
    property <string> placeholder-text;
    property <bool> has-focus: input.has-focus;
    property <bool> enabled <=> input.enabled;
    callback accepted(string);
    callback edited(string);
    forward-focus: input;

    border-color: root.has-focus ? Palette.highlight-background : #ffffff;
    border-radius: 1px;
    border-width: 2px;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    GridLayout {
        padding: 3px;

        Rectangle {
            border-color: #ecedeb;
            border-radius: 1px;
            border-width: 1px;
            background: white;

            GridLayout {
                padding: 3px;
                input := TextInput {
                    text <=> root.text;
                    accepted => {
                        root.accepted(self.text);
                    }
                    edited => {
                        root.edited(self.text);
                    }
                    color: enabled ? Palette.text-color : Palette.text-color-disabled;
                    single-line: true;
                }
                Text {
                    color: Palette.placeholder-text;
                    col: 0;
                    row: 0;
                    text: (root.text == "" && !input.has-focus) ? root.placeholder-text : "";
                }
            }
        }

    }
}

ScrollBar := Rectangle {
    background: white;
    border-color: Palette.button-background;
    border-width: 1px;
    property <bool> horizontal;
    property<length> max;
    property<length> page-size;
    // this is always negative and migger than  -max
    property<length> value;

    handle := Rectangle {
        width: !horizontal ? parent.width : max <= 0phx ? 0phx : parent.width * (page-size / (max + page-size));
        height: horizontal ? parent.height : max <= 0phx ? 0phx : parent.height * (page-size / (max + page-size));

        border-radius: (horizontal ? self.height : self.width) / 2;
        background: touch-area.pressed ? Palette.button-pressed : (touch-area.has-hover ? Palette.button-hover : Palette.button-background);
        animate background { duration: 100ms; }
        x: !horizontal ? 0phx : (root.width - handle.width) * (new-value / max);
        y: horizontal ? 0phx : (root.height - handle.height) * (new-value / max);
        property<length> new-value-tmp : -root.value + (
            !touch-area.pressed ? 0phx
            : horizontal ?  (touch-area.mouse-x - touch-area.pressed-x) * (max / (root.width - handle.width))
            : (touch-area.mouse-y - touch-area.pressed-y) * (max / (root.height - handle.height)));
        property<length> new-value : new-value-tmp < 0phx ? 0phx
            : root.max < 0phx ? 0phx
            : new-value-tmp > root.max ? root.max : new-value-tmp;
    }
    touch-area := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            root.value = -handle.new-value;
        }
    }

}

export ScrollView := Rectangle {
    property <length> viewport-width <=> fli.viewport-width;
    property <length> viewport-height <=> fli.viewport-height;
    property <length> viewport-x <=> fli.viewport-x;
    property <length> viewport-y <=> fli.viewport-y;
    property <length> visible-width <=> fli.width;
    property <length> visible-height <=> fli.height;
    min-height: 50px;
    min-width: 50px;
    border-width: 1px;
    border-color: Palette.border-color;
    background: Palette.base-background-color;
    horizontal-stretch: 1;
    vertical-stretch: 1;

    fli := Flickable {
        @children
        x: 1px;
        y: 1px;
        interactive: false;
        viewport-y <=> vbar.value;
        viewport-x <=> hbar.value;
        viewport-height: 1000px;
        viewport-width: 1000px;
        width: parent.width - vbar.width - 1px;
        height: parent.height - hbar.height -1px;
    }
    vbar := ScrollBar {
        width: 16px;
        x: fli.width + fli.x;
        height: fli.height + fli.y;
        horizontal: false;
        max: fli.viewport-height - fli.height;
        page-size: fli.height;
    }
    hbar := ScrollBar {
        height: 16px;
        y: fli.height + fli.y;
        width: fli.width + fli.x;
        horizontal: true;
        max: fli.viewport-width - fli.width;
        page-size: fli.width;
    }
}

export ListView := ScrollView {
    @children
}

export StandardListView := ListView {
    property<[StandardListViewItem]> model;
    property<int> current-item: -1;
    for item[idx] in model : Rectangle {
        l := HorizontalLayout {
            padding: 0px;
            spacing: 0px;
            t := Text {
                text: item.text;
                color: Palette.text-color;
            }
        }
        background: current-item == idx ? Palette.highlight-background : transparent;
        TouchArea {
            width: parent.width;
            height: parent.height;
            clicked => { current-item = idx; }
        }
    }
}

export ComboBox := Rectangle {
    property <[string]> model;
    property <int> current-index : -1;
    property <string> current-value;
    //property <bool> is-open: false;
    property<bool> enabled <=> touch-area.enabled;
    callback selected(string);

    border-width: 1px;
    border-radius: 2px;
    border-color: Palette.text-color;
    background: !enabled ? Palette.button-background-disabled : touch-area.pressed ? Palette.button-pressed : (touch-area.has-hover ? Palette.button-hover : Palette.button-background);
    animate background { duration: 100ms; }
    horizontal-stretch: 0;
    vertical-stretch: 0;
    min-width: 170px;

    HorizontalLayout {
        padding-top: root.border-radius + 8px;
        padding-bottom: root.border-radius + 8px;
        padding-left: root.border-radius + 8px;
        padding-right: root.border-radius + 8px;

        t := Text {
            text <=> root.current-value;
            horizontal-alignment: left;
            vertical-alignment: center;
            color: root.enabled ? Palette.text-color : Palette.text-color-disabled;
            horizontal-stretch: 1;
        }
        Text {
            text:"▼";
            color: root.enabled ? Palette.text-color : Palette.text-color-disabled;
            horizontal-stretch: 0;
            vertical-alignment: center;
        }
    }

    touch-area := TouchArea {
        width: 100%;
        height: 100%;
        clicked => {
            //is-open = !is-open;
            popup.show();
        }
    }

    popup := PopupWindow {
        y: root.height;
        width: root.width;
        VerticalLayout {
            spacing: 0px;
            for value[idx] in root.model: Rectangle {
                background: item-area.has-hover ? Palette.highlight-background : Palette.base-background-color;
                VerticalLayout { // FIXME: ideally this layout shouldn't be required
                    Text {
                        text: value;
                    }
                }
                item-area := TouchArea {
                    width: 100%;
                    height: 100%;
                    clicked => {
                        if (root.enabled) {
                            root.current-index = idx;
                            root.current-value = value;
                            root.selected(root.current-value);
                        }
                        //is-open = false;
                    }
                }
            }
        }
    }
}

export VerticalBox := VerticalLayout {
    spacing: StyleMetrics.layout-spacing;
    padding: StyleMetrics.layout-spacing;
}
export HorizontalBox := HorizontalLayout {
    spacing: StyleMetrics.layout-spacing;
    padding: StyleMetrics.layout-spacing;
}
export GridBox := GridLayout {
    spacing: StyleMetrics.layout-spacing;
    padding: StyleMetrics.layout-spacing;
}

/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2021 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2021 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */

import { StyleMetrics, ScrollView } from "sixtyfps_widgets_impl.60";

export LineEditInner := Rectangle {
    callback accepted(string);
    callback edited(string);
    property<string> placeholder-text;
    property text <=> input.text;
    property placeholder-color <=> placeholder.color;
    property enabled <=> input.enabled;
    property has-focus <=> input.has-focus;
    min-height: input.preferred-height;
    min-width: 50px;
    clip: true;
    forward-focus: input;
    input := TextInput {
        property <length> computed_x;
        x: min(0px, max(parent.width - width, computed_x));
        width: max(parent.width, preferred-width);
        height: 100%;
        color: enabled ? StyleMetrics.textedit-text-color : StyleMetrics.textedit-text-color-disabled;
        cursor-position-changed(cpos) => {
            if (cpos.x + computed_x < StyleMetrics.layout-padding) {
                computed_x = - cpos.x + StyleMetrics.layout-padding;
            } else if (cpos.x + computed_x > parent.width - StyleMetrics.layout-padding) {
                computed_x = parent.width - cpos.x - StyleMetrics.layout-padding;
            }
        }
        accepted => { root.accepted(self.text); }
        edited => { root.edited(self.text); }
        vertical-alignment: center;
        single-line: true;
    }
    placeholder := Text {
        height: 100%; width: 100%;
        vertical-alignment: center;
        text: root.text == "" ? root.placeholder-text : "";
    }
}

export TextEdit := ScrollView {
    property <string> text <=> input.text;
    has-focus <=> input.has-focus;
    enabled <=> input.enabled;
    property <TextWrap> wrap <=> input.wrap;
    callback edited(string);
    forward-focus: input;

    horizontal-stretch: 1;
    vertical-stretch: 1;

    viewport-width: wrap == TextWrap.word-wrap ? root.visible-width : max(root.visible-width, input.preferred-width);
    viewport-height: max(self.visible-height, input.preferred-height);

    Rectangle {
        background: enabled ? StyleMetrics.textedit-background : StyleMetrics.textedit-background-disabled;
    }

    input := TextInput {
        edited => { root.edited(self.text); }
        color: enabled ? StyleMetrics.textedit-text-color : StyleMetrics.textedit-text-color-disabled;
        single-line: false;
        wrap: word-wrap;
        cursor-position-changed(cpos) => {
            if (cpos.x + viewport-x < StyleMetrics.layout-padding) {
                viewport-x = min(0px, max(parent.visible-width - width,  - cpos.x + StyleMetrics.layout-padding ));
            } else if (cpos.x + viewport-x > parent.visible-width - StyleMetrics.layout-padding) {
                viewport-x = min(0px, max(parent.visible-width - width,  parent.visible-width - cpos.x - StyleMetrics.layout-padding ));
            }
            if (cpos.y + viewport-y < StyleMetrics.layout-padding) {
                viewport-y = min(0px, max(parent.visible-height - height,  - cpos.y + StyleMetrics.layout-padding ));
            } else if (cpos.y + viewport-y > parent.visible-height - StyleMetrics.layout-padding - 20px) {
                // FIXME: font-height hardcoded to 20px
                viewport-y = min(0px, max(parent.visible-height - height,  parent.visible-height - cpos.y - StyleMetrics.layout-padding - 20px));
            }
        }
    }
}
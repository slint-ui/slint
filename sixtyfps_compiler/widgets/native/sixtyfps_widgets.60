/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2021 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2021 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */

export { NativeStyleMetrics as StyleMetrics }

// FIXME: the font-size should be removed but is required right now to compile the printer-demo
export Button := NativeButton {
    property<length> font-size;
    enabled: true;
}
export CheckBox := NativeCheckBox { }
export SpinBox := NativeSpinBox { property<length> font-size; }
export Slider := NativeSlider { }
export GroupBox := NativeGroupBox {
    GridLayout {
        padding-left: root.native-padding-left;
        padding-right: root.native-padding-right;
        padding-top: root.native-padding-top;
        padding-bottom: root.native-padding-bottom;
        @children
    }
 }
export LineEdit := NativeLineEdit {
    property <string> text;
    property <string> placeholder-text;
    enabled: true;
    focused: input.has-focus;
    forward-focus: input;
    callback accepted(string);
    callback edited(string);
    GridLayout {
        padding-left: root.native-padding-left;
        padding-right: root.native-padding-right;
        padding-top: root.native-padding-top;
        padding-bottom: root.native-padding-bottom;
        input := TextInput {
            text <=> root.text;
            enabled: root.enabled;
            accepted => {
                root.accepted(self.text);
            }
            edited => {
                root.edited(self.text);
            }
        }
        Text {
            color: #ecedeb; // FIXME: use the palette
            col: 0;
            row: 0;
            text: root.text == "" ? root.placeholder-text : "";
        }
    }
}

export ScrollView := NativeScrollView {
    property <length> viewport-width <=> fli.viewport-width;
    property <length> viewport-height <=> fli.viewport-height;
    property <length> viewport-x <=> fli.viewport-x;
    property <length> viewport-y <=> fli.viewport-y;
    property <length> visible-width <=> fli.width;
    property <length> visible-height <=> fli.height;

    vertical-max: fli.viewport-height > fli.height ? fli.viewport-height - fli.height : 0phx;
    vertical-page-size: fli.height;

    horizontal-max: fli.viewport-width > fli.width ? fli.viewport-width - fli.width : 0phx;
    horizontal-page-size: fli.width;

    fli := Flickable {
        x: root.native-padding-left;
        width: root.width - root.native-padding-left - root.native-padding-right;
        y: root.native-padding-top;
        height: root.height - root.native-padding-top - root.native-padding-bottom;

        @children
        interactive: false;
        viewport-y <=> root.vertical-value;
        viewport-x <=> root.horizontal-value;
        viewport-height: 1000px;
        viewport-width: 1000px;
    }
}

export ListView := ScrollView {
    @children
}

export StandardListView := ListView {
    property<[StandardListViewItem]> model;
    property<int> current-item: -1;
    for item[i] in model : NativeStandardListViewItem {
        item: item;
        index: i;
        is-selected: current-item == i;
        TouchArea {
            clicked => { current-item = i; }
        }
    }
}


export ComboBox := NativeComboBox {
    property <[string]> model;
    property <int> current-index : -1;
    enabled: true;
    open-popup => { popup.show(); }
    callback selected(string);

    popup := PopupWindow {
        // FIXME: the popup should have a native background
        Rectangle {
            background: lightgray;
            width: 100%;
            height: 100%;
        }
        y: root.height;
        width: root.width;
        VerticalLayout {
            spacing: 0px;
            for value[i] in root.model: NativeStandardListViewItem {
                item: { text: value };
                is-selected: current-index == i;
                VerticalLayout {  // FIXME: ideally this layout shouldn't be required
                    TouchArea {
                        height: 25px;
                        clicked => {
                            if (root.enabled) {
                                current-index = i;
                                current-value = value;
                                selected(current-value);
                            }
                            //is-open = false;
                        }
                    }
                }
            }
        }
    }
}

export TabWidgetImpl := NativeTabWidget {
    property <int> current-index;
}
export TabImpl := NativeTab {}
export TabBarImpl := HorizontalLayout {
    alignment: start;
}
export TabWidget := TabWidget {}

export VerticalBox := VerticalLayout {
    spacing: NativeStyleMetrics.layout-spacing;
    padding: NativeStyleMetrics.layout-spacing;
}
export HorizontalBox := HorizontalLayout {
    spacing: NativeStyleMetrics.layout-spacing;
    padding: NativeStyleMetrics.layout-spacing;
}
export GridBox := GridLayout {
    spacing: NativeStyleMetrics.layout-spacing;
    padding: NativeStyleMetrics.layout-spacing;
}

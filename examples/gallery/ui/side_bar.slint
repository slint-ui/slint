// Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial

import { StyleMetrics } from "std-widgets.slint";

SideBarItem := Rectangle {
    callback clicked <=> touch.clicked;
    property<string> text <=> label.text;
    property<bool> selected;
    property<bool> has-focus;

    min-height: l.preferred-height;

    state := Rectangle {  
        opacity: 0;
        background: StyleMetrics.window-background;

        animate opacity { duration: 150ms; }
    }
    
    l := HorizontalLayout {  
        y: (parent.height - height) / 2;
        padding: StyleMetrics.layout-padding;
        spacing: 0px;

        label := Text {
            color: StyleMetrics.default-text-color;
            vertical-alignment: center;
         }
    }

    touch := TouchArea {
        width: 100%;
        height: 100%;
    }

    states [  
        pressed when touch.pressed : {
            state.opacity: 0.8;
        }
        hover when touch.has-hover : {
            state.opacity: 0.6;
        }
        selected when root.selected : {
            state.opacity: 1;
        }
        focused when root.has-focus : {
            state.opacity: 0.8;
        }
    ]
}

export SideBar := Rectangle {
    property<[string]> model: [];
    property<int> current-item: 0;
    property<string> title <=> label.text;
    property<int> current-focused: fs.has-focus ? fs.focused-tab : -1; // The currently focused tab
    width: 180px;

    forward-focus: fs;

    accessible-role: tab;
    accessible-delegate-focus: current-focused >= 0 ? current-focused : current-item;

    Rectangle {  
        background: StyleMetrics.window-background.darker(0.2);

        fs := FocusScope {
            width: 0px; // Do not react on clicks
            property<int> focused-tab: 0;
    
            key-pressed(event) => {
                if (event.text == "\n") {
                     current-item = current-focused;
                     return accept;
                }
                if (event.text == Keys.UpArrow) {
                     focused-tab = Math.max(focused-tab - 1,  0);
                     return accept;
                }
                if (event.text == Keys.DownArrow) {
                     focused-tab = Math.min(focused-tab + 1, model.length - 1);
                     return accept;
                }
                return reject;
            }
    
            key-released(event) => {
                if (event.text == " ") {
                     current-item = current-focused;
                     return accept;
                }
                return reject;
            }
        }
    }
   
    VerticalLayout {      
        padding-top: StyleMetrics.layout-padding;
        padding-bottom: StyleMetrics.layout-padding;
        spacing: StyleMetrics.layout-spacing;
        alignment: start;

        label := Text {
            font-size: 16px;
            horizontal-alignment: center;
        }

        navigation := VerticalLayout { 
            alignment: start;
            vertical-stretch: 0; 
            for item[index] in model : SideBarItem {
                has-focus: index == root.current-focused;
                text: item;
                selected: index == current-item;
                clicked => { current-item = index; }
            }
        }

        VerticalLayout {  
            bottom := VerticalLayout {  
                padding-left: StyleMetrics.layout-padding;
                padding-right: StyleMetrics.layout-padding;

                @children
             }
        }    
    }
}
// Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial

import { FloatButton } from "float_button.slint";
import { Images } from "../images.slint";
import { Theme } from "../theme.slint";

component ScrollBar {
    private property <length> ref-width: self.width - 4px;

    in-out property<length> page-size;
    in-out property<length> value;
    in-out property<length> maximum;

    min-height: 14px;

    Rectangle {
        border-width: 1px;
        border-radius: 6px;
        border-color: Theme.palette.slint-blue-300;

        i-indicator := Rectangle {
            x: 2px + (root.ref-width - i-indicator.width) * (-root.value / root.maximum);
            height: parent.height - 4px;
            background: Theme.palette.slint-blue-300;
            width: max(32px, ref-width * root.page-size / (root.maximum + root.page-size));
            border-radius: parent.border-radius - 2px;
        }
    }

    TouchArea {
        property <length> pressed-value;

        width: parent.width;
        height: parent.height;

        pointer-event(event) => {
            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                self.pressed-value = -root.value;
            }
        }
        moved => {
            if (self.enabled && self.pressed) {
                root.value = -max(0px, min(root.maximum, self.pressed-value + (
                   (self.mouse-x - self.pressed-x) * (root.maximum / (root.width - i-indicator.width))
                )));
            }
        }
    }
}

export component PageContainer {
    callback clicked <=> i-touch-area.clicked;

    in property <bool> transparent-background: true;
    out property <length> mouse-x: i-touch-area.mouse-x;

    in property <bool> shrink;

    min-width: shrink ? 0 : 320px;
    min-height: shrink ? 0 : 240px;

    i-touch-area := TouchArea {}

    Rectangle {
        border-radius: 6px;
        background: Theme.palette.dark-deep-blue;
        opacity: root.transparent-background ? 0.5 : 1.0;
    }

    Rectangle {
        y: 10px;
        height: root.height - 20px;

        @children
    }

    states [
        shrink when shrink : {
            horizontal-stretch: 0;
            opacity: 0.0;
        }
    ]

    animate min-width, opacity { duration: 400ms; }
}

export component PageScrollView {
    private property <bool> zoomed-in: selected-index > -1;
    private property <float> navigation-opacity: 1.0;

    out property <length> viewport-width: i-flickable.viewport-width;
    in-out property <length> viewport-x <=> i-flickable.viewport-x;
    out property <int> selected-index: -1;

    VerticalLayout {
        spacing: zoomed-in ? 0 : 10px;
        padding-bottom: zoomed-in ? 20px : 0;

        VerticalLayout {
            vertical-stretch: 1;
            alignment: zoomed-in ? stretch : center;

            i-flickable := Flickable {
                vertical-stretch: 1;

                i-layout := HorizontalLayout {
                    padding-left: 20px;
                    padding-right: 20px;
                    spacing: zoomed-in ? 0 : 20px;

                    @children

                    animate height { duration: 200ms; }
                }
            }
        }

        HorizontalLayout {
            vertical-stretch: 0;
            spacing: 25px;
            padding-left: 25px;
            padding-right: 25px;
            opacity: navigation-opacity;

            FloatButton {
                visible: i-flickable.viewport-x < 0;
                horizontal-stretch: 0;
                icon: Images.arrow-left;


                clicked => {
                    scroll-left();
                }
            }

            VerticalLayout {
                alignment: center;
                horizontal-stretch: 1;

                ScrollBar {
                    maximum: i-flickable.viewport-width - i-flickable.width;
                    page-size: i-flickable.width;
                    value <=> i-flickable.viewport-x;
                }
            }

            FloatButton {
                visible: i-flickable.viewport-x > i-flickable.width - i-flickable.viewport-width;
                horizontal-stretch: 0;
                icon: Images.arrow-right;

                clicked => {
                    scroll-right();
                }
            }
        }
    }

    pure public function shrink(index: int) -> bool {
        return selected-index > -1 && index != selected-index;
    }

    public function toggle-selection(index: int) {
       if(selected-index > -1) {
            selected-index = -1;
            return;
       }

       selected-index = index;
    }

    function scroll-left() {
        i-flickable.viewport-x = min(i-flickable.viewport-x + 64px, 0);
    }

    function scroll-right() {
        i-flickable.viewport-x = max(i-flickable.viewport-x - 64px,  i-flickable.width - i-flickable.viewport-width);
    }

    states [
        zoomed-in when zoomed-in : {
            i-layout.x: -viewport-x;
            navigation-opacity: 0.0;

            out {
                animate navigation-opacity { duration: 400ms; }
            }
        }
    ]
}